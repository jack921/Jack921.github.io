<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢汉杰</title>
  <subtitle>保持愚蠢，保持饥饿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jack921.win/"/>
  <updated>2017-08-31T16:44:00.540Z</updated>
  <id>http://jack921.win/</id>
  
  <author>
    <name>jack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>疯狂java笔记之树和二叉树</title>
    <link href="http://jack921.win/2017/09/01/%E7%96%AF%E7%8B%82java%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://jack921.win/2017/09/01/疯狂java笔记之树和二叉树/</id>
    <published>2017-08-31T16:43:03.000Z</published>
    <updated>2017-08-31T16:44:00.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="树的概述"><a href="#树的概述" class="headerlink" title="树的概述"></a>树的概述</h1><p>树是一种非常常用的数据结构，树与前面介绍的线性表，栈，队列等线性结构不同，树是一种非线性结构</p>
<h3 id="1-树的定义和基本术语"><a href="#1-树的定义和基本术语" class="headerlink" title="1.树的定义和基本术语"></a>1.树的定义和基本术语</h3><p>计算机世界里的树，是从自然界中实际的树抽象而来的，它指的是N个有父子关系的节点的有限集合。对于这个有限的节点集合而言，它满足如下条件：</p>
<ul>
<li>当N=0时，改节点集合为空，这课树也被称为空树</li>
<li>在任意的非空树中，有且仅有一个根(root)节点</li>
<li>当N&gt;1时，除根节点以外的其余节点可分为M个互为相交的有限集合T1,T2,…,Tm，其中的每个集合本身又是一棵树，并称其为根的子树（subtree）。</li>
</ul>
<p>从上面定义可以发现树的递归特性：一棵树由根和若干棵子树组成，而每棵子树又由若干棵更小的子树组成。</p>
<p>树中任一节点可以有0或多个子节点，但只能有一个父节点。根节点是一个特例，根节点没有父节点，叶子节点没有子节点。树中每个节点既可以是其上一级节点的子节点，也可以是下一级节点的父节点，因此同一个节点既可以是父节点，也可以是子节点(类似于一个人—————他既是他儿子的父亲，又是他父亲的儿子)。</p>
<p>很显然，父子关系是一种非线性关系，所以树结构是非线性结构。</p>
<p>如果按节点是否包含子节点来分，节点可以分成以下两种:</p>
<ul>
<li>普通节点：包含子节点的节点</li>
<li>叶子节点：没有子节点的节点，因此叶子节点不可作为父节点</li>
</ul>
<p>如果按节点是否具有唯一的父节点来分，节点有可分为如下两种：</p>
<ul>
<li>根节点：没有父节点的节点，根节点不可作为子节点</li>
<li>普通节点：具有唯一父节点的节点</li>
</ul>
<p>一棵树只能有一个根节点，如果一棵树有了多个根节点，那么它已经不再是一棵树了，而是多棵树的集合，有时也被称为森林。示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-bd5e26cd54288a2c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree.PNG"><br>与树有关的术语有如下一些：</p>
<ul>
<li>节点：树的最基本组成单元，通常包括一个数据元素及若干指针用于指向其他节点。</li>
<li>节点的度：节点拥有的子树的个数被称为节点的度（degree）</li>
<li>树的度：树中所有节点的度的最大值就是该树的度</li>
<li>叶子节点：度为0的节点被称为叶子节点或终端节点</li>
<li>分支节点：度不为0的节点被称为分支节点或非终端节点</li>
<li>子节点,父节点，兄弟节点：节点的子树的根被称为该节点的子节点，而该节点称为子节点的父节点(parent).具有相同父节点的子节点之间互称为兄弟节点。</li>
<li>节点的层次(level):节点的层次从根开始算起，根的层次值为1，其余节点的层次值为父节点层次值加l。</li>
<li>树的深度(depth):树中节点的最大层次值称为树的深度或高度。</li>
<li>有序树与无序树:如果将树中节点的各棵子树看成从左到右是有序的(即不能互换),则称该树为有序树,否则称为无序树。</li>
<li>祖先节点(ancestor)：从根到该节点所经分支上的所有节点</li>
<li>后代节点(descendant):以某节点为根的子树中任一节点都称为该节点的后代节点。</li>
<li>森林(forest):森林是；两颗或两颗以上互不相交的树的集合，删去一棵树的根，就得到一个森林。</li>
</ul>
<h3 id="树的基本操作"><a href="#树的基本操作" class="headerlink" title="树的基本操作"></a>树的基本操作</h3><p>如果需要实现一棵树，程序不仅要以合适的方式保存该树的所有节点，还要记录节点与节点之间的父子关系。接下来，还应该为树实现如下基本操作。</p>
<ul>
<li>初始化:通常是一个构造器，用于创建一棵空树，或者以指定节点为根来创建树。</li>
<li>为指定节点添加子节点</li>
<li>判断树是否为空</li>
<li>返回根节点</li>
<li>返回指定节点（非根节点）的父节点</li>
<li>返回指定节点（非叶子节点）的所有子节点</li>
<li>返回指定节点（非叶子节点）的第i个子节点</li>
<li>返回该树的深度</li>
<li>返回指定节点的位置<br>为了实现树这种数据结构，程序必须能记录节点与节点之间的父子关系，为此有一下两种选择：</li>
<li>父节点表示法:每个子节点都记录它的父节点。</li>
<li>子节点链表示法:每个非叶子节点通过一个链表来记录它所有的子节点。</li>
</ul>
<h3 id="父节点表示法"><a href="#父节点表示法" class="headerlink" title="父节点表示法"></a>父节点表示法</h3><p>通过前面的介绍可以发现，树中除根节点之外的每个节点都有一个父节点。为了记录树中节点与节点之间的父子关系，可以为每个节点增加一个parent域，用以记录该节点的父节点。用如下图和如下表来表示<br><img src="http://upload-images.jianshu.io/upload_images/925576-ffd2978506d5efa5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree_show.PNG"></p>
<table>
<thead>
<tr>
<th>数组索引</th>
<th>data</th>
<th>parent</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>A</td>
<td>-1</td>
</tr>
<tr>
<td>1</td>
<td>B</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>C</td>
<td>0</td>
</tr>
<tr>
<td>3</td>
<td>D</td>
<td>0</td>
</tr>
<tr>
<td>4</td>
<td>E</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>F</td>
<td>3</td>
</tr>
<tr>
<td>6</td>
<td>G</td>
<td>3</td>
</tr>
<tr>
<td>7</td>
<td>H</td>
<td>4</td>
</tr>
<tr>
<td>8</td>
<td>I</td>
<td>4</td>
</tr>
<tr>
<td>9</td>
<td>J</td>
<td>4</td>
</tr>
<tr>
<td>10</td>
<td>K</td>
<td>6</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>由此可见，只要用一个节点数组来保存树里的每个节点，并让每个节点记录其父节点在数组中的索引即可。</p>
<h3 id="子节点链表表示法"><a href="#子节点链表表示法" class="headerlink" title="子节点链表表示法"></a>子节点链表表示法</h3><p>父节点表示法的思想是让每个节点“记住”它的父节点的索引，父节点表示法是从子节点着手的;反过来，还有另外一种方式:让父节点“记住”它的所有子节点口在这种方式下，由于每个父节点需要记住多个子节点，因此必须采用“子节点链”表示法。示意图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9f70fcf832367c1d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree_linked.PNG"></p>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h3 id="二叉树的定义和基本概念"><a href="#二叉树的定义和基本概念" class="headerlink" title="二叉树的定义和基本概念"></a>二叉树的定义和基本概念</h3><p>二叉树指的是每个节点最多只能有两个子树的有序树。通常左边的子树被称作“左子树”(left subtree)，右边的子树被称为“右子树”(right subtree).由此可见，二叉树依然是树，它是一种特殊的树。<br>二叉树的每个节点最多只有来两颗树(不存在度大于2的节点)，二叉树的子树有左，右之分，次序不能颠倒。<br>树和二叉树的两个重要区别如下：</p>
<ul>
<li>树中节点的最大度数没有限制，而二叉树节点的最大度数为2，也就是说，二叉树是节点的最大度数为2的树。</li>
<li>无序树的节点无左右之分，而二叉树的节点有左，右之分，也就是说，二叉树是有序树。</li>
</ul>
<p>一棵深度为k的二叉树，如果它包含了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2^k-1</div></pre></td></tr></table></figure></p>
<p>个节点，就把这棵二叉树称为满二叉树。满二叉树的特点是。每一层上的节点数都是最大节点数，即各层节点数分别为1,2,4,8, 16,…,满二叉树下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-1434816834887e07.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="two_tree.PNG"></p>
<p>一颗有n个节点的二叉树，按满二叉树的编号方式对它进行编号，若树中所有节点和满二叉树1~n编号完全一致，则称该树为完全二叉树。也就是说，如果一颗二叉树除最后一层外，其余层的所有节点都是满的，并且最后一层或者是满的，或者仅在右边缺少若干连续的节点，则此二叉树就是完全二叉树。 </p>
<p>综上所述，二叉树大致有如下几个性质：</p>
<ul>
<li>二叉树第i层上的节点数据至多为2的i-1次方</li>
<li>深度为k的二叉树至多有2的k次方-1个节点.满二叉树的每层节点的数量依次为1, 2, 4,8,…,因此深度为k的满二叉树包含的节点数为公比为2的等比数列的前k项总和，<br>即2的k次方一1。</li>
<li>在任何一棵二叉树中，如果其叶子节点的数量为n0,度为2的子节点数量为n2，则<br>n0=n2 + 1。这是因为:如果为任意叶子节点增加一个子节点，则原有叶子节点变成非叶子节点，新增节点变成叶子节点，上述等式不变;如果为任意叶子节点增加两个子节点，则原有叶子节点变成度为2的非叶子lto点，新增的两个节点变成叶子节点，上述等式依然不变。</li>
<li>具有n个节点的完全二叉树的深度为log2(n+1)</li>
<li><p>对于一颗具有n个节点的完全二叉树的节点按层自左向右编号，则对任一编号为i(n&gt;=i&gt;=1)的节点有下列性质。</p>
</li>
<li><p>当i==1时，节点i是二叉树的根；若i&gt;1，则节点的父节点是i/2</p>
</li>
<li>若2i&lt;n,则节点i有左孩子，左孩子的编号是2i;否则，节点无左孩子，并且是叶子节点</li>
<li>若2i+1&lt;=n,则节点i有右孩子，右孩子的编号是2i+1;否则，节点无右孩子。</li>
<li>1~n/2范围的节点都是有孩子节点的非叶子节点，其余的节点全部都是叶子节点。编号为n/2的节点可能只有左子节点，也可能即有左子节点，又有右子节点。</li>
</ul>
<h3 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h3><p>二叉树记录其节点之间的父子关系更加简单，因为二叉树中的每个节点最多只能保存两个子节点。接下来，程序也需要为二叉树实现如下基本操作。</p>
<ul>
<li>初始化：通常是一个构造器，用于创建一颗空树，或者以指定节点为根来创建二叉树。</li>
<li>为指定节点添加子节点</li>
<li>判断二叉树是否为空</li>
<li>返回根节点</li>
<li>返回指定节点(非根节点)的父节点</li>
<li>返回指定节点(非叶子节点)的左子节点</li>
<li>返回指定节点(非叶子节点)的右子节点</li>
<li>返回该二叉树的深度</li>
<li>返回指定节点的位置</li>
</ul>
<p>要实现二叉树这种数据结构，有以下三种选择。</p>
<ul>
<li>顺序存储:采用数组来记录二叉树的所有节点。</li>
<li>二叉链表存储:每个节点保留一个left,right域，分别指向其左、右子节点。</li>
<li>三叉链表存储:每个节点保留一个left, right,parent域，分别指向其左、右子节点和父节点。</li>
</ul>
<h3 id="二叉树的顺序存储"><a href="#二叉树的顺序存储" class="headerlink" title="二叉树的顺序存储"></a>二叉树的顺序存储</h3><p>顺序存储指的是充分利用满二叉树的特性:每层的节点数分别为1, 2, 4, 8,…,2的(i-1)2的i次方。一棵<br>深度为i的二叉树最多只能包含2的i次方一1个节点，因此只要定义一个长度为2的i次方一1的数组即可存储这棵二叉树。</p>
<p>对于普通二叉树(不是满二叉树)，那些空出来的节点对应的数组元素留空就可以了。由此可见，二叉树采用顺序存储会造成一定的空间浪费。对于下图1所示的二叉树(完全二叉树)，采用下图2所示的数组来保存即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a177852b43af401f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图1.PNG"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-f95bb601717e36a3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图2.PNG"></p>
<p>对于左图所示的二叉树，需使用右图所示的数组来保存。<br><img src="http://upload-images.jianshu.io/upload_images/925576-c28307f09de9b13d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="compare_tree.PNG"></p>
<p>当使用数组来存储二又树的所有节点时可能会产生一定的空间浪费，如果该二叉树是完全二叉树，就不会有任何空间浪费了;但如果该二叉树的所有节点都只有右子节点，那么就会产生相当大的空间浪费.</p>
<h3 id="二叉树的二叉链表存储"><a href="#二叉树的二叉链表存储" class="headerlink" title="二叉树的二叉链表存储"></a>二叉树的二叉链表存储</h3><p>二叉链表存储的思想是让每个节点都能“记住”它的左，右两个子节点。为每个节点增加left,right两个指针，分别引用改节点的左，右两个子节点，因此二叉链表存储的每个节点有如下图结构：<br><img src="http://upload-images.jianshu.io/upload_images/925576-d6c14c93154ffe70.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="two_fork_tree.PNG"></p>
<p>二叉链表存储的二叉树的节点大致有如下定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class Node&#123;</div><div class="line">    Object data;</div><div class="line">    Node left;</div><div class="line">    Node right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这种二叉链表存储的二叉树，如果程序需要，为指定节点添加子节点也非常容易，让父节点的left或right引用指向新节点即可。</p>
<h3 id="二叉树的三叉链表存储"><a href="#二叉树的三叉链表存储" class="headerlink" title="二叉树的三叉链表存储"></a>二叉树的三叉链表存储</h3><p>三叉链表存储的思想是让每个节点不仅“记住”它的左右两个子节点，还要“记住”它的父节点，因此需要为每个节点增加left,right和parent三个指针，分别引用该节点的左，右两个子节点和父节点。因此，三叉链表存储的每个节点有如下图的结构：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-66708589cd35871f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="three_tree.PNG"></p>
<p>因此三叉链表存储的二叉树的节点大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Node&#123;</div><div class="line">    Object data;</div><div class="line">    Node left;</div><div class="line">    Node right;</div><div class="line">    Node parent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于这种三叉链表存储的二叉树，如果程序需要，为指定节点添加子节点也非常容易，除了要维护父节点的left,right引用之外，还要维护新增节点的parent引用。</p>
<h1 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h1><p>遍历二叉树指的是按某种规律依次访问二叉树的每个节点，对二叉树的遍历过程就是讲非线性结构的二叉树的节点排列成线性序列的过程。</p>
<p>如果采用顺序结构来保存二叉树，程序遍历二叉树非常容易，无须进行任何思考，直接遍历底层数组即可。如果采用链表来保存二叉树的节点，则有以下两种遍历方式。</p>
<ul>
<li>深度优先遍历：这种遍历算法将先访问到树中最深层次的节点</li>
<li>广度优先遍历：这种遍历算法将逐层访问每层的节点，先访问根（第一层）节点，然后访问第二层的节点…..一次类推。因此，广度优先遍历方法又被称为按层遍历。</li>
<li>先（前）序遍历二叉树</li>
<li>中序遍历二叉树</li>
<li>后序遍历二叉树</li>
</ul>
<p>如果L,D,W表示左子树、根、右子树，习惯上总是必须先遍历左子树，后遍历右子树，根据遍历根节点的顺序不同，上面三种算法可表示如下。</p>
<ul>
<li>DLR:先序遍历</li>
<li>LDR:中序遍历</li>
<li>LRD:后序遍历</li>
</ul>
<p>深度遍历的先序遥历、中序遍历、后序遍历这三种遍历方式的名称都是针对根节点(D)而言的。先处理根节点(D)时就称为先序遍历。其次处理根节点(D)时就称为中序遍历;最后处理根节点(D)时就称为后序遍历。</p>
<h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>先序遍历指先处理根节点，其处理顺序如下：<br>(1) 访问根节点<br>(2) 递归遍历左子树<br>(3) 递归遍历右子树</p>
<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历指其次处理根节点.其处理顺序如下。<br>(1) 递归遍历左子树<br>(2) 访问根节点<br>(3) 递归遍历右子树</p>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>后序遍历指最后处理根节点，其处理顺序如下。<br>(1) 递归遍历左子树<br>(2) 递归遍历右子树<br>(3) 访问根节点</p>
<h3 id="广度优先-按层-遍历"><a href="#广度优先-按层-遍历" class="headerlink" title="广度优先(按层)遍历"></a>广度优先(按层)遍历</h3><p>广度优先遍历又称为按层遍历，整个遍历算法是先遍历几叉树的第一层(根节点)，再遍历根节点的两个子’节点(第二层)……依此类推，逐层遍历二叉树的所有节点。</p>
<p>为了实现广度优先遍历，可以借助于具有FIFO特征的队列来实现。如下所示。</p>
<ul>
<li>建一个队列(先进先出)，把树的根节点压入队列。</li>
<li>从队列中弹出一个节点(第一个弹出的就是根节点)，然后把改节点的左，右节点压入队列，如果没有子节点，则说明已经达到叶子节点了。</li>
<li>用循环重复执行2步，知道队列为空。当队列为空时，说明所有的叶子节点(深度最深的层)都已经经过了队列，也就完成了遍历。</li>
</ul>
<h1 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h1><p>由于二叉树是一种更“确定”(它的每个节点最多只有两个子节点)的数据结构，因此不管是存储、增加、删除节点，还是遍历节点，程序都可以更简单、方便地实现口反之，由于树的每个节点具有个数不确定的节点，因此程序实现起来更复杂。</p>
<p>为了充分利用二义树的简单易用性，可以将普通树转换为二叉树，以二叉树的形式来保存柞通树，当程序需要树时，再将悦义树转换为普通树。</p>
<p>森林其实更简单，如果将一棵伶通树的根节点去掉，这棵树就变成了森林。或者可以转换一下思维，森林其实就是有多个根节点的树。</p>
<h3 id="森林，树和二叉树的转换"><a href="#森林，树和二叉树的转换" class="headerlink" title="森林，树和二叉树的转换"></a>森林，树和二叉树的转换</h3><p>有序树，森林和二叉树之间有一一映射的关系，可以进行互相转换。</p>
<p>多叉树向二叉树的方法如下：</p>
<ul>
<li>(1)加虚线：同一个父节点的相邻兄弟节点之间加虚线</li>
<li>(2)抹实线：每个节点只保留它与最左子节点的连线，与其他字节点的连线都被抹掉。</li>
<li>(3)虚改实:虚线改为实线</li>
</ul>
<p>如图就是多叉图向二叉树转换的结果<br><img src="http://upload-images.jianshu.io/upload_images/925576-c82309a11b8af4f9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="forest_tree.PNG"></p>
<p>图中的虚线就是新增的“父子”关系。这个转换结果来看，多叉树1转换为二叉树的方法的关键思想就是：所有子节点只保留子节点，其他子节点转为左子节点的右子节点链。</p>
<p>按照这个转换思路，森林也可转换为二叉树————只要把森林当成一颗根节点被删除的多叉树即可。下图示范了将森林转换为二叉树的结果。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-867484f4272a891d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="forest_to_tree.PNG"></p>
<p>反过来，二叉树也可恢复出对应的多叉树，森林，恢复方法如下：</p>
<p>-(1)加虚线：若某节点I是父节点的左子节点，则为该节点I的右孩子链的所有节点分别于节点I的父节点添加连线</p>
<ul>
<li>(2)抹线：把有虚线的节点于原父节点的连线抹去</li>
<li>(3)整理：虚改实并按层排列</li>
</ul>
<p>把二叉树转换为多叉树</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-3fe2cf3e3dac86d4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="two_tree_more_tree.PNG"></p>
<p>如果二叉树的根节点有右子节点————右子节点就代表根节点的兄弟节点，这种情况会转换得到森林。</p>
<p>把二叉树转换为森林</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-7567e4cdb591efc8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tree_to_forest.PNG"></p>
<h3 id="树的链表存储"><a href="#树的链表存储" class="headerlink" title="树的链表存储"></a>树的链表存储</h3><p>根据上面介绍的理论，二义树可以和多叉树之间进行自由转换，因此可以得到普通树的另外一种保存方式:以二义树的形式保存多叉树，实际需要的时候再将二叉树转换为普通树。<br>至于到底以哪种方式来保存二叉树，完全是自由的。通常会选择使用三叉链表存储方式来保存二叉树，这样得到的二叉树操作起来更方便，进行二叉树和多叉树之间转换时也更方便。</p>
<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p>哈夫曼树又被称为最优二叉树，是一种带权路径最短的二叉树。哈夫曼树是二叉树的一种应用，在信息检索中很常用.</p>
<h3 id="哈夫曼树的定义和基本概念"><a href="#哈夫曼树的定义和基本概念" class="headerlink" title="哈夫曼树的定义和基本概念"></a>哈夫曼树的定义和基本概念</h3><p>在介绍哈夫曼树之前先来介绍一些相关的概念。</p>
<ul>
<li>节点之间的路径长度：从一个节点到另一个节点之间的分支数量称为两个节点之间的路径长度</li>
<li>树的路径长度：从根节点到树中的每一个节点的路径长度之和。</li>
</ul>
<p>对于下图所示的而二叉树，该树的路径长度为17.即0+1+2+2+3+4+5==17.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a6d4fd9f200dc3cb.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hafuman.PNG"></p>
<ul>
<li>节点的带权路径长度:从该节点到根节点之间的路径长度与节点的权的乘积</li>
<li>树的带权路径长度：树中所有叶子节点的带权路径长度之和。带权路径如图：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-84e31fdc4ea625af.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="daiquan.PNG"></p>
<p>对于哈夫曼树，有一个很重要的定理:对于具有对n个叶子节点的哈夫曼树，一共需要2乘以n-1个节点。因为对于二叉树来说，有三种类型节点，即度数为2的节点、度数为1的节点和度数为0的叶子节点，而哈夫曼树的非叶子节点都是由两个节点合并产生的，所以不会出现度<br>数为1的节点。而生成的非叶子节点的个数为叶子节点个数-1因此n个叶子节点的哈夫曼树，一共需要Z乘以n-1个节点。</p>
<h3 id="创建哈夫曼树"><a href="#创建哈夫曼树" class="headerlink" title="创建哈夫曼树"></a>创建哈夫曼树</h3><p>创建哈夫曼树，可以按如下步骤进行：</p>
<ul>
<li>根据给定的。个权值{wl,w2,…,wn}构造n棵二叉树的集合F={T1,T2,…,Tn} }，F集合中每棵二叉树都只有一个根节点。</li>
<li>选取F集合中两棵根节点的权值最小的树作为左、右子树以构造一棵新的二叉树，且将新的二叉树的根节点的权值设为左、右子树上根节点的权值之和。</li>
<li>将新的二叉树加入到F集合中，并删除第2步中被选中的两棵树。</li>
<li>重复第2和3步，直到F集合中只剩下一棵树，这棵树就是哈夫曼树。</li>
</ul>
<p>下图显示了创建哈夫曼树的过程。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-10990d5f36284ddc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hafuman_tree.PNG"></p>
<h3 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3><p>根据哈夫曼树可以解决报文编码问题。假设需要对一个字符串如“a6cdabcaba”进行编码，将它转换为唯一的二进制码，但要求转换出来的二进制码的长度最小。</p>
<p>假设每个字符在字符串中出现的频率为W}其编码长度为L，编码字符有n个，则编码后二进制码的总长度为W1L1+W2L2+W3L3+…+WnLn，这正好符合哈夫曼树的处理原则。因此可采用哈夫曼树的原理构造二进制编码，并使电文总长最短。</p>
<p>对于“abcdabcaba”字符串，总共只有a,b,c,d,这四个字符，它们出现的次数是4,3,2,1次__这相当于它们的权值。于是，将a,b,c,d四个字符以出现的次数为权值构造哈夫曼树，得到如下图结构：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-134742dd24a606e3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hanfuman1.PNG"></p>
<p>从哈夫曼树根节点开始，对左子树分配代码“0”，对右子树分配代码“1”，一直到达叶子节点。然后.将从树根沿每条路径到达叶子节点的代码排列起来，便得到了每个叶子节点的哈夫曼编码。下图显示了对a, b, c, d四个字符编码得到的哈夫曼编码。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9b6f79a544b50bde.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hanfuma2.PNG"></p>
<h1 id="排序二叉树"><a href="#排序二叉树" class="headerlink" title="排序二叉树"></a>排序二叉树</h1><p>排序二叉树是一种特殊结构的二叉树，通过它可以非常方便地对树中的所有节点进行排序和检索</p>
<p>排序二叉树要么是一颗空二叉树，要么是具有下列性质的二叉树</p>
<ul>
<li>若它的左子树不空，则左子树上所有的节点的值均小于它的根节点的值</li>
<li>若它的右子树不空，则右子树上所有的节点均大于它的根节点的值</li>
<li>它的左右子树分别为排序二叉树。</li>
<li></li>
</ul>
<p>下图显示了一棵排序二叉树.<br>对于排序二叉树，若按中序遍历就可以得到由小到大的有序序列。中序遍历得:</p>
<p>{2,3,4,8,9,9,10,13,15,18)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-20518b7b7ccbda12.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sort_tree.PNG"></p>
<p>创建排序二义树的步骤，就是不断地向排序二义树添加节点的过程，几体如下。</p>
<ul>
<li>以根节点为当前节点开始搜索</li>
<li>拿新节点的值和当前节点开始搜索</li>
<li>如果新节点的值更大，则以当前的右子节点作为新的当前节点的右子节点作为新的当前节点;如果新节点的值更小，则以当前节点的右子节点作为新的当前节点。</li>
<li>重复第2和3两个步骤，直到搜索到合适的叶子节点。</li>
<li>将新节点添加为第4步找到的叶子节点的子节点，如果新节点更大，则添加为右子节点;否则,添加为左子节点。</li>
</ul>
<p>当程序从排序二叉树中删除一个节点之后，为了让它依然保持为排序哭叉树，必须对该排序二叉树进行维护。维护可分为如下几种情况。</p>
<ul>
<li>被删除节点是叶子节点，只需将它从其父节点中删除。</li>
<li>被删除转点p只有左子树或只有右子树，如果p是它的父节点的左子节点，则将p的左子树或右子树添加成p一节点的父节点的左子节点即可;如果p是它的父节点的右子节点，则将p的左子树或右子树添加成P节点的父节点的右子节点即可。简单来说，如果要侧除的节点只有一个子节点，即可用它的子节点来代替要侧除的节点。</li>
</ul>
<p>被删除的节点只有左子树的情况<br><img src="http://upload-images.jianshu.io/upload_images/925576-df985421a46eb239.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_only_left_tree.PNG"></p>
<p>被删除节点只有右子树的情况<br><img src="http://upload-images.jianshu.io/upload_images/925576-92e4d960a6ab71c9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_only_right_tree.PNG"></p>
<ul>
<li><p>若被删除节点p的左、右子树均非空，则有以下两种做法。</p>
</li>
<li><p>将pL设为P的父节点q的左或右子节点(取决于P是其节父点q的左、右子节点)，<br>将pR设为P节点的中序前趋节点s的右子节点(s是pL最右下的节点，也就是pL子树中最大的节点)。采用这种方式删除节点的示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-4e893fde50f8ed5f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_left_right.PNG"></p>
</li>
</ul>
<p>以P节点的中序前趋或后继替代P所指节点，然后从原排序二叉树中删除中序前趋或后继节点。简单来说，就是用大于p的最小节点或小于P的最大节点代替P节点点,采<br>用这种方式删除节点的示意图如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-549aea8dc514b5e3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_left_right_center.PNG"></p>
<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>排序二叉树虽然可以快速检索，但在最坏的情况下，如果插入的节点集本身就是有序的，要么是由小到大排列，要么是由大到小排列，那么最后得到的排序二义树将变成链表:所有节点只有左节点(如果插入节点集合本身是由大到小排列的)，或者所有节点只有右节点(如果<br>插入节点集合本身是由小到大排列的)。在这种情况下，排序二叉树就变成了普通链表，其检索效率就会很低。</p>
<p>为了改变排序二叉树存在的不足，对二叉树进行改进————红黑树，他将这种排序二叉树称为“对称二叉B树”。</p>
<p>红黑树是一个更高效的检索二叉树，因此常常用来实现关联数组。典型的，JDK提供的集合类TreeMap本身就是一颗红黑树的实现。<br>红黑树在原有的排序二叉树上增加如下几个要求：</p>
<ul>
<li>性质l:每个节点要么是红色，要么是黑色。</li>
<li>性质2:根节点永远是黑色的。</li>
<li>除质3:所有的叶子节点都是空节点(即null)，并且是黑色的。</li>
<li>性质4:每个红色节点的两个子节点都是黑色的。(从每个叶子到根的路径上不会有两个连续的红色节点。)</li>
<li>性质5:从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点。</li>
</ul>
<p>java实现的红黑树结构如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-dd44982397309363.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="red_black_tree.PNG"></p>
<ul>
<li><p>根据性质5，红黑树从根节点到每个叶子节点的路径都包含相同数量的黑色节点，因此从根节点到叶子节点的路径中包含的黑色节点数被称为树的“黑色高度(black-height)”.</p>
</li>
<li><p>性质4则保证了从根节点到叶子节点的最长路径的一长度不会超过任何其他路径的2倍。假如有一棵黑色高度为3的红黑树，从根节点到叶子节点的最短路径长度是2,该路径上全是黑色节点〔黑色节点-黑色节点-黑色节点)。最长路径也只可能为4,在每个黑色节点之间插入一个红色节点〔黑色节点-红色节点-黑色书点-红色节点-黑色节点)，性质4保证绝不可能插入更多的红色节点。由此可见，红黑树中最长的路径就是一条红黑交替的路径。</p>
</li>
</ul>
<p>由此可以得出结论：对于给定的黑色高度为N的红黑树，从根到叶子节点的最短路径长度为N-1，最长路径长度为2*(N-1).</p>
<p>红黑树通过上面这种限制来保证它大致是平衡的—因为红黑树的高度不会无限增高，这样能保证红黑树在最坏的情况下都是高效的，不会出现普通排序二叉树的情况。</p>
<p>由于红黑树只是一棵特殊的排序二叉树，因此对红黑树上的只读操作与普通排序二叉树上的只读操作完全相同，只是红黑树保持了大致平衡，因此检索性能更好.</p>
<p>但在红黑树上进行插入操作和删除操作会导致树不再符合红黑树的特征，因此插入操作和删除操作都需要进行一定的维护，以保证插入节点、删除节点后的树依然是红黑树。</p>
<h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>插入操作按如下步骤进行:</p>
<ul>
<li>以排序二叉树的方法插入新节点，并将它设为红色。</li>
<li>进行颜色调换和树旋转</li>
</ul>
<p>这种颜色调换和树旋转就比较复杂了，下面将分情况进行介绍。在介绍中，把新插入的节点定义为N节点，把N节点的父节点定义为P节点，把P节点的兄弟节点定义为U节点，把P节点的父节点定义为G节点。</p>
<ol>
<li>情形1：新节点N是树的根节点，没有父节点。</li>
</ol>
<p>在这种情形下，直接将它设置为黑色以满足性质2。</p>
<ol>
<li>情形2：新节点的父节点P是黑色的</li>
</ol>
<p>在这种情形下，新插入的节点是红色的，因此依然满足性质4。而且因为新节点N有两个黑色叶子节点，但是由于新节点N是红色的，通过它的每个子节点的路径依然保持相同的黑色节点数，因此依然满足性质5</p>
<p>3.情形3：父节点P和父节点的兄弟节点U都是红色的</p>
<p>在这种情形下，程序应该将P节点、U节点都设置为黑色，并将P节点的父节点设置为红色(用来保持性质5)。现在，新节点N有了一个黑色的父节点P。由于从P节点、U节点到根节点的任何路径都必须通过G节点，这些路径上的黑色节点数目没有改变(原来有叶子和G节点两个黑色节点，现在有叶子和P节点两个黑色节点)。</p>
<p>经过上面处理后，红色的G节点的父节点也有可能是红色的，这就违反了性质4，因此还需要对G节点递归地进行整个过程〔把G节点当成新插入的节点进行处理)。<br>下图显示了处理过程：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-4968393f10fa7ac6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="red_black_tree_1.PNG"></p>
<ol>
<li>情形4:父节点P是红色的，而其兄弟节点U是黑色的或缺少;且新节点N是父节点P的右子节点，而父节点P又是其父节点G的左子节点。</li>
</ol>
<p>在这种情形下，对新节点和其父节点进行一次左旋转。接着，按情形5处理以前的父节点P(也就是把P当成新插入的节点)。这将导致某些路径通过它们以前不通过的新节点N或父节点P其中之一，但是这两个节点都是红色的，因此不会影响性质5。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-8e20b07cb38b098b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="red_black_tree_2.PNG"></p>
<ol>
<li>情形5:父节点F是红色的，而其兄弟节点U是黑色的或缺少:且新节点N是其父节点的左子节点，而父节点F父是其父节点G的左子节点。</li>
</ol>
<p>在这种情形下，需要对节点G进行一次右旋转口在旋转产生的树中，以前的父节点P现在是新节点N和节点G的父节点。由于以前的节点G是黑色的(否则父节点P就不可能是红色的)，切换以前的父节点P和节点G的颜色，使之满足性质4。性质5也仍然保持满足，因为通过这三个节点中任何一个的所有路径以前都通过节点G,现在它们都通过以前的父节点P。在各自的情形下，这都是三个节点中唯一的黑色节点。<br><img src="http://upload-images.jianshu.io/upload_images/925576-40aa67e720780c2c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="red_black_tree_3.PNG"></p>
<h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>红黑树的删除操作比插入操作要稍微复杂一些，实际上也可按如下步骤进行：</p>
<ul>
<li>以排序二叉树的方法删除指定节点。</li>
<li>进行颜色调换和树旋转，使之满足红黑树特征。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      树是一种非常常用的数据结构，树与前面介绍的线性表，栈，队列等线性结构不同，树是一种非线性结构
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>疯狂java笔记之栈和队列</title>
    <link href="http://jack921.win/2017/09/01/%E7%96%AF%E7%8B%82java%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    <id>http://jack921.win/2017/09/01/疯狂java笔记之栈和队列/</id>
    <published>2017-08-31T16:41:46.000Z</published>
    <updated>2017-08-31T16:42:43.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈的英文单词是Stack,它代表一种特殊的线性表，这种线性表只能在固定一端（通常认为是线性表的尾端）进行插入，删除操作。</p>
<h3 id="栈的基本定义"><a href="#栈的基本定义" class="headerlink" title="栈的基本定义"></a>栈的基本定义</h3><p>栈是一种数据结构，它代表只能在某一端进行插入，删除操作的特殊线性表，通常就是在线性表的尾端进行插入，删除操作。</p>
<p>对于栈而言，允许进行插入，删除操作的一端被称为栈顶（top）,另一端咋被称为栈底（bottom）。</p>
<p>对于一个栈不包含任何元素，那么这个栈就被称为空栈。<br>从栈顶插入一个元素被称为进栈，将一个元素从栈顶删除被称为“弹出栈”，对应的英文说法为pop,如下图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c27e0aae2ae39653.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stack.PNG"></p>
<p>对于元素为a0,a1,a2,…,an-1的栈，假设栈中元素被a0,a1,a2,…,an-1的次序进栈，那么a0未栈底元素，an-1为栈顶元素。出栈时第一个弹出的元素应为栈顶元素，也就是an-1.也就是说，栈中元素的修改是按后进先出(LIFO)的原则进行的。</p>
<p>归纳起来，可以再对栈下一个定义：栈就是一种后进先出(LIFO)的线性表。</p>
<h3 id="栈的常用操作"><a href="#栈的常用操作" class="headerlink" title="栈的常用操作"></a>栈的常用操作</h3><p>栈是一种被限制过的线性表，通常不应该提供线性表中的如下方法：</p>
<ul>
<li>获取指定索引处的元素</li>
<li>按值查找数据元素的位置</li>
<li>向指定索引处插入数据元素</li>
<li>删除指定元素索引处的数据元素<br>从上面这个方法可以看出，栈不应该提供从中间任意位置<br>访问元素的方法。也就是说，栈只允许在栈顶插入，删除元素。<br>栈的常用操作如下：</li>
<li>初始化：通常是一个构造器，用于创建一个空栈</li>
<li>返回栈的长度：该方法用于返回栈中数据元素的个数</li>
<li>入栈：向栈的栈顶插入一个数据元素，栈的长度+1</li>
<li>出栈：从栈的栈顶删除一个数据元素，栈的长度-1，该方法通常饭后被删除的元素</li>
<li>访问栈顶元素：返回栈顶的数据元素，但不删除栈顶元素</li>
<li>判断栈是否为空：改方法判断栈是否为空，如果栈为空则返回true,否则返回false.</li>
<li>清空栈：将栈清空</li>
</ul>
<p>类似于线性表即采用顺序存储的方式来实现，也可以用链式结构来实现，也可使用链式结构来实现，栈同样即可采用顺序结构来存储栈内的元素，也可采用链式结构来存储栈内元素。</p>
<h3 id="栈的顺序存储结构及实现"><a href="#栈的顺序存储结构及实现" class="headerlink" title="栈的顺序存储结构及实现"></a>栈的顺序存储结构及实现</h3><p>顺序存储结构的栈简称为顺序栈，它利用一组地址连续的存储单元依次存放从栈底到栈顶的数据元素。栈底位置固定不变，它的栈顶可以直接通过顺序栈底层数组的数组元素arr[size-1]来访问。顺序栈的存储示意图如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-76ff60663c8006a7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="stack_sort.PNG"></p>
<p>顺序栈中数据元素的物理关系和逻辑关系是一致的，先进栈的元素位于栈底，栈底元素的存储位置相对也比较小。</p>
<h4 id="1-进栈"><a href="#1-进栈" class="headerlink" title="1.进栈"></a>1.进栈</h4><p>对于顺序栈的进栈操作而言，只需将新的数据元素存入栈内，然后让记录栈内元素个数的变量加1，程序即可再次通过arr[size-1]重新访问新的栈顶元素。进栈操作示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-0f3db7989bb989f5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="inti_stack.PNG"></p>
<p>由于顺序栈底层通常会采用数组来保存数据元素，因此可能出现的情况是：当程序试图让一个数据元素进栈时，底层数据已满，那么就必须扩充底层数组的长度来容纳新进栈的数据元素。</p>
<h4 id="1-出栈"><a href="#1-出栈" class="headerlink" title="1.出栈"></a>1.出栈</h4><p>对于顺序栈的出栈操作而言，需要将栈顶元素弹出栈，程序要做两件事。</p>
<ul>
<li>让记录栈内元素个数的变量减1.</li>
<li>释放数组对栈顶元素的引用。</li>
</ul>
<p>出栈操作示意图如下图:<br><img src="http://upload-images.jianshu.io/upload_images/925576-2c51bab9b963cdbf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="out_stack.PNG"></p>
<p>对于删除操作来说，只要让记录栈内元素个数的size减1，程序即可通过arr[size-1]访问到新的栈顶元素。但不要忘记释放原来栈顶的数组引用，否则会引起内存泄漏。</p>
<p>栈比普通线性表的功能更弱，栈时一种被限制过的线性表，只能从栈顶插入，删除数据元素。</p>
<h3 id="栈的链式存储结构及实现"><a href="#栈的链式存储结构及实现" class="headerlink" title="栈的链式存储结构及实现"></a>栈的链式存储结构及实现</h3><p>程序可以采用单链表来保存栈中所有元素，这种链式结构的栈也被称为栈链。对于栈链而言，栈顶元素不断地改变，程序只要使用一个top引用来记录当前的栈顶元素即可。top引用变量永远引用栈顶元素，再使用一个size变量记录当前栈中包含多少个元素即可。如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-5e7b7d441ee96051.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="linked_stack.PNG"></p>
<h4 id="1-进栈-1"><a href="#1-进栈-1" class="headerlink" title="1.进栈"></a>1.进栈</h4><p>对于栈链的进栈操作，程序只需要做如下两件事：<br>-让top引用指向新元素添加的元素，新元素的next引用指向原来的栈顶元素。</p>
<ul>
<li>让记录栈内元素个数的size变量加1.<br>进栈操作示意图如下：</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-8330e7b207ce7a2f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="into_linked_stack.PNG"></p>
<h4 id="2-出栈"><a href="#2-出栈" class="headerlink" title="2.出栈"></a>2.出栈</h4><p>对于链栈的出栈操作，需要将栈顶元素弹出栈，程序需要做两件事情：</p>
<ul>
<li>让top引用指向原栈顶元素的下一个元素，并释放原来的栈顶元素</li>
<li>让记录栈内元素个数的size变量减1.</li>
</ul>
<p>出栈操作示意图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-91458e48e570a9b3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="out_linked_stack.PNG"></p>
<p>对于顺序栈来说，程序开始就需要在底层为他开辟一块连续的内存（数组）,这个空间浪费其实很大.从空间利用率的角度说，链栈的空间利用率比顺序栈的空间利用率要高一些。</p>
<h3 id="java集合中的栈"><a href="#java集合中的栈" class="headerlink" title="java集合中的栈"></a>java集合中的栈</h3><p>Java集合实际上提供两种栈供开发者使用：</p>
<ul>
<li>java.util.Stack:它就是一个最普通的顺序栈，底层数据实现。这个Stick类是线程安全的，在多线程环境下也可以放心使用</li>
<li>java.util.LinkedList:LinkedList是一个双端链表：除此之外。LinkedList还可作为栈使用，查看该类api将会发现，他同样提供了push(),pop(),peek()等方法，这表明LinkedList其实还可以当成栈使用。LinkedList代表栈的链式实现，但它是线程不安全的，如果需要在多线程环境下使用，则应该使用Collections类的工具发将其“改造”成线程安全的类。</li>
</ul>
<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h3 id="队列的基本定义"><a href="#队列的基本定义" class="headerlink" title="队列的基本定义"></a>队列的基本定义</h3><p>队列是一种特殊的线性表，他只允许在表的前端(front)进行删除操作，只允许在表的后端（rear）进行插入操作，进行插入操作的端称为队尾，进行删除的端称为对头。</p>
<p>如果队列中不包含任何元素，该队列就被称为空队列。</p>
<p>对于一个队列来说，每个元素总是从队列的rear端进入队列，然后等待该与元素之前的所有元素出对之后，当前元素才能出对。因此，把队列简称为先进先出（FIFO）的线性表。如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-26b83f3ee1284071.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="queue.PNG"></p>
<h3 id="队列的常用操作"><a href="#队列的常用操作" class="headerlink" title="队列的常用操作"></a>队列的常用操作</h3><p>队列同时是一种被限制过的线性表，通常不应该提供线性表中的如下方法：</p>
<ul>
<li>获取指定索引处的元素</li>
<li>按值查找数据元素的位置</li>
<li>向指定索引处插入数据元素</li>
<li>删除指定索引处的数据元素<br>从上面这些方法可以看出，队列不应该提供从中间任意位置访问元素的方法，也就是说，队列只允许在队列的前端（front）删除元素，只允许在队列的后端（rear）插入元素。<br>队列的常用操作如下：</li>
<li>初始化:通常是一个构造器，用于创建一个空队列</li>
<li>返回队列的长度:该方法用十返回队列中数据元素的个数。</li>
<li>加入元索:向队列的rear端插入一个数据元素，队列的长度+1</li>
<li>删除元素:从队列的front端删除一个数据元素，队列的长度-1，该方法通常返回被删除的元素。</li>
<li>访问队列的前端元素:返回队列的front端的数据元素，但不删除该元素。</li>
<li>判断队列是否为空:该方法判断队列是否为空，如果队列为空则返回true否则返回false</li>
<li>清空队列：将队列清空</li>
</ul>
<p>类似于线性表既可采用顺序存储的方式来实现，也可采用链式结构来卖现，队列同样既可采用顺序结构来存储队列元素，也可采用链式结构来存储队列元素。</p>
<h3 id="队列的顺序存储结构及实现"><a href="#队列的顺序存储结构及实现" class="headerlink" title="队列的顺序存储结构及实现"></a>队列的顺序存储结构及实现</h3><p>系统采用一组地址连续的存储单元依次存放队列从rear端到front端的所有数据元素，程序只需(front和rear两个整型变量来记录队列front端的元素索引、rear端的元素索引。示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-a71c139f7e2501a3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="queue_sort.PNG"></p>
<p>顺序队列可能会造成假满的问题，程序有如下解决方：</p>
<ul>
<li>每次将元素移除队列时将队列中的所有元素向front端移动一位，这种方式front值永远为0，有元素插入队列时rear值+1，有元素移除队列时rear值-1,。但这种方式非常浪费时间，因为每次将元素从队列移除都需要进行“整体搬家”。</li>
<li>将数组存储区看成一个首尾相接的环形区域，当存放数组的最大地址之后，rear值再次变为0。采用这种技巧存储的队列称为循环队列。</li>
</ul>
<h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>为了重新利用循环顺序队列底层数组中已删除元素所占用的空间，消除可能出现的“假满”现象，可以将顺序队列改进为循环队列。</p>
<p>循环队列是首尾相连的队列：当front,rear变量值达到底层数组的capacity-1之后，再前进一位就自定变成0,。示意图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-668e70ff5c324f78.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="circulation.PNG"></p>
<p>不管队列是空还是满，都会出现一个情况：front==rear.如果底层数据中elementData[front]==null,则表明此时队列为空，否则表明该队列已满。</p>
<h3 id="队列的链式存储结构及实现"><a href="#队列的链式存储结构及实现" class="headerlink" title="队列的链式存储结构及实现"></a>队列的链式存储结构及实现</h3><p>使用链式结构保存线性表，也可以采用链式结构来存储队列的各元素，采用链式存储结构的队列也被称为链队列。</p>
<p>对于链队列而言，由于程序需要从rear端添加元素，然后从front端移除元素，因此考虑对链队列增加front,rear两个引用变量，使他们分别执行链队列的头，尾两个节点。链队列示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-ab5898a93da017e8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="queue_llinked.PNG"><br>由于链队列采用链式结构类保存队列中所有元素，该队列允许添加无限多个数据元素，因此链队列无队列满的问题。</p>
<h4 id="1-插入队列"><a href="#1-插入队列" class="headerlink" title="1.插入队列"></a>1.插入队列</h4><p>对于链队列而言，插入操作的实现非常简单，只要创建一个新节点，让原rear节点的next引用指向新的节点，再让rear引用指向该新节点即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-46e380c956f2ed9e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="queue_linked_insert.PNG"></p>
<h4 id="2-移除队列"><a href="#2-移除队列" class="headerlink" title="2.移除队列"></a>2.移除队列</h4><p>对于链队列而言，移除操作的实现也非常简单，只要让front引用指向原front所引用节点的下一个节点即可。当然，不要忘记释放原front节点的引用。示意图如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-1d1624ad979be640.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="queue_linked_delete.PNG"></p>
<h3 id="Java集合中的队列"><a href="#Java集合中的队列" class="headerlink" title="Java集合中的队列"></a>Java集合中的队列</h3><p>从JDK1.5开始,java的集合框架中提供了一个queue接口，该接口代表了一个队列，实现该接口的类可以当成队列使用。Queue里包含了6个方法，用于代表队列包含的3个标志性的方法，如下所示：</p>
<ul>
<li>插入：在队列的rear端插入元素</li>
<li>移除：在队列的front端删除元素</li>
<li>访问：访问队列的front端元素</li>
</ul>
<p>Java为上面的每个方法方法提供了两个版本：具有特殊返回值的版本和抛出异常的版本，这样就产生了6个方法。</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>抛出异常的版本</th>
<th>具有特殊返回值的版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入</td>
<td>add(e)</td>
<td>offer(e)</td>
</tr>
<tr>
<td>移除</td>
<td>remove()</td>
<td>poll()</td>
</tr>
<tr>
<td>访问</td>
<td>element()</td>
<td>peek()</td>
</tr>
</tbody>
</table>
<h1 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h1><p>双端队列代表一种特殊的队列，它可以在两端同时进行插入，删除操作，如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-b0712d11453db45f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="double_queue.PNG"></p>
<p>对于双端队列，由于它可以从两端分别进入插入，删除操作，如果程序将所有的插入，删除操作固定在一端进行，这个双端队列就变成前面介绍的栈，由此可见，Deque和Queue，Stack之间的关系如图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c0e8301c4e548f8f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="double_queue_relation.PNG"></p>
<p>双端队列（Deque）既可说是Queue的子接口，也可说Stack(JDK并未提供这个接口)的子接口。因此。Deque即可当成队列使用，也可当成栈使用。</p>
<p>由此可见，Deque其实就是Queue和Stack混合而成的一种特殊的线性表，完全可以参考起前面的Queue,Stack的实现类实现Deque。</p>
<p>JDK为Deque提供了ArrayDeque和LinkedList两个常见的实现类。其中，ArrayDeque代表顺序存储结构的双端队列，LinkedList则代表链式存储结构的双端队列。</p>
<p>LinkedList代表一种双向，链式存储结构的循环线性表，这里有提到LinkedList代表线程安全的，链式结构的双端队列，由此可见，LinkedList实在是一个功能非常强大的集合类。事实上，LinkedList几乎是Java集合框架中方法最多的类。<br><img src="http://upload-images.jianshu.io/upload_images/925576-9539da99ea52511b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LinkedList_relation.PNG"></p>
<p>虽然LinkedList工具类的功能非常强大，它既可当成线性表使用，也可当成栈使用，还可当成队列使用，但对大部分程序而言，使用ArrayList，ArrayDeque的性能比LinkedList更好。</p>
]]></content>
    
    <summary type="html">
    
      栈的英文单词是Stack,它代表一种特殊的线性表，这种线性表只能在固定一端（通常认为是线性表的尾端）进行插入，删除操作。
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>疯狂java笔记之线性表</title>
    <link href="http://jack921.win/2017/09/01/%E7%96%AF%E7%8B%82java%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <id>http://jack921.win/2017/09/01/疯狂java笔记之线性表/</id>
    <published>2017-08-31T16:40:23.000Z</published>
    <updated>2017-08-31T16:41:35.087Z</updated>
    
    <content type="html"><![CDATA[<p>从数据的逻辑结构来分，数据元素之间存在的关联关系被称为数据的逻辑结构。归纳起来，应用程序中的数据大致哟如下四种基本的逻辑结构。</p>
<ul>
<li>集合：数据元素之间只有“同属于一个集合”的关系</li>
<li>线性结构：数据元素之间存在一个对一个的关系</li>
<li>树形结构：数据元素之间存在一个对多个的关系</li>
<li>图状结构或网状结构：数据元素之间存在多个对多个关系<br>对于数据不同的逻辑结构，在底层通常有两种物理存储结构。</li>
<li>顺序存储结构</li>
<li>链式存储结构</li>
</ul>
<h1 id="线性表的定义及逻辑结构"><a href="#线性表的定义及逻辑结构" class="headerlink" title="线性表的定义及逻辑结构"></a>线性表的定义及逻辑结构</h1><p>线性表（LinearList）是由n(n&gt;=0)个数据元素(节点)a1,a2,a3,…,an组成的有限序列。</p>
<p>线性表中每个元素必须具有相同的结构(即拥有相同的数据项).线性表是线性结构中最常用而又最简单的一种数据结构。</p>
<p>线性表中每个数据元素其实可以包含若千个数据项，例如，使用ai来代表线性表中的第i个元素，其中ai元素可以包含若千个数据项。关干线性表还可以有如下定义。</p>
<ul>
<li>线性表中包含的数据元素个数n被称为表的长度，当线性表的长度为0是该表也被称为空表。</li>
<li>当n&gt;0时，表可以表示为(a1,a2,a3,…,an)</li>
</ul>
<p>对于一个非空，有限的线性表而言，它总具有如下特征。</p>
<ul>
<li>总存在唯一的“第一个”数据元素。</li>
<li>总存在唯一的“最后一个”数据元素。</li>
<li>除第一个数据元素外，集合中的每一个数据元素都只有一个前驱的数据元素。</li>
<li>除了最后一个数据元素外，集合中的每个数据元素都只有一个后继的数据元素。</li>
</ul>
<h3 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h3><p>如果需要实现一个线性表，程序首先需要确定该线性表的每个数据元素。接下来，应该为该线性表实现如下基本操作。</p>
<ul>
<li>初始化：通常是一个构造器，用于创建一个空的线性表</li>
<li>返回线性表的长度：该方法用于返回线性表中的数据元素</li>
<li>获取指定索引处的元素:根据索引返回线性表的数据元素</li>
<li>按值查找数据元素的位置：如果线性表中存在一个或多个与查找值相等的数据元素，那么该方法返回一个搜索到的值相等的数据元素的索引，否则返回-1.</li>
<li>直接插入数据元素：向线性表的头部插入一个数据元素，线性表长度+1；</li>
<li>向指定位置插入数据元素:向线性表的指定索引处插入一个数据元素，线性表长度+1.</li>
<li>直接删除数据元素：删除线性表头部的数据元素，线性表长度-1.</li>
<li>删除线性表中指定位置的数据元素：删除线性表中指定索引处的数据元素，线性表长度-1.</li>
<li>判断线性表是否为空：该方法判断线性表是否为空，如果线性表为空，则返回true,否则返回false</li>
<li>清空线性表：将线性表清空<h1 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h1>线性表的顺序存储结构是指用一组地址连续的存储单元依次存放线性表的元素。当程序采用顺序存储结构来实现线性表时，线性表中相邻元素的两个元素ai和ai+1对应的存储地址loc(ai)和loc(ai+1)也是相邻的。</li>
</ul>
<p>换句话说，顺序结构线性表中数据元素的物理关系和逻辑关系是一致的，线性表中数据元素的存储地址可按如下公式计算。</p>
<p>loc(ai)=loc(a0)+i*b(0&lt;i&lt;n) </p>
<p>上面公式中b代表每个数据元素的存储单元。从上面公式可以看出，程序获取线性表中每个元素的存储起始地址的时间相同，读取表中数据元素的时间也相同。而且顺序表中每个元素都可随机存取，因此顺序存储的线性表时一种随机存取的存储结构。</p>
<p>为了使用顺序结构实现线性表，程序通常会采用数组来保存线性表中的数据元素。</p>
<p>线性表的插入运算是指表的第i(0&lt;=i&lt;n)个位置插入一个新的数据元素x,是长度为n的线性表：</p>
<p>a0,…,ai-1,ai,…,an-1</p>
<p>变成长度为n+1的线性表：</p>
<p>a0,…,ai-1,x,ai,…,an-1<br>向顺序结构的线性表插入元素，如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-8bbd16422ea595bb.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="linear.PNG"></p>
<p>这里有一个要考虑的问题。由于顺序结构线性表底层采用数组来存储数据元素，因此插入数据元素是必须保证不会超出底层属猪的容量。如果线性表中元素的个数超出了底层数据的长度，那么就必须为该线性表扩充底层数据的长度。</p>
<p>线性表的删除运算是指将表的第i(0&lt;=i&lt;n)个位置的数据元素删除，使长度为n的线性表：</p>
<p>a0,…,ai-1,ai,ai+1,…,an-1</p>
<p>变成长度为n-1的线性表：</p>
<p>a0,…,ai-1,ai+1,…,an-1</p>
<p>从顺序结构的线性表中删除元素，如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-80ab6d562d19e61a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="linear2.PNG"></p>
<h1 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h1><p>链式存储结构的线性表（简称为链表）将采用一组地址任意的存储单元存放线性表中的数据元素。链式存储结构的线性表不会按线性的逻辑顺序来保存数据元素，他需要在每个数据元素里保存一个引用下一个数据元素的引用（或者叫指针）。</p>
<p>由于不是必须按顺序存储，链表在插入，删除数据元素时比顺序线性表块的多，当时查找一个节点或者访问特点节点编号的节点则比顺序线性表慢得多。</p>
<p>使用链表结构可以克服顺序线性表(基于数组)需要预先知道数据大小的缺点，链表结构可以充分利用计算机的内存空间，实现灵活的内存动态管理。但是链表结构失去了数组随机存取的优点，同时链表由于增加了节点的指针域，空间开销比较大。</p>
<p>对于链表存储结构的线性表而言，它的每个节点都必须包含数据元素本身和一个或两个用来引用上一个/下一个节点的引用。也就是说，有如下公式：</p>
<p>节点=数据元素+引用下一个节点的引用+引用上一个节点的引用</p>
<p>如下图是双向链表节点示意图，其中每个节点中的prev代表前一个节点的引用，只有双向链表的节点才存在prev引用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-4be39139792e678f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="enty.PNG"></p>
<p>链表是多个相互引用的节点的集合，这个链表总是从头节点开始，然后依次向后指向每个节点。</p>
<p>空链表就是头节点为null的链表</p>
<h3 id="单链表上的基本运算"><a href="#单链表上的基本运算" class="headerlink" title="单链表上的基本运算"></a>单链表上的基本运算</h3><p>单链表指定是每个节点保留一个引用，改引用指向当前节点的下一个节点，没有引用指向头节点，尾节点的next引用为null.单链表示意图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-f1e478a37050ea6c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="one_linked.PNG"></p>
<p>对于单链表，系统建立单链表的过程就是不断添加节点的过程。动态添加单链表有以下两种方式。</p>
<ul>
<li>头插法建表：该方法从一个空表开始，不断地创建新节点，将数据元素存入节点的data域中，然后不断地以新节点为头节点，让新节点指向原有的头节点</li>
<li>尾插法建表：该方法是将新节点插入到当前链表的表尾上，因此需要为链表定义一个引用变量来保存链表的最后一个节点。</li>
</ul>
<p>头插法建立链表虽然算法简单，但生成的链表中节点的次序和输入的顺序相反:若希望二者次序一致，则应该采用尾插法来建立链表。</p>
<p>对于单链表而言，常用的操作有：</p>
<ol>
<li>查找</li>
<li>插入</li>
<li>删除</li>
</ol>
<h4 id="1-查找操作"><a href="#1-查找操作" class="headerlink" title="1.查找操作"></a>1.查找操作</h4><p>单链表的查找操作可以分为以下两种：</p>
<ul>
<li><p>按序号查找第index个节点:从header节点依次向下在单链表中查找第index个节点口算法为，设header为头，current为当前节点(初始时current从heade，开始)，0为头节点序号，i为计数器，则可使current依次下移寻找节点，并使i同时递增记录节点序号，直到返回指定节点。</p>
</li>
<li><p>在链表中查找指定的element元素:查找是否有等于给定值element的节点。若有，则返回首次找到的其值为element的节点的索引;否则，返回-l。查找过程从开始节点出发，顺着链表逐个将节点的值和给定值element做比较。</p>
</li>
</ul>
<h4 id="2-插入操作"><a href="#2-插入操作" class="headerlink" title="2.插入操作"></a>2.插入操作</h4><p>插入操作时将值为element的新节点插入到链表的第index个节点的位置上。因此，首先找到索引的index-1的节点，然后生成一个数据域为element的新节点newNode，并令idnex-1处节点的next引用新节点，新节点的next引用原来index处的节点。</p>
<p>向i索引处插入节点的示意图。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-96d3cffe698e51f1.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="insert_linked.PNG"></p>
<h4 id="3-删除操作"><a href="#3-删除操作" class="headerlink" title="3.删除操作"></a>3.删除操作</h4><p>删除操作是将链表的第index个节点删去。因为在单链表中，第index个节点是有index-1处的节点引用的，因此删除index处节点将先获取index-1处节点，然后index-1处节点的next引用到原index+1处的节点，并释放index处节点即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-91dcfa90c9a34469.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_linked.PNG"></p>
<h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p>循环链表是一种首尾相接的链表。将单链表的尾节点next指针改为引用单链表header节点，这个单链表就成了循环链表。</p>
<p>循环链表具有一个显著特征：链表的任一个节点出发均可找到表中的其他所有节点，因此，循环链表可以被视为“无头无尾”,如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-aff754dfb418c87a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="recycler_linked.PNG"></p>
<p>循环链表中的第一个节点之前就是最后一个节点，反之亦然。循环链表的无边界使得它实现了很多方法时会更容易，在这样的链表上设计算法会比普通链表更加容易。</p>
<p>新加入的节点应该是在第一个节点之前（采用头插法插入），还是最后一个节点之后（采用尾插法插入），可以根据实际要求灵活处理，具体的实现区别不大。</p>
<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><p>如果为每个节点保留两个引用prev和next,让prev指向当前节点的上一个节点，让next指向当前节点的下一页节点，此时的链表既可以向后依次访问每个节点，也可以向前依次访问节点，这种形式的链表被称为双向链表。示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-120a0ab2df4de6e9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="double_linked.PNG"><br>双向链表是一种对称结构，它克服了单链表上指针单向性的缺点，其中每个节点既可以向前引用，也可以向后引用，这样可以更方便地插入、删除数据元素。</p>
<p>与单链表类似的是，如果将链表的header节点与tail节点链在一起就构成了双向循环链表。</p>
<h3 id="双向链表的查找"><a href="#双向链表的查找" class="headerlink" title="双向链表的查找"></a>双向链表的查找</h3><p>由于双向链表既可以从header节点开始依次向后搜索每个节点，也可以从tail节点开始依次向前搜索每个节点，因此当程序试图从双向链表中搜索指定索引处的节点时，既可以从该链表的header节点开始搜索，也可以从该链表的tail节点开始搜索。至于到底应该从header开<br>始搜索，还是应该从tail开始搜索，则取决于被搜索节点是更靠近header，还是更靠近tail.</p>
<p>一般来说，可以通过被搜索index的值来判断它更靠近header还是更靠近tail.如果index&lt;size/2，则可判断该位置更靠近header，应从header开始搜索;反之，则可判断该位置更靠近tail，那就应从tail开始搜索口</p>
<h3 id="双向链表的插入"><a href="#双向链表的插入" class="headerlink" title="双向链表的插入"></a>双向链表的插入</h3><p>双向链表的插入操作更复杂，向双向链表中插入一个新节点必须同时修改两个方向的指针（即引用）。如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/925576-68a3dfab7295f237.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="insert_double_linked.PNG"></p>
<h3 id="双向链表的删除"><a href="#双向链表的删除" class="headerlink" title="双向链表的删除"></a>双向链表的删除</h3><p>在双向链表中，删除一个节点需要同时修改两个方向的指针，双向链表中删除节点的操作，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/925576-707bee4a1f56b189.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="delete_double_linked.PNG"></p>
<h1 id="线性表的分析"><a href="#线性表的分析" class="headerlink" title="线性表的分析"></a>线性表的分析</h1><p>线性表的顺序的顺序和链式两种实现各有优势：如下</p>
<table>
<thead>
<tr>
<th>分析比较</th>
<th>顺序表</th>
<th>链表</th>
</tr>
</thead>
<tbody>
<tr>
<td>空间性能</td>
<td>顺序表的存储空间是有静态分布的，因此需要一个长度固定的数组，因此总有部分数组元素被浪费</td>
<td>链表的存储空间是动态分布的，因此空间不会被浪费。但由于链表需要额外的空间来为每个节点保存指针</td>
</tr>
<tr>
<td>时间性能</td>
<td>顺序表中元素的逻辑顺序与物理存储顺序保持一致，而且支持随机存取，因此顺序在查找，读取性能很好</td>
<td>链表采用链式结构来保存表内元素，因此在插入，删除元素时性能较好</td>
</tr>
</tbody>
</table>
<h3 id="线性表的功能"><a href="#线性表的功能" class="headerlink" title="线性表的功能"></a>线性表的功能</h3><p>线性的本质上是一个充当容器的工具类，当程序有一组结构相同的数据元素需要保存时，就可以考虑使用线性表来保存它们。</p>
<p>从某种程度来说，线性表是数组的加强，线性表比数据多了如下几个功能：</p>
<ul>
<li>线性表的长度可以动态改变，而java数组的长度是固定的<br>-线性表可以插入元素，而数组无法插入元素</li>
<li>线性表可以删除元素，而数组无法删除元素，数组只能将指定元素赋为null,但各种元素依然存在</li>
<li>线性表提供方法来搜索指定元素的位置，而数组一般不提供该方法</li>
<li>线性表提供方法来清空所有元素的位置，而数组一般不提供该方法</li>
</ul>
<p>从上面线性表的实现能发珑线性表比数组功能强大的理由是，顺序结构的线性表可以说是包装过的数组，自然会提供更多额外的方法来简化操作。</p>
<p>对于大部分,Java程序员来说，其实经常在使用线性表List. Java的List接口就代表了线性表，线性表的两种实现分别是ArrayList和LinkedList其中LinkedList还是一个双向链表。JDK提供的线性表有如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-5d9cb3db4508aa0c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="listtype.PNG"></p>
]]></content>
    
    <summary type="html">
    
      从数据的逻辑结构来分，数据元素之间存在的关联关系被称为数据的逻辑结构。归纳起来，应用程序中的数据大致哟如下四种基本的逻辑结构。
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>疯狂Java笔记之面向对象的陷阱</title>
    <link href="http://jack921.win/2017/09/01/%E7%96%AF%E7%8B%82Java%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>http://jack921.win/2017/09/01/疯狂Java笔记之面向对象的陷阱/</id>
    <published>2017-08-31T16:38:52.000Z</published>
    <updated>2017-08-31T16:40:09.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="instanceof运算符的陷阱"><a href="#instanceof运算符的陷阱" class="headerlink" title="instanceof运算符的陷阱"></a>instanceof运算符的陷阱</h1><p>instanceof是一个非常简单的运算符。instanceof运算符的前一个操作数通常是一个引用类型的变量，后一个操作数通常是一个类(也可以是接口，可以把接口理解成一个特殊的类)，他用于判断前面的对象是否是后面的类或其子类，实现类的实例。如果是，则返回true,否则，返回false.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String obj=&quot;Java&quot;;</div><div class="line">obj instanceof Math</div></pre></td></tr></table></figure>
<p>上面程序是无法编译通过的，根据Java语言规范，使用instanceof运算符有一个限制：instanceof运算符前面操作数的编译时类型必须是如下三种情况。</p>
<ul>
<li>要么与后面的类相同</li>
<li>要么与后面类的父类</li>
<li>要么是后面类的子类</li>
</ul>
<p>如果前面操作数的编译时类型与后面的类型没有任何关系，程序将没法用过编译。因此，当使用instanceof运算符的时候，应尽量从编译，运行两个阶段来考虑它————如果instanceof运算符使用不当，程序编译时就会抛出异常；当使用instanceof运算符用过编译后，才能考虑它的运算结果是true,还是false.</p>
<p>在极端情况下，instanceof前一个操作数所引用对象的实际类型就是后面的类型，但只要它的编译时类型既不是第二个操作数的类型， 也不是第二个操作数的父类，子类程序就没法通过编译。如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Object str=&quot;java&quot;;</div><div class="line">Math math=(Math)str;</div><div class="line">System.out.println(&quot;字符串是否是String的实例：&quot;+(math instanceof String));()</div></pre></td></tr></table></figure>
<p>当编译器编译java程序时，编译器无法检查引用变量实际引用对象的类型，他只检查该变量的编译时类型。最后一句代码math的编译时类型是Math,Math既不是String类型，也不是String类型的父类，还不是String类型的子类，因此程序没法通过编译。至于math实际引用对象的类型是什么，编译器也不关心，编译阶段也没法关心。</p>
<p>至于第二行代码为何没有出现编译错误，这和强制转型机制有关。对于Java的强制转型而言，也可以分为编译，运行两个阶段来分析它。</p>
<ul>
<li>在编译阶段，强制转型要求被转型变量的编译时类型必须是如下三种情况之一.</li>
</ul>
<ol>
<li>被转型变量的编译时类型与目标类型相同。</li>
<li>被转型变量的编译时类型是目标类型父类。</li>
<li>被转型变量的编译时类型是目标类型子类。在这个情况下可以自动向上转型，无须强制转换。<br>如果被转型变量的编译时类型与目标类型没有任何继承关系，编译器将提示编译错误。通过上面分析可以看出，强制转型的编译阶段只关心引用变量的编译时类型，至于该引用变量实际引用对象的类型，编译器并不关心，也没法关心。</li>
</ol>
<ul>
<li>在运行阶段，被转型变量所引用对象的实际类型必须是目标类型的实例，或者是目标类型的子类、实现类的实例，否则在运行时将引发ClassCastExceptivn异常。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String s=null;</div><div class="line">System.out.println(s instanceof String);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>使null调用instanceof运算符时返回false是非常有用的行为，因为instanceof运算符有了一个额外的功能:它可以保证第一个操作数所引用的对象不是null如果instanceof告知一个引用变量是某个特定类型的实例，那么就可以将其转型为该类型，并调用该类型的方法，而不用担心会抛出ClassGastExeception或NullPointerException异常。</p>
<h1 id="构造器的陷阱"><a href="#构造器的陷阱" class="headerlink" title="构造器的陷阱"></a>构造器的陷阱</h1><h3 id="构造器创建对象吗"><a href="#构造器创建对象吗" class="headerlink" title="构造器创建对象吗"></a>构造器创建对象吗</h3><p>实际上构造器井不会创建Java对象，构造器只是负责执行初始化，在构造器执行之前，Java对象所需要的内存空间，应该说是由new关键字中请出来的。</p>
<p>绝大部分时候，程序使用new关键字为一个Java对象申请空间之后，都需要使用构造器为这个对象执行初始化。但在某些时候，程序创建Java对象无须调用构造器，以下面两种方式创建的Java对象无须使用构造器。</p>
<ul>
<li>使用反序列化的方法恢复java对象。</li>
<li>使用clone方法复制java对象。<h3 id="无限递归的构造器"><a href="#无限递归的构造器" class="headerlink" title="无限递归的构造器"></a>无限递归的构造器</h3></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    Main main;</div><div class="line">    &#123;</div><div class="line">        main=new Main();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Main()&#123;</div><div class="line">        System.out.println(&quot;执行构造器&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Main main=new Main();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不管是定义实例变量是指定的初始值，还是在非静态初始化块中执行的初始化操作，最终都将被提取到构造器中执行。所以以上代码到时了构造器递归。</p>
<p>这个程序给出的教训是，无论如何不要导致构造器产生递归调用。也就是说，应该:</p>
<ul>
<li>尽量不要在定义实例变量时指定实例变量的值为当前类的实例。</li>
<li>尽量不要在初始化块中创建当前类的实例口</li>
<li>尽量不要在构造器内调用本构造器创建Java对象。</li>
</ul>
<h3 id="持有当前类的实例"><a href="#持有当前类的实例" class="headerlink" title="持有当前类的实例"></a>持有当前类的实例</h3><p>对于一个java类而言，他的一个实例持有当前类的另一个实例是被允许的，只要程序初始化它持有当前类的实例时不会引起构造器递归就行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">   private String name;</div><div class="line">   private Main instance;</div><div class="line">   public Main()&#123;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">   public Main(String name)&#123;</div><div class="line">       instance=new Main();</div><div class="line">       instance.name=name;</div><div class="line">   &#125;</div><div class="line">   public static void main(String[] args)&#123;</div><div class="line">       Main main=new Main();</div><div class="line">       Main main2=new Main(&quot;测试&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="到底调用哪个重载的方法"><a href="#到底调用哪个重载的方法" class="headerlink" title="到底调用哪个重载的方法"></a>到底调用哪个重载的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    public void info(Object obj,double count)&#123;</div><div class="line">        System.out.println(&quot;obj:&quot;+obj);</div><div class="line">        System.out.println(&quot;count:&quot;+count);</div><div class="line">    &#125;</div><div class="line">    public void info(Object[] objs,double count)&#123;</div><div class="line">        System.out.println(&quot;objs:&quot;+objs);</div><div class="line">        System.out.println(&quot;count:&quot;+count);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Main main=new Main();</div><div class="line">        main.info(null,5);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码方法的调用看似info(Object[],int)和info(Obejct,int)都是可以匹配的，那到底调用哪个呢。</p>
<p>根据精确匹配原则，当实际调用是传入的实参满足多个方法时，如果某个方法的形参要求参数范围越小，那么这个方法就越精确。很明显，Object[]可以看成Object的子类，info(Object[] ,int)方法匹配的更精确，执行上面程序，将看到如下输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">objs:null</div><div class="line">count:5.0</div></pre></td></tr></table></figure>
<p>再看一个极端的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    public void info(Object obj,int count)&#123;</div><div class="line">        System.out.println(&quot;obj:&quot;+obj);</div><div class="line">        System.out.println(&quot;count:&quot;+count);</div><div class="line">    &#125;</div><div class="line">    public void info(Object[] objs,double count)&#123;</div><div class="line">        System.out.println(&quot;objs:&quot;+objs);</div><div class="line">        System.out.println(&quot;count:&quot;+count);</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Main main=new Main();</div><div class="line">        main.info(null,5);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用方法时第一个参数调info(Object[] objs,double count)比较好，而第二个参数调info(Obejct obj,int count)比较好，而两个参数中和就不知道了。所以系统报错。</p>
<h3 id="方法重写的陷阱"><a href="#方法重写的陷阱" class="headerlink" title="方法重写的陷阱"></a>方法重写的陷阱</h3><p>对于使用private修饰符修饰的方法，只能在当前类中访问该方法，子类无法访问父类中定义的private方法。既然子类无法访问父类的private。方法，当然也就无法重写该方法。</p>
<p>如果子类中定义了一个与父类的private方法具有相同的方法名、相同的形参列表、相同的返回值类型的方法，依然不是重写，只是了类中重新定义了一个新方法。</p>
<h3 id="重写其他访问权限的方法"><a href="#重写其他访问权限的方法" class="headerlink" title="重写其他访问权限的方法"></a>重写其他访问权限的方法</h3><p>如果父类中定义了使用默认访问控制符（也就是不使用访问控制符）修饰方法，这个方法同样可能无法被重写。</p>
<p>对于不使用访问控制符修饰的方法，它只能被与当前类处于同一个包中的其他类访问，其他包中的子类依然无法访问该方法。只有与当前类处于同一个包中的其他类才能访问该方法。</p>
<h1 id="非静态内部类的陷阱"><a href="#非静态内部类的陷阱" class="headerlink" title="非静态内部类的陷阱"></a>非静态内部类的陷阱</h1><h3 id="非静态内部类的构造器"><a href="#非静态内部类的构造器" class="headerlink" title="非静态内部类的构造器"></a>非静态内部类的构造器</h3><p>非静态内部类必须寄生在外部类实例中，没有外部类的对象，就不可能产生非静态内部类的对象。因此，非静态内部类不可能有无参数的构造器————即是系统为非静态内部类提供一个默认的构造器，这个默认的构造器也需要一个外部类形参。</p>
<p>系统在编译阶段总会为非静态内部类的构造器增加一个参数，非静态内部类的构造器的第一个形参总是外部类。因此调用非静态内部类的构造器时必须传入一个外部类对象作为参数，否则程序将会引发运行时异常。</p>
<h3 id="非静态内部类不能拥有静态成员"><a href="#非静态内部类不能拥有静态成员" class="headerlink" title="非静态内部类不能拥有静态成员"></a>非静态内部类不能拥有静态成员</h3><p>对于非静态内部类而言，由于它本身就是一个非静态的上下文环境，因此非静态内部类不允许拥有静态成员。</p>
<h3 id="非静态内部类的子类"><a href="#非静态内部类的子类" class="headerlink" title="非静态内部类的子类"></a>非静态内部类的子类</h3><p>由于非静态内部类没有无参数的构造器，因此通过非静态内部类派生子类时也可能存在一些陷阱。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Base&#123;</div><div class="line">  class In&#123;</div><div class="line">      public void test()&#123;</div><div class="line">          System.out.println(&quot;In的Test方法&quot;);</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  class A extends In&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">public class sub extends Base.In&#123;</div><div class="line">    public sub()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(&quot;Hello World&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于非静态内部类In必须寄生在Base对象之内，因此父类Base.In根本没有参数的构造器。而程序定义其子类Base.In时，没有定义构造器，那么系统会为它提供一个无参数的构造器。在sub无参数的构造器内，编译器会增加代码super()————子类总会调用父类的构造器。对于这个super()调用，指定调用父类Base.In无参数的构造器，必然导致编译错误.为了解决这个问题，应该为sub显示定义一个构造器，在该构造器中显示调用Base.In父类对应的构造器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class sub extends Base.In&#123;</div><div class="line">    public sub()&#123;</div><div class="line">        new Base().super();</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(&quot;Hello World&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上显式的调用父类的构造器。使用new Base()作为主调————即以一个Base对象作为主调，其实这个主调会作为参数擦传入super(),也就是传给In类带一个Base参数的构造器。 </p>
<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1><h3 id="静态方法属于类"><a href="#静态方法属于类" class="headerlink" title="静态方法属于类"></a>静态方法属于类</h3><p>被static关键字修饰的成员(Field,方法,内部类,初始化块,内部枚举类)属于类本身，而不是当个的java对象，具体到静态方法也是如此，静态方法属于类。而不属于Java对象。</p>
<h3 id="静态内部类的限制"><a href="#静态内部类的限制" class="headerlink" title="静态内部类的限制"></a>静态内部类的限制</h3><p>当程序使用内部类时,应尽量考虑使用静态内部类，而不是非静态内部类。当程序使用静态内部类时，外部类相当于静态内部类的一个包，因此使用起来比较方便；但另一方面，这也给静态内部类增加了一个限制———静态内部类不能访问外部类的非静态成员。</p>
]]></content>
    
    <summary type="html">
    
      instanceof是一个非常简单的运算符。instanceof运算符的前一个操作数通常是一个引用类型的变量，后一个操作数通常是一个类(也可以是接口，可以把接口理解成一个特殊的类)，他用于判断前面的对象是否是后面的类或其子类，实现类的实例。如果是，则返回true,否则，返回false.
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>疯狂Java笔记之常见java集合的实现细节</title>
    <link href="http://jack921.win/2017/08/21/%E7%96%AF%E7%8B%82Java%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%B8%B8%E8%A7%81java%E9%9B%86%E5%90%88%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%BB%86%E8%8A%82/"/>
    <id>http://jack921.win/2017/08/21/疯狂Java笔记之常见java集合的实现细节/</id>
    <published>2017-08-20T17:12:17.000Z</published>
    <updated>2017-08-20T17:13:14.177Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h1><h3 id="1-Set和Map的关系"><a href="#1-Set和Map的关系" class="headerlink" title="1.Set和Map的关系"></a>1.Set和Map的关系</h3><p>首先Set是一种集合元素无序，不可重复的集合。而Map则代表一种有多个key-value对组成的集合，Map集合类似于传统的关联数据。看起来他们没哟什么关联，实际上Set和Map是有莫大的关联的。可以说Map是Set集合的扩展。</p>
<p>当我们只看Map的Key时，会发现所有的key不能重复，key之间没有顺序。也就是说将Map所有的key集合起来就组成了一个set集合。Map也提供了如下方法来返回组成的set集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;K&gt; keySet()</div></pre></td></tr></table></figure></p>
<p>对于一个Map集合而言，它本质上是一个关联数组，关联数组中的key-value对之间有严格的对应关系，那将key-value对捆绑在一起对待，如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-8c1f2ff1204b3436.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java4.PNG"></p>
<h3 id="2-HashMap和HashSet"><a href="#2-HashMap和HashSet" class="headerlink" title="2.HashMap和HashSet"></a>2.HashMap和HashSet</h3><p>在HashSet里，系统采用Hash算法决定集合元素的存储位置，这样可以保证快速存，取集合元素；对于HashMap而言，系统将value当初key的‘附属物’，系统根据Hash算法开决定key的存储位置，这个可以保证快速存，取集合key,而value总是紧随key存储。</p>
<p>集合号称存储的是Java对象，但实际上并不会真正将Java对象放入Set集合中，而只是在Set集合中保留这些对象的引用而己。也就是说，Java集合实际上是多个引用变量所组成的集合，这些引用变量指向实际的Java对象。对于java集合他只是多个引用变量的集合。</p>
<p>当程序试图将一个key-value对放入HashMap中时，首先根据该key的hashCade()返回值决定该Entry的存储位置—如果两个Entry的key的hashCade返回值相同，那么它们的存储位置相同:如果这两个Entry的key通过equals比较返回true，则新添加Entry的value将覆盖集合中原有Entry的value，但key不会覆盖;如果这两个Entry的key通过equal比较返回false ,则新添加的Entry将与集合中原有的Entry形成Entry链，而且新添加的Entry位于Entry链的头部</p>
<p>当系统开始初始化HashMap时，系统会创建一个长度为capacity的Entry数组。这个数组可以存储元素的位置被称为“桶(bucket)”,每个bucket都有其指定的索引，系统可以根据其索引快速访问该bucket里存储的元素。</p>
<p>无论何时，HashMap的每一个“桶”只存储一个元素(即一个Entry).由于Entry对象可以包含一个引用变量（就是Entry构造器的最后一个参数）用于指向下一个Entry，因此可能出现：HashMap的bucket中只有一个Entry,但这个Entry指向另一个Entry这就形成一个Entry链，如图:<br><img src="http://upload-images.jianshu.io/upload_images/925576-0d509a47fc604546.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="set.PNG"></p>
<p>HashMap在每一个bucket里只有一个Entry,所以可以根据索引快速取出该bucket里的Enrty.当发生hash冲突时，单个bucket里存储的不是一个Entry,而是一个Entry链，系统会按顺序遍历每个Entry,知道找到想搜到的Entry为止，即使要搜索的末端，系统也会循环到最后找到该元素。</p>
<h3 id="3-TreeMap和TreeSet"><a href="#3-TreeMap和TreeSet" class="headerlink" title="3.TreeMap和TreeSet"></a>3.TreeMap和TreeSet</h3><p>TreeSet底层实际使用的容器就是TrenMap.绝大部分的方法都是直接调用TreeMap的方法来实现的。而对于TreeMap而言，它采用一种被称为‘红黑树’的排序二叉树来保存Map中的每个Entry即每个Entry都是红黑树的一个节点。</p>
<p>对于TreeMap向言，由于它底层采用一棵红黑树来保存集合中的Entry，这意味着TreeMap添加元素、取出元素的性能都比HashMap低。当TreeMag添加元素时，需要通过循坏找到新<br>增Entry的插入位置，因此比较耗性能;当从TreeMap中取出元素时，需要通过循环才能找到合适的Entry，也比较耗性能·但TreeMap, TreeSet相比HashMag,HashSet的优势在于:’TreeMap中的所有Entry总是按key根据指定的排序规则保持有序状态，TreeSet中的所有元素总是根据指定的排序规则保持有序状态。</p>
<h1 id="Map和List"><a href="#Map和List" class="headerlink" title="Map和List"></a>Map和List</h1><h3 id="1-Map的values-方法"><a href="#1-Map的values-方法" class="headerlink" title="1.Map的values()方法"></a>1.Map的values()方法</h3><p>不管是HashIvlap，还是TreeMap，它们的values()方法都可返回其所有value组成的Collection集合。按照通常理解，这个Collection集合应该是一个List集合，因为Map的多个valu。允许重复。<br>但实际上，HashMap,TreeMap的values()方法的实现要更巧妙。这两个Mad对象的values()方法返回的是一个不存储元素的Collection集合，当程序遍历Collection集合时，实际上就是遍历Map对象的value </p>
<p>HashMap和TreeMap的values()方法并未把Map中的value重新组合成一个包含元素的集合对象，这样就可以降低系统内存开销。</p>
<h3 id="2-Map和List的关系"><a href="#2-Map和List的关系" class="headerlink" title="2.Map和List的关系"></a>2.Map和List的关系</h3><ul>
<li>从底层实现来看，Set和Map很相似；从用法的角度来看，Map和List也有很大的相似之处。</li>
</ul>
<p>1.Map接口提供了get(K key)方法，允许Map对象根据key来取得value.<br>2.List接口提供了get(int index)方法，允许list对象根据元素索引来取得value</p>
<p>Map和List在底层实现上没有太大的相似之处，只是用法有一些相似之处。</p>
<h1 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h1><h3 id="1-Vector和ArrayList的区别"><a href="#1-Vector和ArrayList的区别" class="headerlink" title="1.Vector和ArrayList的区别"></a>1.Vector和ArrayList的区别</h3><p>Vector和ArrayList这个两个集合类的本质并没有太大的不同，它们都实现了List接口，而且底层都是基于Java数组来存储集合元素的。</p>
<p>此外从序列化机制的角度看，ArrayList的实现比Vector的实现更安全<br>另外Vector是ArrayList的线程安全版本，ArrayList和Vector觉大部分方法的实现都是相同的，只是Vector的方法增加了synchronized修饰。</p>
<h3 id="2-ArrayList和LinkedList的实现差异"><a href="#2-ArrayList和LinkedList的实现差异" class="headerlink" title="2.ArrayList和LinkedList的实现差异"></a>2.ArrayList和LinkedList的实现差异</h3><p>List代表一种线性表的数据结构。ArrayList则是一种顺序存储的线性表，ArrayList底层采用数组来保存每个集合元素，LinkedList则是一种链式存储的线性表，其本质上就是一个双向链表，但它不仅实现了List接口，还实现了Deque接口。也就是说，LinkedList既可以当成双向链表使用，也可以当成队列使用，还可以当成栈来使用(Deque代表双端队列，既具有队列的特征.也具有栈的特征)。</p>
<p>ArrayList<br>因为ArrayList底层数据结构是数组，所以我们插入元素是需要完成两件事:</p>
<ul>
<li>保证ArrayList底层封装的数组长度大于集合数据长度</li>
<li>插入之前将所有元素“整体搬家”，向后移动一格</li>
</ul>
<p>同理在删除元素是也要对元素进行“整体搬家”，这就导致增加和删除的性能非常差，当时在取出数据元素时，性能基本和数组是一样的。</p>
<p>LinkedList<br>因为LinkedSet是采用双向链表的，如果单纯的添加某个节点性能是很好的，当时如果需要指定索引处添加节点，LinkedList必须必须先找到索引处的节点，这个搜索过程系统开销也是不少的，删除也同理，如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/925576-edfa91daf0e77368.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LinkedList.PNG"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c96ca8a6fb7db1ac.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="LinkedList2.PNG"></p>
<p>不过弊端是对于ArrayList而言，由于它底层采用数组来保存集合元素，因此可以直接根据数组索引取出index位置的元素;但对于LinkedList就比较麻烦，LinkedList必须逐个元素地搜索，直到找到第index个元素为止。所以性能相对较低。</p>
<h3 id="3-ArrayList和LinkedList的性能分析和适用场景"><a href="#3-ArrayList和LinkedList的性能分析和适用场景" class="headerlink" title="3.ArrayList和LinkedList的性能分析和适用场景"></a>3.ArrayList和LinkedList的性能分析和适用场景</h3><p>当程序需要以get(int index)获取List集合指定的索引出的元素，ArrayList性能大大的优于LinkedList。因为ArrayList底层以数组来保存集合元素，所以调用get(int index)方法获取指定索引处的元素时，底层实际调用elementData[index]来返回改元素，因此性能非常好，而LinkedList则必须逐个的搜索。</p>
<p>当程序调用add(int index,Object obj)向List添加数据是，ArrayList需要“整体搬家”才能实现添加，而LinkedList需要找到索引而不用整体搬家，当时找索引也需要消耗一些系统性能，因为他是逐个搜索。同理，删除也是这样子。</p>
<p>当添加的数据个数大于底层数组的长度时，那么ArrayList必须创建一个长度为原来长度1.5倍的数组，再由垃圾回收机制进行回收。这样系统开销也有点大了。而LinkedList就不存在这个问题。</p>
<p>不过从大多数应用场景来说ArrayList总体性能还是优于LinkedList。</p>
<h1 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h1><h3 id="1-Iterator实现类与迭代器模式"><a href="#1-Iterator实现类与迭代器模式" class="headerlink" title="1.Iterator实现类与迭代器模式"></a>1.Iterator实现类与迭代器模式</h3><p>Java的lteratar和Enumeration两个接口都是迭代器模式的代表之作，它们就是迭代器模式里的“迭代器接口”。所谓迭代器模式指的是，系统为遍历多种数据列表、集合，容器提供一个标准的“迭代器接口”，这些数据列表、集合、容器就可面向相同的“迭代器接口”编程，通过相同的迭代器接口访问不同数据列表‘集合、容器里的数据.不同的数据列表、集合、容器如何实现这个“迭代器接口”，<br>则交给各数据列表、集合、容器自己完成。</p>
<h3 id="2-迭代是删除指定元素"><a href="#2-迭代是删除指定元素" class="headerlink" title="2.迭代是删除指定元素"></a>2.迭代是删除指定元素</h3><p>对于TreeSet,  HashSet等Set集合而言，当使用Iterator遍历它们时，如果正在遍历最后一个集合元素，那么使用Set集合的remove()方法删除集合的任意元素并不会引发ConcurrentModificatianException异常，当正在遍历其他元素时删除集合的任意元素都将引发该异常。</p>
]]></content>
    
    <summary type="html">
    
      首先Set是一种集合元素无序，不可重复的集合。而Map则代表一种有多个key-value对组成的集合，Map集合类似于传统的关联数据。看起来他们没哟什么关联，实际上Set和Map是有莫大的关联的。可以说Map是Set集合的扩展。
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>疯狂Java笔记之表达式中的陷阱</title>
    <link href="http://jack921.win/2017/08/21/%E7%96%AF%E7%8B%82Java%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%E9%99%B7%E9%98%B1/"/>
    <id>http://jack921.win/2017/08/21/疯狂Java笔记之表达式中的陷阱/</id>
    <published>2017-08-20T17:08:28.000Z</published>
    <updated>2017-08-20T17:09:58.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于字符串的陷阱"><a href="#关于字符串的陷阱" class="headerlink" title="关于字符串的陷阱"></a>关于字符串的陷阱</h1><h3 id="JVM对字符串的处理"><a href="#JVM对字符串的处理" class="headerlink" title="JVM对字符串的处理"></a>JVM对字符串的处理</h3><p>首先看如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String java=new String(&quot;HelloJack&quot;);</div></pre></td></tr></table></figure>
<p>上面创建了两个字符串对象，其中一个是“HelloJack”这个直接量对应的字符串对象，另一个是由new String()构造器返回的字符串对象。</p>
<p>对于Java程序中的字符串直接量，JVM会使用一个字符串池来保存它们：当第一次使用某个字符串直接量是，JVM会将它放入字符串池进行缓存。在一般情况下，字符串池的字符串对象不会被垃圾回收，当程序再次需要使用该字符串时，无需重新创建一个新的字符串，而是直接让引用变量指向字符串池中已有的字符串。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1=&quot;Hello Java&quot;;</div><div class="line">String str2=&quot;Hello Java&quot;;</div><div class="line">System.out.println(str1==str2);</div></pre></td></tr></table></figure>
<p>因为str1和str2都是直接量，都指向JVM字符串池里的“Hello Java”字符串，所以为true;</p>
<p>除了直接创建之外，也可以通过字符串连接表达式创建字符串对象，因此可以将一个字符串连接表达式赋给字符串变量。如果这这个字符串连接表达式的值可以在编译时确定下来，那么JVM会在编译时计算该字符串变量的值，并让它指向字符串池中对应的字符串。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String str1=&quot;HelloJava&quot;;</div><div class="line">String str2=&quot;Hello&quot;+&quot;Java&quot;;</div><div class="line">System.out.println(str1==str2);</div></pre></td></tr></table></figure>
<p>最终结果返回就是true.需要注意的是上面都是直接量，而没有变量，没有方法的调用。因此，JVM可以在比编译时就确定该字符串连接表达式的值，可以让该字符串变量指向字符串池中对应的字符串。但如果程序使用了变量，或者调用的方法，那么只能等到运行时才能确定该字符串连接表达式的值，也就无法再编译时确定该字符串变量的值，因此无法利用JVM的字符串池。如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String str1=&quot;HelloJava9&quot;;</div><div class="line">String str2=&quot;Hello&quot;+&quot;Java9&quot;;</div><div class="line">System.out.println(str1==str2);	</div><div class="line">String str3=&quot;HelloJava&quot;+&quot;HelloJava&quot;.length();</div><div class="line">System.out.println(str1==str3);</div></pre></td></tr></table></figure></p>
<p>第一个返回了true,第二个输出返回了false;</p>
<p>当然还有一个情况例外的，就是当变量执行“宏替换”时也是可以让字符串变量指向JVM字符串池中对应字符串。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String str1=&quot;HelloJava9&quot;;</div><div class="line">String str2=&quot;Hello&quot;+&quot;Java9&quot;;</div><div class="line">System.out.println(str1==str2);	</div><div class="line">final int len=9;</div><div class="line">String str3=&quot;HelloJava&quot;+len;</div><div class="line">System.out.println(str1==str3);</div></pre></td></tr></table></figure>
<h3 id="不可变的字符串"><a href="#不可变的字符串" class="headerlink" title="不可变的字符串"></a>不可变的字符串</h3><p>String类是一个典型的不可变类。当一个String对象创建完成后，该String类里包含的字符序列就被固定下来，以后永远都不会改变。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String str=&quot;Hello&quot;;</div><div class="line">System.out.println(System.identityHashCode(str));</div><div class="line">str=str+&quot;Java&quot;;</div><div class="line">System.out.println(System.identityHashCode(str));</div></pre></td></tr></table></figure>
<p>当一个String对象创建完成后，该String里包含的字符序列不能改变。可能会有疑惑，str变量对应的字符序列不是一直在变吗，当时str只是一个引用类型变量。像C语言的指针，他并不是真正的String对象，只是指向String对象而已。<br>示意图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-8541fa72a1307b0d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="string.PNG"><br><img src="http://upload-images.jianshu.io/upload_images/925576-4f50a0ead0922370.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="string2.PNG"><br>从图中知道”Hello”字符串也许以后永远都不会再被用到了，但是这个字符串并不会被垃圾回收掉，因为它一直存在于字符串池中，这也是Java内存泄露的原因之一。</p>
<p>对于一个String类而言，他代表字符序列不可改变的字符串，因此如果程序需要一个字符序列会发生改变的字符串，那么应该考虑使用StringBuilder和StringBuffer.</p>
<p>在通常情况下优先考虑使用StringBuidler.StringBuidler与StringBuffer的区别在于，StringBuffer是线程安全的，也就是说StringBuffer类里的绝大部分方法都增加了synchoronized修饰符。对方法增加synchoronized修饰符可以保证该方法线程安全，当会降低该方法的执行效率。在没有多现场的环境下，应该优先使用StringBuilder来表示字符串。</p>
<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>如果程序需要比较两个字符串是否哦相同，用==进行判断就可以了；但是如果判断两个字符串所包含的字符序列时候相同，则应该用String重写过的equals()方法进行比较。假如没有重写equals方法，则比较的是引用类型的变量所指向的对象的地址。</p>
<h1 id="表达式类型的陷阱"><a href="#表达式类型的陷阱" class="headerlink" title="表达式类型的陷阱"></a>表达式类型的陷阱</h1><h3 id="表达式类型的自动提升"><a href="#表达式类型的自动提升" class="headerlink" title="表达式类型的自动提升"></a>表达式类型的自动提升</h3><p>Javc语言规定：当一个算术表达式中包含多个基本类型的值时，整个算术表达式的数据类型将自动提升。java语言的自动提升规则如下:</p>
<ul>
<li>所有的byte类型，short类型和char类型将被提升到int类型。</li>
<li>整个算术表达式的数据类型自动提升与表达式中的最高等级操作数同样的类型。操作数的如下，位于箭头右边的类型等级高于位于箭头左边的类型等级。<br><img src="http://upload-images.jianshu.io/upload_images/925576-d05db886803cc95a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类型提升.PNG"></li>
</ul>
<h3 id="复合赋值运算符的陷阱"><a href="#复合赋值运算符的陷阱" class="headerlink" title="复合赋值运算符的陷阱"></a>复合赋值运算符的陷阱</h3><p>经过前面的介绍，可以知道下面的是错误的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">short sValue=5;</div><div class="line">sValue=sValue-2;</div></pre></td></tr></table></figure>
<p>因为sValue将自动提升为int类型，所以程序将一个int类型的值赋值给short类型的变量时导致了编译错误。<br>但是改为如下就没有问题了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">short sValue=5;</div><div class="line">sValue-=2;</div></pre></td></tr></table></figure>
<p>上面程序使用复合赋值运算符，就不会导致编译错误。<br>实际上sValue-=2;等价于sValue=(sValue的类型)(sValue-2),这就是复合赋值运算符的隐式类型转换。</p>
<p>如果结果值的类型步变量的类型大，那么复合赋值运算符将会执行一个强制类型转换，这个强制类型转换将有可能导致高位“截断”，如下代码所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">short st=5;</div><div class="line">st+=10;</div><div class="line">st+=90000;</div><div class="line">System.out.println(st);</div></pre></td></tr></table></figure>
<p>为了避免这种潜在的危险，有如下几种情况下需要特别注意：</p>
<ul>
<li>将复合赋值运算符运用于byte,short或char等类型的变量</li>
<li>将复合赋值运算符运用于int类型的变量，而表达式右侧是long,float或double类型的值。</li>
<li>将复合赋值运算符运用于float类型的变量，而表达式右侧是double类型的值。</li>
</ul>
<h3 id="二进制整数"><a href="#二进制整数" class="headerlink" title="二进制整数"></a>二进制整数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int it=ob1010_1010;</div><div class="line">byte bt=(byte)ob1010_1010;</div><div class="line">System.out.println(it==bt);</div></pre></td></tr></table></figure>
<p>it和bt是不相等的，造成这种问题的原因在于这两条规则：</p>
<ul>
<li>直接使用整数直接量时，系统会将它当成int类型处理。</li>
<li>byte类型的整数虽然可以包含8位，但最高位是符号位。</li>
</ul>
<h1 id="转义字符的陷阱"><a href="#转义字符的陷阱" class="headerlink" title="转义字符的陷阱"></a>转义字符的陷阱</h1><p>Java程序提供了三种方式来表示字符。</p>
<ul>
<li>直接使用单引号括起来的字符值。如‘a’.</li>
<li>使用转义字符，如‘\n’.</li>
<li>使用Unicode转义字符，如‘\u0062’.</li>
</ul>
<p>java对待Unicode转义字符时不会进行任何处理，它会将Unicode转义字符直接替换成对应的字符，这将给java程序带来一些潜在的陷阱。</p>
<h3 id="慎用字符Unicode转义形式"><a href="#慎用字符Unicode转义形式" class="headerlink" title="慎用字符Unicode转义形式"></a>慎用字符Unicode转义形式</h3><p>理论上，Unicode转义字符可以代表任何字符（不考虑那些不在Unicode码表内的字符），因此很容易想到：所有字符都应该可以使用Unicode转义字符的形式。为了了解Unicode转义字符带来的危险，来看如下程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;abc\u000a&quot;.length());</div></pre></td></tr></table></figure>
<p>表面上看程序将输出4当编译该程序时发现程序无法通过编译。原因是Java对Unicode转义字符不会进行任何特殊处理，它只是简单的将Unicode转义字符替换成相应的字符。对于\u000a而言，他相当于一个换行符（\n），因此对Java编译器而言，上面代码相当于如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println(&quot;abc\n&quot;.length);</div></pre></td></tr></table></figure>
<h3 id="中止行注释的转义字符"><a href="#中止行注释的转义字符" class="headerlink" title="中止行注释的转义字符"></a>中止行注释的转义字符</h3><p>在java程序中使用\u000a时，它将被直接替换成换行字符（相当于\n），因此java注释中使用这个Unicode转义字符要特别小心</p>
<h1 id="泛型可能引起的错误"><a href="#泛型可能引起的错误" class="headerlink" title="泛型可能引起的错误"></a>泛型可能引起的错误</h1><h3 id="原始类型变量的赋值"><a href="#原始类型变量的赋值" class="headerlink" title="原始类型变量的赋值"></a>原始类型变量的赋值</h3><p>在严格的泛型程序中，使用泛型声明的类时应该总是为之指定类型实参，但为了与老的Java代码保存一致，Java也允许使用带泛型声明的类是不指定类型参数，如果使用带泛型声明的类时没有传入类型实参，那么这个类型参数默认是声明该参数时指定的第一个上限类型，这个类型参数也被称为raw type(原始类型)</p>
<p>当尝试把原始类型的变量赋给带泛型类型的变量时，会发生一些有趣的事情，如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List list=new ArrayList&lt;&gt;(); </div><div class="line">list.add(&quot;Hello&quot;);</div><div class="line">list.add(&quot;Jack&quot;);</div><div class="line">list.add(&quot;xie&quot;);</div><div class="line">List&lt;Integer&gt; intList=list;</div><div class="line">for(int i=0;i&lt;intList.size();i++)&#123;</div><div class="line">    System.out.println(intList.get(i));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码编译正常，并且正常输出intList的集合是三个普通的字符串。通过上面可以看出：当程序把一个原始类型的变量赋给一个带泛型信息的变量时，只要他们的类型保持兼容，无论List集合里实际包含什么类型的元素，系统都不会有任何问题。<br>不过虽然我们编译的时候可能不会有什么问题，但是当我们把元素拿出来处理的时候intList还是引用的是String类型，而不是Integer,因此运行时可能还是会出问题。而当我们<figure class="highlight plain"><figcaption><span>in=intList.get(i)```时是会报编译错误的。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">为此总结如下：</div><div class="line">- 当程序把一个原始类型的变量赋给一个带泛型信息的变量时，总是可以通过编译---只是会提示一些警告信息。</div><div class="line">- 当程序试图访问带泛型声明的集合的集合元素时，编译器总是把集合元素当成泛型类型处理---它并不关心集合里集合元素的实际类型。</div><div class="line">- 当程序试图访问带泛型声明的集合的集合元素是，JVM会遍历每个集合元素自定执行强制类型转换，如果集合元素的实际类型与集合所带的泛型信息不匹配，运行时将引发ClassCastException异常。</div><div class="line">### 原始类型带来的擦除</div></pre></td></tr></table></figure></p>
<p>Apple<integer> apple=new Apple<integer>();<br>Integer as=apple.getSize();<br>Apple b=apple;<br>Number size1=b.getSize();<br>Integer size2=b.getSize();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">当```Integer size2=b.getSize(); ```时代码会报错。</div><div class="line"></div><div class="line">当一个带泛型信息的Java对象赋给不带泛型信息的变量时，Java程序会发生擦除，这种擦除不仅会擦除使用Java类时传入的类型实参，而且会擦除所有的泛型信息，也就是擦除所有尖括号里的信息。</div><div class="line"></div><div class="line">### 创建泛型数组的陷阱</div></pre></td></tr></table></figure></integer></integer></p>
<p>List<string>[] lsa=new List<string>[10];<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">编译上面的代码会提示‘创建泛型数组’的错误，这正是由Java引起运行时异常，这就违背了Java泛型的设计原则————如果一段代码在编译时系统没有产生“[unchecked]未经检查的转换”警告，则程序在运行时不会引发ClassCastException异常。</div><div class="line">再看如下代码：</div></pre></td></tr></table></figure></string></string></p>
<p>public class GenericArray<t>{<br>    class A{}<br>    public GenericArray(){<br>        A[]  as=new A[10];<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">上面编译还是会错，A[] as=new A[10]只是创建A[]数组，而没哟创建泛型数组，因为内部类可以直接使用T类形形参，因此可能出现如下形似：</div></pre></td></tr></table></figure></t></p>
<p>public class GenericArray<t>{<br>    class A{<br>        T foo;<br>    }<br>    public GenericArray(){<br>        A[]  as=new A[10];<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这就导致创建泛型数组了，违背Java不能创建泛型数组的原则，所以JDK设计还是比较谨慎的。</div><div class="line"></div><div class="line"># 正则表达式的陷阱</div></pre></td></tr></table></figure></t></p>
<p>String str=”java.is.funny”;<br>String strAttr=str.split(“.”);<br>for(String s:strAttr){<br>    System.out.println(s);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">上面程序包含多个点号(.)的字符串，接着调用String提供的split()方法，以点号(.)作为分割符来分割这个字符串，希望返回该字符串被分割后得到的字符串数组。运行该程序，结果发现什么都没有输出。</div><div class="line">对于上面程序需要注意如下两点：</div><div class="line">- String提供的split(String regex)方法需要的参数是正则表达式</div><div class="line">- 正则表达式中的点号（.）可匹配任意字符。</div><div class="line">将上面代码改为如下形式```String strAttr=str.split(&quot;\\.&quot;); ```即可实现分割。</div><div class="line"></div><div class="line">String类也增加了一些方法用于支持正则表达式，具体方法如下：</div><div class="line"></div><div class="line">- matches(String regex):判断该字符串是否匹配指定的正则表达式。</div><div class="line">- String replaceAll(String regex,String replacement):将字符串中所有匹配指定的正则表达式的子串替换成replacement后返回。</div><div class="line">- String replaceFirst(String regex,String replacement):将字符串中第一个匹配指定的正则表达式的子串替换replacement后返回。</div><div class="line">- String[] split(String regex):以regex正则表达式匹配的子串作为分隔符来分割该字符串。</div><div class="line"></div><div class="line">以上方法都需要一个regex参数，这个参数是正则表达式。因此使用的时候要小心。</div><div class="line"></div><div class="line"># 多线程的陷阱</div><div class="line">### 不要调用run方法</div><div class="line">Java提供了三种方式来创建，启动多线程。</div><div class="line">- 继承Thread类来创建线程类，重写run()方法作为线程执行体。</div><div class="line">- 实现Ruannable接口来创建线程类，重写run()方法作为线程执行体。</div><div class="line">- 实现Callable 接口来创建线程类，重写call()方法作为线程执行体。</div><div class="line"></div><div class="line">其中第一种方式的效果最差，它有两点坏处：</div><div class="line"></div><div class="line">1.线程类继承了Thread类，无法再继承其他父类。</div><div class="line">2.因为每条线程都是Thread子类的实例，因此可以将多条线程的执行流代码于业务数据分离。</div><div class="line"></div><div class="line">对于第二种和第三种方式，它们的本质是一样的，只是Callable接口里包含的call()方法既可以声明抛出异常，也可以拥有返回值。</div><div class="line"></div><div class="line">### 静态的同步方法</div></pre></td></tr></table></figure></p>
<p>public class SynchronStatic implements Runnable{</p>
<pre><code>static boolean staticFlag =true;

public static synchronized void test(){
    for(int i=0;i&lt;100;i++){
        System.out.println(&quot;test0:&quot;+Thread.currentThread().getName()+&quot; &quot;+i);
    }
}

public void test1(){
    synchronized (this) {
        for(int i=0;i&lt;100;i++){
        System.out.println(&quot;test1:&quot;+Thread.currentThread().getName()+&quot; &quot;+i);
        } 
    }
}

@Override
public void run() {
    if(staticFlag){
        staticFlag=false;
        test();
    }else{
        staticFlag=true;
        test1();
    }
}

public static void main(String[] args) throws InterruptedException {
    SynchronStatic synchronStatic=new SynchronStatic();
    new Thread(synchronStatic).start();
    new Thread(synchronStatic).start();
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">运行结果如下：</div><div class="line"></div><div class="line">![thread.PNG](http://upload-images.jianshu.io/upload_images/925576-b8767d69fcc32fdd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line"></div><div class="line">上面的代码用了Synchronized怎么还会一起执行呢。因为第一条线程锁定的是SynchronStatic类，而不是synchronStatic所引用的对象，而第二条线程完全可以获得对synchronStatic所引用的对象的锁定，因此系统可以切换到执行第二条线程。假如我们把上面中的同步代码块的同步监视器改为SynchronStatic类，如下形式：</div></pre></td></tr></table></figure></p>
<p>public void test1(){<br>    synchronized (SynchronStatic.class) {<br>        for(int i=0;i&lt;100;i++){<br>        System.out.println(“test1:”+Thread.currentThread().getName()+” “+i);<br>        }<br>    }<br>}<br>```<br>此时静态同步方法和当前类为同步监视器的同步代码块不能同时执行。</p>
<h3 id="静态初始化启动心线程执行初始化"><a href="#静态初始化启动心线程执行初始化" class="headerlink" title="静态初始化启动心线程执行初始化"></a>静态初始化启动心线程执行初始化</h3><p>静态初始化快中的代码不一定是类初始化操作，静态初始化中启动线程run()方法代码只是新线程执行体，并不是类初始化操作。类似的，不要认为所有放在非静态初始化块中的代码就一定是对象初始化操作，非静态初始化块中启动新线程的run()方法代码只是新线程的线程执行体，并不是对象初始化操作。</p>
]]></content>
    
    <summary type="html">
    
      对于Java程序中的字符串直接量，JVM会使用一个字符串池来保存它们：当第一次使用某个字符串直接量是，JVM会将它放入字符串池进行缓存。在一般情况下，字符串池的字符串对象不会被垃圾回收，当程序再次需要使用该字符串时，无需重新创建一个新的字符串，而是直接让引用变量指向字符串池中已有的字符串。如下代码：
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>疯狂Java笔记之Java的内存与回收</title>
    <link href="http://jack921.win/2017/08/21/%E7%96%AF%E7%8B%82Java%E7%AC%94%E8%AE%B0%E4%B9%8BJava%E7%9A%84%E5%86%85%E5%AD%98%E4%B8%8E%E5%9B%9E%E6%94%B6/"/>
    <id>http://jack921.win/2017/08/21/疯狂Java笔记之Java的内存与回收/</id>
    <published>2017-08-20T17:08:10.000Z</published>
    <updated>2017-08-20T17:10:32.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java引用的种类"><a href="#Java引用的种类" class="headerlink" title="Java引用的种类"></a>Java引用的种类</h1><h3 id="1-对象在内存中的状态"><a href="#1-对象在内存中的状态" class="headerlink" title="1.对象在内存中的状态"></a>1.对象在内存中的状态</h3><p>对于JVM的垃圾回收机制来说，是否回收一个对象的标准在于：是否还有引用变量引用改对象？只要有引用变量引用对象，垃圾回收机制就不会回收它。</p>
<p>也就是说，当java对象被创建出来之后，垃圾回收机制会实时的监控每个对象的运行状态，包括对象的申请，引用,被引用，赋值等。当垃圾回收机制实时的监控到某个对象不再被引用变量所引用时，垃圾回收机制就会回收它所占用的空间。</p>
<p>基本上，可以把JVM内存中的对象引用理解成一种有向图，把引用变量，对象都当成有向图的顶点，将引用关系当成图的有向边，有向边总是从引用端指向被引用的Java对象。因为Java的所有对象都是由一条条线程创建出来的，因此可以把线程对象当成有向图的起始顶点。</p>
<p>对于单线程程序而言，整个程序只有一条main线程，那么该图就是以main进程为顶点的有向图。在这个有向图中，main顶点可达的对象都处于可达状态，垃圾回收机制不会回收它们；如果某个对象在这个有向图中处于不可达状态，那么就认为这个对象不再被引用。</p>
<p>采用有向图管理内存中的对象具有较高的精度，当缺点是效率较低。<br>当一个对象在堆内存中运行时，根据它在对应有向图中的状态，可以把它所处的状态分成</p>
<ul>
<li>可达状态:当一个对象被创建后，有一个以上的引用变量引用它。在有向图中可以从起始顶点导航到该对象，那么它就处于可达状态，程序可以通过引用变量来调用该对<br>象的属性和方法。</li>
<li>可恢复状态:如果程序中某个对象不再有任何引用变量引用它，它将先进入可恢复状态，此时从有向图的起始顶点不能导航到该对象。在这种状态下，系统的垃圾回<br>收机制准备回收该对象所占用的内存。在回收该对象之前，系统会调用可恢复状态的对象的finalize方法进行资源清理，如果系统调用finalize方法重新让一个以L的<br>引用变量引用该对象，则这个对象会再次变为可达状态:否则，该对象将进入不可达状态。</li>
<li>不可达状态:书对象的所有关联都被切断，fl甲系统调用所有对象的finaii}e方法依然没有使该对象变成可达状态后，这个对象将永久性地失去引用，最后变成不可达状态。只有当一个对象处于不可达状态时，系统才会真正回收该对象所占有的资源。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d8d33fca8408f155.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="memery.PNG"></p>
<p>一个对象可以被一个方法的局部变量引用，也可以被其他类的类变量引用，或者被其他对象的实例变量引用。当某个对象被其他类的类变量引用时，只有该类被销毁后，该对象才会进入可恢复状态；当某个对象那个被其他对象的实例变量引用时，只有当引用该对象的对象被销毁或变成不可达状态后，改对象才会进入不可达状态。</p>
<p>对于垃圾回收机制来说，判断一个对象是否可回收的标准就在改对象时候被引用，因此引用也是JVM进行内存管理的一个重要概念。为了更好的管理对象的引用，从JDK1.2开始，Java在java.lang.ref包下提供了三个类：SoftReference,PhantomReference和WeakReference,它们分别代表了系统对对象的三种引用方式：软引用，虚引用和弱引用。归纳起来，Java语言对对象的引用有如下四种：</p>
<ul>
<li>强引用</li>
<li>软引用</li>
<li>弱引用</li>
<li>虚引用</li>
</ul>
<h3 id="2-强引用"><a href="#2-强引用" class="headerlink" title="2.强引用"></a>2.强引用</h3><p>当程序创建一个对象，并把这个对象赋给一个引用变量，这个引用变量就是强引用。强引用是最常见的。</p>
<p>当一个对象被一个或一个以上的强引用变量所引用时，它处于可达状态，它不可能被系统垃圾回收机制回收，即使系统内存非常紧张，即使有些Java对象以后永远都不会被用到，JVM也不会回收被强引用所引用的Java对象。 </p>
<p>由于JVM肯定不会回收被强引用所引用的Java对象，因此强引用时造成Java内存泄漏的只要原因之一。</p>
<h3 id="3-软引用"><a href="#3-软引用" class="headerlink" title="3.软引用"></a>3.软引用</h3><p>对于强引用所引用的Java对象而言，无论系统的内存如何紧张，即使某些Java以后不再使用，垃圾回收机制也不会回收它所占的内存。当时软引用不同，当系统内存充足时，和强引用是没有什么区别的。但是当系统内存不足时，软引用所引用的Java对象可以被垃圾回收机制回收，从而避免系统内存的不足的异常。</p>
<p>当程序需要大量创建某个类的新对象，而且有可能重新访问已创建的来对象是，可以充分使用软引用来解决内存紧张的难题。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Person&#123;</div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line">    public Person(String name,int age)&#123;</div><div class="line">        this.name=name;</div><div class="line">        this.age=age;</div><div class="line">    &#125;</div><div class="line">    public String toString()&#123;</div><div class="line">        return &quot;Person[name=&quot;+name+&quot;,age=&quot;+age+&quot;]&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SoftReference&lt;Person&gt;[] people=new SoftReference[100000];</div><div class="line">        for(int i=0;i&lt;people.length;i++)&#123;</div><div class="line">            people[i]=new SoftReference&lt;Person&gt;(new Person(&quot;HelloJack&quot;+i,i));</div><div class="line">        &#125;</div><div class="line">        System.out.println(people[2].get());</div><div class="line">        System.out.println(people[4].get());</div><div class="line">        System.gc();</div><div class="line">        System.runFinalization();</div><div class="line">        System.out.println(people[2].get());</div><div class="line">        System.out.println(people[4].get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-弱引用"><a href="#4-弱引用" class="headerlink" title="4.弱引用"></a>4.弱引用</h3><p>软引用与软引用有点相似，区别在于弱引用所引用的对象的生命周期更短。弱引用通过WeakReference类实现。对于软引用的对象而言，当系统垃圾回收机制运行时，不管系统内存时候足够，总会回收改对象所占用的内存。当然，并不是说当一个对象只有弱引用时，它就会立即被回收，正如那些失去引用的对象一样，必须等到系统垃圾回收机制运行时才会被回收。</p>
<p>弱引用具有很大的不确定性，因为每次垃圾回收机制执行时都会回收弱引用所引用的对象，而垃圾回收机制的运行又不受程序员的控制，因此程序获取弱引用所引用的Java对象是必须小心空指针异常，通过弱引用所获取的Java对象可能是null.<br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String str=new String(&quot;HelloJack&quot;);</div><div class="line">WeakReference&lt;String&gt; wr=new WeakReference&lt;String&gt;(str);</div><div class="line">str=null;</div><div class="line">System.out.println(wr.get());</div><div class="line">System.gc();</div><div class="line">System.runFinalization();</div><div class="line">System.out.println(wr.get());</div></pre></td></tr></table></figure>
<h3 id="5-虚引用"><a href="#5-虚引用" class="headerlink" title="5.虚引用"></a>5.虚引用</h3><p>弱引用和软引用可以单独使用，当虚引用不能单独使用，单独使用虚引用没有太大的意义。虚引用的主要作用就是跟踪对象被垃圾回收的状态，程序可以通过检查与虚引用关联的引用队列中是否包含指定的虚引用，从而了解虚引用所引用的对象是否即将被回收。虚引用通过PhantomReference类实现，他完全类似于没有引用。虚引用对对象本身没有太大的影响，对象甚至感觉不到虚引用的存在。<br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String str=new String(&quot;HelloJack&quot;);</div><div class="line">ReferenceQueue&lt;String&gt; rq=new ReferenceQueue&lt;String&gt;();</div><div class="line">PhantomReference&lt;String&gt; pr=new PhantomReference&lt;&gt;(str,rq);</div><div class="line"></div><div class="line">str=null;</div><div class="line">System.out.println(pr.get());</div><div class="line">System.gc();</div><div class="line">System.runFinalization();</div><div class="line"></div><div class="line">System.out.println(rq.poll()==pr);</div></pre></td></tr></table></figure>
<h1 id="Java的内存泄漏"><a href="#Java的内存泄漏" class="headerlink" title="Java的内存泄漏"></a>Java的内存泄漏</h1><p>程序运行过程中会不断地分配内存空间，那些不在使用的内存空间应该即时被回收，从而保证系统可以再次使用这些内存，如果存在无用的内存空间应该即时被回收，从而保证系统可以再次使用这些内存，如果存在无用的内存没有被回收回来，那就内存泄漏。</p>
<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>垃圾回收机制只要完成两件事：</p>
<ul>
<li>跟踪并监控每个Java对象，当某个对象处于不可达状态，回收该对象所占用的内存</li>
<li>清理内存分配，回收过程中产生的内存碎片</li>
</ul>
<p>一个高效的JVM一个重要的方面是提供高效的垃圾回收机制，高效的垃圾回收机制可以保证垃圾回收的快速运行，避免应用程序的性能瓶颈，又不会到时应用程序卡顿。 </p>
<h3 id="1-垃圾回收的基本算法"><a href="#1-垃圾回收的基本算法" class="headerlink" title="1.垃圾回收的基本算法"></a>1.垃圾回收的基本算法</h3><p>实际上，垃圾回收机制不可能实时检测到每个Java对象的状态，因此当一个对象失去引用后，它也不会立即被回收，只有等垃圾回收机制运行时才会被回收。<br>对于一个垃圾回收器的设计算法来说，大致如下可供选择的设计。</p>
<ul>
<li>串行回收(Serial)和并行回收(Parallel)：串行回收就是不管系统有多少个CPU，始终只用一个CPU来执行回收操作；而并行回收就是把整个回收工作拆分成多部分，每个部分有一个CPU负责，从而让多个CPU并行回收。并行回收的执行效率很高，但复杂度增加，另外也有其他一些副作用，比如内存碎片会增加等。</li>
<li>并发执行(Concorrent)和应用程序(Stop-the-world)停止：Stop-the-world的垃圾回收方式在执行垃圾回收的同时会导致应用程序暂停。并发执行的垃圾回收虽然不会导致应用程序暂停，但由于并发执行垃圾回收需要解决和应用程序的执行冲突(应用程序可能会在垃圾回收的过程中修改对象)，因此并发执行垃圾回收的系统开销比Stop-the-world更高，而且执行时也需要更多的堆内存。</li>
<li>压缩(Compacting)/不压缩(Non-compacting)和复制(Copying):为了减少内存碎片，支持压缩的垃圾回收器会把所有的活对象搬迁到一起，然后将之前占用的内存全部回收。不压缩的垃圾回收器只是回收内存，这样回收回来的内存不可能是连续的，因此将有较多的内存碎片，相对压缩垃圾回收机制，不压缩垃圾回收机制回收内存更快，而分配内存是就会更慢，而且无法解决内存碎片的问题。复制<br>垃圾回收会将所有的可达对象复制到另一块相同的内存中，这种方式的优点是垃圾回收过程不会产生内存碎片，但缺点也很明显，需要复制数据和额外的内存。</li>
</ul>
<p>上面介绍的复制，不压缩，压缩都是垃圾回收器回收已用内存空间的方式，关于这三种方式详述如下:</p>
<ul>
<li>复制：将堆内存分成两个相同空间，从根(类似有向图起始顶点)开始访问每一个关联的可达对象，将空间A的可达对象全部复制到空间B，然后一次性回收整个空间A。</li>
</ul>
<p>对于复制算法而言，因为只需访问所有的可达对象，将所有的可达对象复制完成后就回收整个空间，完全不用理会那些不可达对象，所以遍历空间的成本较小，但需要巨大的复制成本和较多的内存。</p>
<ul>
<li><p>标记清除(mark-sweep):也就是不压缩回收方式。垃圾回收器先从根开始访问所有的可达对象，将他们标记为可状态，然后再遍历一次整个内存区域，对所有的没有标记为可达对象进行垃圾回收处理。</p>
</li>
<li><p>标记压缩(mark-sweep-compact):这是压缩回收方式，这种方式充分利用上述两种算法的优点，垃圾回收器先从根开始访问所有的可达对象，将它们标记为可达状态。接下来垃圾回收器会将这些活动对象搬迁在一起，这个过程也被称为内存压缩，然后垃圾回收机制再次回收那些不可达对象所占用的内存空间，这样对避免了回收产生内存碎片。</p>
</li>
</ul>
<p>上面无论用哪种回收方式，具体实现起来总是利弊参半。因此，实际垃圾回收时总是使用多种设计方式，也就是针对不同的情况采用不同的垃圾回收方式实现。</p>
<p>现行的垃圾回收器用分代的方式来采用不用的回收设计。分代的基本思路是根据对象生存时间的长短，把堆内存分成三代：</p>
<ul>
<li>Young(新生代)</li>
<li>Old(老年代)</li>
<li>Permanent(永生代)</li>
</ul>
<p>垃圾回收器会根据不同代的特点采用不同的回收算法，从而充分利用各种回收算法的优点。</p>
<h3 id="2-堆内存的分代回收"><a href="#2-堆内存的分代回收" class="headerlink" title="2.堆内存的分代回收"></a>2.堆内存的分代回收</h3><p>分代回收的一个依据就是对象生存时间的长短，然后根据不同代采取不同的垃圾回收策略。采用这种“分代回收”的策略基于如下两点事实。</p>
<ul>
<li>绝大多数的对象不会被长时间引用，这些对象在其Young期间就会被回收。</li>
<li>很老的对象(生存时间很长)和很新的对象(生存时间很短)之间很少存在互相引用的情况。</li>
</ul>
<p>对于Young代的对象而言，大部分对象都会很快进入不可达状态，只要少量的对象能熬到垃圾回收执行，而垃圾回收器只需保留Young代中处于可达状态的对象，如果采用复制算法只需要少量的复制成本，因此大部分垃圾回收器对Young代都采用复制算法。</p>
<ol>
<li>Young代</li>
</ol>
<p>对Young代采用复制算法只需遍历那些处于可达状态的对象，而且这些对象的数量较少，可复制成本也不大，因此可以充分发挥复制算法的优点。</p>
<p>Young代由一个Eden区和两个Survivor区构成。绝大多数对象先分配到Eden区中(有一些大的对象可能会直接被分配到old代中)，Survivor区中的对象都至少在Young代中经历过一次垃圾回收，所以这些对象在被转移到old代之前会先保留在Survivor空间中。同一时间两个Sunrtvor空间中有一个用来保存对象，而另一个是空的，用来在下次垃圾回收时保存Young代中的对象。每次复制就是将Aden和第一个Survivpr区的可达对象复制到第二个Survivor区，然后清空Eden与第一个Survivor区。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d4ad54387cfbfe21.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="young.PNG"></p>
<p>2.Old代</p>
<p>如果Young代中的对象经过数次的垃圾回收依然没有被回收掉，即这个对象经过足够长的时间还处于可达状态，垃圾回收机制就会将这个对象转移到Old代。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-04dac27a456f905a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="old.PNG"></p>
<p>Old代的大部分对象都是“久经考验”的老人了，因此它们没有那么容易被回收。而且随着时间的流逝，Old代的对象会越来越多，因此Old代的空间要比Young代的空间更大。出于这两点考虑，具有如下特征:</p>
<ul>
<li>Old垃圾回收的执行频率无须太高。因为很少有对象会死掉。</li>
<li>每次对Old代执行垃圾回收都需要更长的时间来完成。</li>
</ul>
<p>基于以上考虑，垃圾回收器一般会采用标记压缩算法，这个算法可以避免复制Old代的大量对象，而且Old代的对象不会很快死亡，回收过程不会大量的产生内存碎片。因此相对比较划算。</p>
<p>3.Permanent代<br>Permanent代主要用于装载Class,方法等信息，默认为64MB，垃圾回收机制通常不会回收Permanent代的对象。对于那些需要加载很多类的服务器程序，往往需要加大Permanent代的内存，否则可能因为内存不足而导致程序终止。</p>
<p>当Young代的内存将要用完时，垃圾回收机制会对Young代进行垃圾回收，垃圾回收机制会采用较高的频率对Yn}rng代进行扫描和回收。因为这种回收的系统开销比较小，因此也被称为次要回收(minor collection ).当old代的内存将要用完时，垃圾回收机制会进行全回收，也就是对Young代和old代都要进行回收，此时回收成本就大得多了，因此也称为主要<br>回收(major callectivn)。</p>
<p>通常来说，Young代的内存会先被回收，而且会使用专门的回收算法(复制算法)来回收Young代的内存:对于Old代的回收频率则要低得多，因此也会采用专门的回收算法。如果需要进行内存压缩，那么每个代都独立地进行压缩。</p>
<h3 id="3-常见的垃圾回收器"><a href="#3-常见的垃圾回收器" class="headerlink" title="3.常见的垃圾回收器"></a>3.常见的垃圾回收器</h3><p>1.串行回收器</p>
<p>串行回收器通过对Young代和Old代的回收都是串行的（只使用一个CPU），而且垃圾回收执行期间会使的应用程序产生暂停。具体策略为，Young代采用串行复制算法，Old代采用串行标记压缩算法。</p>
<p>2.并行回收器</p>
<p>并行回收器对于Young代采用与串行回收器基本形似的回收算法，只是增加了多CPU并行的能力，即同时启动多线程并行来执行垃圾回收。线程数默认问CPU个数，当计算机中的CPU很多时，可以用-XX:ParallelGCThreads=size来减少并行线程的数目。</p>
<p>3.并行压缩回收器</p>
<p>并行压缩回收器的改变主要体现在对Old代的回收上。系统首先将Old代划分成几个固定大小的区域。在Mark阶段，多个垃圾回收线程会并行标记Old代中的可达对象。当某个对象被标记为可达对象时，还会更新对象所在区域的大小，以及该对象的位置信息。</p>
<p>接下来是summary阶段。summary阶段直接操作Old代的区域，而不是单个的对象。由于每次垃圾回收的压缩都会在Old代的左边部分存储大量的可达对象，对这样的高密度可达对象的区域进行压缩往往很不划算。所以summary阶段会从最左边的区域开始检测每个区域的密度，当检测到某个区域中能回收的空间达到了某个数值时(也就是可达对象的密度较小时)，垃圾回收器会判定该区域，以及该区域右边的所有区域都应该进行回收，而该区域左边的区域都会被标识为密集区域，垃圾回收器既不会把新对象移动到这些密集区域中，也不会对这些密集区域进行压缩;该区域和其右边的所有区域都会被压缩并回收空间。summary阶段目前还是串行操作，虽然并行是可以实现的，但重要性不如对mark和压缩阶段的并行重要。</p>
<p>最后是compact阶段。回收器利用summary阶段生成的数据识别出有哪些区域是需要装填的，多个垃圾回收线程可以并行地将数据复制到这些区域中。经过这个过程后，Old代的一端会密集地存在大量的活动对象，另一端则存在大块的空闲块。</p>
<p>4.并发标识-清理(Mark-Sweep)回收器(CMS)</p>
<p>CMS回收器对Young代的回收方式和并行回收器的回收方式完全相同。由于对Young代的回收依然采用复制回收算法，因此垃圾回收时依然会导致程序暂停，除非依靠多CPU并行来提高垃圾回收的速度。</p>
<p>通常来说，建议适当加大Young代的内存。如果Young代的内存足够大就不用频繁地进行垃圾回收了，而且增大垃圾回收的时间间隔后可以让更多的位于Young代中的Java对象自己死掉，从而避免复制。但将Young代的内存设得过大也有一个坏处:当垃圾回收器回收Young代的内存时，复制成本会显著上升(复制算法必须等Young代满了之后才开始回收)，所以回收时会让系统的暂停时间显著加大。</p>
<p>CMS对Old代的回收多数是并发操作，而不是并行操作。垃圾回收开始时需要一个短暂的暂停，此阶段称为初始标识(initial mark)阶段，这个阶段仅仅标识出那些被直接引用的可达对象。接下来进入并发标识阶段( concurrent marking phase)，垃圾回收器会依据在初始标识中发现的可达对象来寻找其他的可达对象。由于在并发标识阶段应用程序也会同时在运行，无法保证所有的可达对象都被标识出来，因此应用程序会再次很短地暂停一下，多线程并行地重新标识之前可能因为井发而漏掉的对象，这个阶段被称为再标识(remark)阶段。</p>
<p>完成了再标识以后，所有的可达对象都已经被标识出来了，接下来就可以运行并发清理操作了。</p>
<h3 id="4-内存管理小技巧"><a href="#4-内存管理小技巧" class="headerlink" title="4.内存管理小技巧"></a>4.内存管理小技巧</h3><ul>
<li>尽量使用直接量<br>当需要使用字符串，还有Byte,Short,Integer,Long,Float,Double,Boolean,Character包装类的实例时，程序不应该采用new的方式来创建对象，而应该直接采用直接量来创建它们。</li>
<li>使用StringBuilder和StringBuffer进行字符串连接</li>
</ul>
<p>String,StringBuilder,StringBuffer都可以代表字符串，其中String代表字符序列不可变的字符串，而StringBuilder和StringBuffer都代表字符序列可变的字符串</p>
<p>如果程序使用多个String对象进行字符串连接运算，在运行时将生产大量的临时字符串，这些字符串会保存在内存中从而到时程序性能下降。</p>
<ul>
<li>尽早释放无用对象的引用</li>
</ul>
<p>大部分时候，方法的局部引用变量所引用对象会随着方法的结束而变成垃圾，因为局部变量的生存期限很短，当方法运行结束时，该方法内的局部变量就结束了生存期限。因此大部分时候程序无须将局部引用变量显示设为null.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public void info()&#123;</div><div class="line">    Object object=new Object();</div><div class="line">    System.out.println(object.toString());</div><div class="line">    System.out.println(object.hashCode());</div><div class="line">    object=null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的方法随着info()方法执行完成，obj引用变量的作用域就结束了，原来的obj所引用的对象就会变成垃圾。因此object=null是没有必要的。但是如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void info()&#123;</div><div class="line">    Object object=new Object();</div><div class="line">    System.out.println(object.toString());</div><div class="line">    System.out.println(object.hashCode());</div><div class="line">    object=null;</div><div class="line">    //执行耗时，耗内存操作</div><div class="line">    //或者调用耗时，耗内存的方法</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面因为需要执行耗内存耗时的方法，可以尽早的释放对Object对象的引用。所以可能的是程序在执行耗时，耗内存操作时，obj之前所引用的Object对象可能被垃圾回收了。</p>
<ul>
<li>尽量少用静态变量</li>
</ul>
<p>从理论上来说，Java对象何时被回收由垃圾回收机制决定，对程序员来说是不确定的。由于垃圾回收机制判断一个对象是否是垃圾的唯一标准是该对象是否有引用变量引用它，因此推荐尽早释放对象的引用。</p>
<p>最好的情况是，某个对象被static变量所引用，那么垃圾回收机制通常是不会回收这个对象所占的内存的。如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">class Person&#123;</div><div class="line">    static Obejct obj=new Object();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Obj变量是Person类的静态变量，因此它的生命周期与Person类同步。在Person类不被卸载的情况下，Person类对应的Class对象会常驻内存，直到程序运行结束。因此，obj所引用的Object对象一旦被创建，也会常驻内存，知道程序结束。</p>
<ul>
<li><p>避免在经常调用的方法，循环中创建Java对象</p>
<p>经常调用的方法和循环有一个共同特征：这些代码段会被多次重复调用。如下：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for(int i=0;i&lt;10;i++)&#123;</div><div class="line">    Object obj=new Object();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然上面的obj是局部变量，执行完之后会失效，当时要循环创建10次，系统要不断地分配空间，执行初始化操作。这些对象的生存时间又不长，所以系统又要回收它们所占的内存空间，在这些操作中会消耗不少性能。</p>
<ul>
<li>缓存经常使用的对象</li>
</ul>
<p>如果有些对象需要被经常使用，则可以考虑把这些对象用缓存池保存起来，，这样当下次需要时就可直接拿出这些对象来用，典型的缓存就是数据连接池，数据连接池缓存了大量的数据库连接，每次需要访问数据库是都可以直接去除数据库连接。</p>
<p>除此之外，系统的一些常用基础信息也可以通过缓存的方式存起来。实现缓存一般有两种方式：</p>
<p>1.使用HashMap进行缓存（不宜存储过多数据，从而内存过大，导致性能下降）</p>
<p>2.直接使用某些开源项目进行缓存</p>
<ul>
<li>尽量不要使用finalize()方法</li>
</ul>
<p>当一个对象失去引用之后，垃圾回收器准备回收该对象之前，垃圾回收机制会先调用改对象的finalize()方法来执行资源清理。处于这种考虑，可能有些开发者会考虑使用finalize()方法来进行资源清理。</p>
<p>实际上，将资源清理放在finalize()方法中完成是非常拙劣的选择。根据前面介绍的垃圾回收算法，垃圾回收机制工作量已经够大了，尤其是回收Young代内存时， 大都会引起应用程序暂停，使得用户难以忍受。</p>
<p>在垃圾回收器本身已经严重制约应用程序性能的情况下，如果再选择使用finalize()方法进行资源清理，无疑是一种火上浇油的行为，这将导致垃圾回收器的负担更大，导致程序运行效率更差。</p>
<ul>
<li>考虑使用SoftReference</li>
</ul>
<p>当程序需要创建长度很大的数组时，可以考虑使用SoftReference来包装数组元素，而不是直接让数组元素来引用对象。</p>
<p>SoftReference是一个很好的选择，当内存充足时不回收数据，当内存不充足时释放软引用所引用的对象。</p>
]]></content>
    
    <summary type="html">
    
      对于JVM的垃圾回收机制来说，是否回收一个对象的标准在于：是否还有引用变量引用改对象？只要有引用变量引用对象，垃圾回收机制就不会回收它。
    
    </summary>
    
      <category term="Java" scheme="http://jack921.win/categories/Java/"/>
    
    
      <category term="Java" scheme="http://jack921.win/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java基础之对象及其内存管理</title>
    <link href="http://jack921.win/2017/08/16/Java%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%B9%E8%B1%A1%E5%8F%8A%E5%85%B6%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>http://jack921.win/2017/08/16/Java基础之对象及其内存管理/</id>
    <published>2017-08-15T16:22:22.000Z</published>
    <updated>2017-08-15T16:24:43.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-实例变量和类变量"><a href="#1-实例变量和类变量" class="headerlink" title="1.实例变量和类变量"></a>1.实例变量和类变量</h3><p>Java程序的变量大体可分为成员变量和局部变量。其中局部变量可分为如下二类。</p>
<ul>
<li>形参:在方法签名中定义的局部变量，由方法调用者负责为其赋值，随方法的结束而消亡。</li>
<li>方法内的局部变量:在方法内定义的局部变量，必须在方法内对其进行显式初始化口这种类型的局部变量从初始化完成后开始生效，随方法的结束而消亡。</li>
<li>代码块内的局部变量:在代码块内定义的局部变量，必须在代码块内对其进行显式初始化。这种类型的局部变量从初始化完成后开始生效，随代码块的结束而消亡。</li>
</ul>
<p>局部变量的作用时间很短暂，他们都被存储在栈内存中。</p>
<p>类体内定义的变量被称为成员变量〔英文是Field)。如果定义该成员变量时没有使用static<br>修饰，该成员变量又被称为非静态变量或实例变量;如果使用了static修饰，则该成员变量又可被称为静态变量或类变量</p>
<p>(坑:表面上看定义成员变量是没有先后顺序的，实际上还是要采用合法的前向引用)如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int num=num2+1;</div><div class="line">int num2=2;</div></pre></td></tr></table></figure>
<p>是会报错的，出得num2位静态比变量的时候。</p>
<h3 id="2-实例变量和类变量的属性"><a href="#2-实例变量和类变量的属性" class="headerlink" title="2.实例变量和类变量的属性"></a>2.实例变量和类变量的属性</h3><p>使用static修饰的成员变量是类变量，属于该类本身:没有使用属于该类的实例。在同一个JVM内，侮个类只对应一个<br>Java对象口static修饰的成员变量是Class对象，但侮个类可以创建多个</p>
<p>由于同一个JVM内每个类只对应一个static对象，因此同一个JVM内的一个类的类变量只需一块内存空间;但对于实例变量而言，改类每创建一次实例，就需要为实例变量分配一块内存空间。也就是说，程序中有几个实例，实例变量就需要几块内存空间。</p>
<h3 id="3-实例变量的初始化时机"><a href="#3-实例变量的初始化时机" class="headerlink" title="3.实例变量的初始化时机"></a>3.实例变量的初始化时机</h3><p>对于实例变量，它是Java对象本身。每创建Java对象时都需要为实例变量分配内存空间，并对实例进行初始化。<br>程序可以在三个地方进行初始化：</p>
<ul>
<li>定义实例变量时指定初始值。</li>
<li>非静态初始化块中对实例变量指定初始值。</li>
<li>构造器中对实例变量指定初始值。<br>其中第1,2种方式都比在构造器初始化更早执行，当第1,2种的执行顺序与他们在源程序中的排列顺序相同。</li>
</ul>
<h3 id="4-类变量的初始化时机"><a href="#4-类变量的初始化时机" class="headerlink" title="4.类变量的初始化时机"></a>4.类变量的初始化时机</h3><p>类变量是属于Java类本身。从程序运行的角度来看，每个jvm对一个Java类只初始化一次，因此只有每次运行Java程序时，才会初始化该Java类，才会为该类的类变量分配内存空间，并执行初始化。</p>
<p>程序可以在两个地方对类变量执行初始化：</p>
<ul>
<li>定义类变量时指定初始值。</li>
<li>静态初始化块中对类变量指定初始值。</li>
</ul>
<p>这两种方式的执行顺序与它们在源程序中的排列顺序相同。</p>
<h1 id="父类构造器"><a href="#父类构造器" class="headerlink" title="父类构造器"></a>父类构造器</h1><h3 id="1-隐式调用和显式调用"><a href="#1-隐式调用和显式调用" class="headerlink" title="1.隐式调用和显式调用"></a>1.隐式调用和显式调用</h3><p>当创建Java对象时，系统会先调用父类的非静态初始化块进行初始化。而这种调用是隐式调用。而第一次初始化时最优先初始化的是静态初始化块。接着会调用父类的一个或多个构造器进行初始化，这个调用是用过super()的方法来显式调用或者隐式调用。当所有父类初始化完之后才初始化子类。实例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">class Animal&#123;</div><div class="line">	</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;Animal静态初始化块&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	&#123;</div><div class="line">	   System.out.println(&quot;Animal初始化块&quot;);</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	public Animal()&#123;</div><div class="line">		System.out.println(&quot;Animal构造器&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Cat extends Animal&#123;</div><div class="line">	public Cat(String name,int age)&#123;</div><div class="line">		super();</div><div class="line">		System.out.println(&quot;Cat构造器&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	static&#123;</div><div class="line">		System.out.println(&quot;Cat静态初始化块&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	&#123;</div><div class="line">		System.out.println(&quot;Cat初始化块&quot;);</div><div class="line">		weight=2.0;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	double weight=2.3;</div><div class="line"></div><div class="line">	public String toString()&#123;</div><div class="line">		return &quot;weight=&quot;+weight;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class JavaTest &#123;</div><div class="line"></div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		</div><div class="line">		Cat cat=new Cat(&quot;kitty&quot;,2);</div><div class="line">		System.out.println(cat);</div><div class="line">//		Cat cat2=new Cat(&quot;Garfied&quot;,3);</div><div class="line">//		System.out.println(cat2);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的结果是：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a28511aeced4c594.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java.PNG"></p>
<h3 id="2访问子类对象的实例变量"><a href="#2访问子类对象的实例变量" class="headerlink" title="2访问子类对象的实例变量"></a>2访问子类对象的实例变量</h3><p>子类因为继承父类所以可以访问父类的成员方法和变量，当一般情况下父类是访问不了子类的，因为父类不知道哪个子类继承。但是在特殊情况下是可以的，如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">class BaseClass&#123;</div><div class="line">	private int i=2;</div><div class="line">	public BaseClass()&#123;</div><div class="line">		this.display();</div><div class="line">	&#125;</div><div class="line">	public void display()&#123;</div><div class="line">		System.out.println(&quot;BaseClass&quot;);</div><div class="line">		System.out.println(i);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Derived extends BaseClass&#123;</div><div class="line">	private int i=22;</div><div class="line">	public Derived()&#123;</div><div class="line">		i=222;</div><div class="line">	&#125;</div><div class="line">	public void display()&#123;</div><div class="line">		System.out.println(&quot;Derived&quot;);</div><div class="line">		System.out.println(i);</div><div class="line">	&#125;</div><div class="line">	public void sub()&#123;</div><div class="line">		System.out.println(&quot;sub&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class JavaTest &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Derived derived=new Derived();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9c668fadf1e445c9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="java2.PNG"></p>
<p>仔细看代码，好像怎么也不会输出0吧，为什么呢。</p>
<p>首先我们要知道Java构造器只是起到对变量进行初始化的作用，而在执行构造器之前我们的对象已经初始化了，在内存中已经被分配起来了，而这些值默认是空值。</p>
<p>其次this在代表正在初始化的对象，一般看会以为就是BaseClass对象，不过在上面代码里，this是放在BaseClass的构造器里，当时我们是在Derived()构造器执行的，是Derived()构造器隐式调用了BaseClass()构造器的代码，所以在这个情况下是this是Derived对象。所以当我们改为this.sub()时是报错的。</p>
<p>此外这个this的编译类型是BaseClass，所以我们改为this.i的时候输出是2.</p>
<p>所以应该避免在父类构造器中调用被子类重写的方法。</p>
<h1 id="父子实例的内存控制"><a href="#父子实例的内存控制" class="headerlink" title="父子实例的内存控制"></a>父子实例的内存控制</h1><h3 id="1-继承成员变量和继承方法的区别"><a href="#1-继承成员变量和继承方法的区别" class="headerlink" title="1.继承成员变量和继承方法的区别"></a>1.继承成员变量和继承方法的区别</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class Animal&#123;</div><div class="line">	public String name=&quot;Animal&quot;;</div><div class="line">	</div><div class="line">	public void sub()&#123;</div><div class="line">		System.out.println(&quot;AnimalSub&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line">class Wolf extends Animal&#123;</div><div class="line">	public String name=&quot;Wolf&quot;;</div><div class="line"></div><div class="line">	public void sub()&#123;</div><div class="line">		System.out.println(&quot;WolfSub&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class JavaTest &#123;</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		Animal animal=new Animal();</div><div class="line">		System.out.println(animal.name);</div><div class="line">		animal.sub();</div><div class="line">		Wolf wolf=new Wolf();</div><div class="line">		System.out.println(wolf.name);</div><div class="line">		wolf.sub();</div><div class="line">		Animal sub=new Wolf();</div><div class="line">		System.out.println(sub.name);</div><div class="line">		sub.sub();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-44fc60505bd44631.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>所以当声明类型为父类，运行类型为子类是，成员变量表现出父类，而方法表现出子类，这就是多态。</p>
<h3 id="2-内存中的子类实例"><a href="#2-内存中的子类实例" class="headerlink" title="2.内存中的子类实例"></a>2.内存中的子类实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">class Fruit&#123;</div><div class="line">	String color=&quot;未确定颜色&quot;;</div><div class="line">	</div><div class="line">	public Fruit getThis()&#123;</div><div class="line">		return this;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void info()&#123;</div><div class="line">		System.out.println(&quot;Fruit方法&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class JavaTest extends Fruit&#123;</div><div class="line">	</div><div class="line">	@Override</div><div class="line">	public void info() &#123;</div><div class="line">		System.out.println(&quot;JavaTest方法&quot;);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public void AccessSuperInfo()&#123;</div><div class="line">		super.info();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	public Fruit getSuper()&#123;</div><div class="line">		return super.getThis();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	String color=&quot;红色&quot;;</div><div class="line">	</div><div class="line">	public static void main(String[] args) &#123;</div><div class="line">		JavaTest javaTest=new JavaTest();</div><div class="line">		Fruit f=javaTest.getSuper();</div><div class="line">		</div><div class="line">		System.out.println(&quot;javaTest和f所引用的对象是否相同:&quot;+(javaTest==f));</div><div class="line">		System.out.println(&quot;所引用对象的color实例变量：&quot;+javaTest.color);</div><div class="line">		System.out.println(&quot;所引用对象的color实例变量：&quot;+f.color);</div><div class="line">		</div><div class="line">		javaTest.info();</div><div class="line">		f.info();</div><div class="line">		javaTest.AccessSuperInfo();</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当创建一个对象时，系统不仅为该类的实例变量分配内存,同时也为其父类定义的所有实例变量分配内存,即是子类定义了与父类同名的实例变量。也就是说，当系统创建一个Java对象时，如果该Java类有两个父类(一个直接父类A，一个间接父类g ),假设A类中定义了2个实例变量，B类<br>中定义了3个实例变量，当前类中定义了2个实例变量，那么这个Java对象将会保存2+3十2个实例变量。</p>
<p>如果子类里定义了与父类中已有变量同名的变量，那么子类中定义的变量会隐藏父类中定义的变量，而不是覆盖。因此系统创建子类对象是依然会为父类定义的，被隐藏的变量分配内存空间。</p>
<p>为了在子类中访问父类定义的，被隐藏的变量和方法，可以使用super来限定修饰这些变量和方法。</p>
<h3 id="3-父，子类的类变量"><a href="#3-父，子类的类变量" class="headerlink" title="3.父，子类的类变量"></a>3.父，子类的类变量</h3><p>如果在子类中要访问父类中被隐藏的静态变量和方法，程序有两种方式：</p>
<ul>
<li>直接使用父类的类名作为主调来访问类变量</li>
<li>使用super.作为限定来访问类变量</li>
</ul>
<p>一般情况下，都建议使用第一种方式访问类变量，因为类变量属于类本身,使用类名做主调来访问可以较好的可读性 </p>
<h1 id="final修饰符"><a href="#final修饰符" class="headerlink" title="final修饰符"></a>final修饰符</h1><h3 id="1-final-修饰的变量"><a href="#1-final-修饰的变量" class="headerlink" title="1.final 修饰的变量"></a>1.final 修饰的变量</h3><p>final修饰的实例变量必须显示指定初始值，只能在如下三个位置指定初始值。</p>
<ul>
<li>定义final实例变量时指定初始值</li>
<li>在非静态初始化块中为final实例变量指定初始值</li>
<li>在构造器中为final实例变量指定初始值</li>
</ul>
<p>对于普通实例java可以指定默认初始化，而final实例变量只能显示指定初始化。</p>
<h3 id="2-执行‘宏替换’的变量"><a href="#2-执行‘宏替换’的变量" class="headerlink" title="2.执行‘宏替换’的变量"></a>2.执行‘宏替换’的变量</h3><p>在定义时final类变量指定了初始值，该初始值在编译时就被确定下来，这个final变量本质上已经不再是变量而是一个直接量，如果被赋的表达式只是基木的算术表达式或字符串连接运算，没有访问普通变量，调用方法，Java编译器同样会将这种final变量当成“宏变量”来处理。</p>
<h3 id="3-final方法不能重写"><a href="#3-final方法不能重写" class="headerlink" title="3.final方法不能重写"></a>3.final方法不能重写</h3><p>如果父类中某个方法使用了final修饰符进行修饰，那么这个方法将不可能被他的子类访问到，因此这个方法也不可能被他的子类重写。从这个层面说，private和final同时修饰某个方法没有太大的意义，但是被java语法允许。</p>
<h3 id="4-内部类中的局部变量"><a href="#4-内部类中的局部变量" class="headerlink" title="4.内部类中的局部变量"></a>4.内部类中的局部变量</h3><p>Java要求所有被内部类访问的局部变量都使用final修饰也是有其原因的。对于井通的局部变量而言，‘它的作用域就停留在该方法内，当方法执行结束后，该局部变量也随之消失;但内部类则可能产生隐式的“闭包(Closure)”，闭包将使得局部变量脱离它所在的方法继续存在。</p>
]]></content>
    
    <summary type="html">
    
      Java程序的变量大体可分为成员变量和局部变量。其中局部变量可分为如下二类。
    
    </summary>
    
      <category term="java基础" scheme="http://jack921.win/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://jack921.win/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Flexboxlayout使用详解</title>
    <link href="http://jack921.win/2017/07/27/Flexboxlayout%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jack921.win/2017/07/27/Flexboxlayout使用详解/</id>
    <published>2017-07-26T16:38:14.000Z</published>
    <updated>2017-07-26T16:42:25.716Z</updated>
    
    <content type="html"><![CDATA[<p>对于学习React Native或者前端的同学肯定对Flexbox 的有所了解，因为这是前端领域CSS的一种布局方案，现在google也开源了类似前端Flexbox的项目叫Flexboxlayout，这样android也可以用Flexboxlayout实现类似前端Flexbox的布局。</p>
<p>首先Flexboxlayout有5大布局属性分别是flexDirection,flexWrap,justifyContent ,alignItems ,alignContent,这5个布局属性又对应着不同参数以实现不用的布局效果。具体如下:</p>
<p>1.flexDirection 属性决定主轴的方向（即项目的排列方向）。<br>对应的参数和效果图如下:</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<p>实例代码如下,而我们要改的是<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">```	</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">        android:id=&quot;@+id/flexbox_layout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        app:flexDirection=&quot;row_reverse&quot;&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview1&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color1&quot;</div><div class="line">            android:text=&quot;textview1&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview2&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color2&quot;</div><div class="line">            android:text=&quot;textview2&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview3&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color3&quot;</div><div class="line">            android:text=&quot;textview3&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview4&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color4&quot;</div><div class="line">            android:text=&quot;textview4&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview5&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color5&quot;</div><div class="line">            android:text=&quot;textview5&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview6&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color5&quot;</div><div class="line">            android:text=&quot;textview6&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>1.当flexDirecition的参数为column时,即app:flexDirection=”column”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-e05d0691dc38f13e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexDirection_column.PNG"></p>
<p>2.当flexDirecition的参数为column时,即app:flexDirection=”column_reverse”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-1ad53c542dcd2ecf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexDirection_column_reverse.PNG"></p>
<p>3.当flexDirecition的参数为column时,即app:flexDirection=”row”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-e9ec2a7ade6d9f4a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexDirection_row_reverse.PNG"></p>
<p>4.当flexDirecition的参数为column时,即app:flexDirection=”row_reverse”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-0d3dd07946022f75.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexDirecition_row.PNG"></p>
<p>2.flexWrap在默认情况下 Flex 跟 LinearLayout 一样，都是不带换行排列的，但是flexWrap属性可以支持换行排列。对应的参数和效果图如下:</p>
<ul>
<li>nowrap:不换行</li>
<li>wrap：按正常方向换行</li>
<li>wrap-reverse：按反方向换行</li>
</ul>
<p>实例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">        android:id=&quot;@+id/flexbox_layout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        app:flexWrap=&quot;wrap&quot;&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview1&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color1&quot;</div><div class="line">            android:text=&quot;textview1&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview2&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color2&quot;</div><div class="line">            android:text=&quot;textview2&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview3&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color3&quot;</div><div class="line">            android:text=&quot;textview3&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview4&quot;</div><div class="line">            android:layout_width=&quot;150dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color4&quot;</div><div class="line">            android:text=&quot;textview4&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview5&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color5&quot;</div><div class="line">            android:text=&quot;textview5&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview6&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color5&quot;</div><div class="line">            android:text=&quot;textview6&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>我们通过修改<code>app:flexWrap=&quot;wrap&quot;</code>来实现不同的效果</p>
<p>1.当flexWrap的参数为wrap时,即app:flexWrap=”wrap”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-6f5a099703e015ff.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexWrap_wrap.PNG"></p>
<p>2.当flexWrap的参数为nowrap时,即app:flexWrap=”nowrap”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c5c6fcaa11fb75b7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexWrap_nowrap.PNG"></p>
<p>3.当flexWrap的参数为wrap_reverse时,即app:flexWrap=”wrap_reverse”: </p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-29ab3c90b7c4471b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flexWrap_wrap_reverse.PNG"></p>
<p>3.justifyContent属性定义了项目在主轴上的对齐方式。看解释有点含糊，没关系，待会效果图一目了然，justifyContent对应的参数和含义如下：</p>
<ul>
<li>flex_start（默认值）：左对齐 </li>
<li>flex-end：右对齐 </li>
<li>center： 居中 </li>
<li>space-between：两端对齐，项目之间的间隔都相等 </li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<p>实例代码如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">        android:id=&quot;@+id/flexbox_layout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        app:justifyContent=&quot;flex_start&quot;&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview1&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color1&quot;</div><div class="line">            android:text=&quot;textview1&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview2&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color2&quot;</div><div class="line">            android:text=&quot;textview2&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview3&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color3&quot;</div><div class="line">            android:text=&quot;textview3&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>1.当justifyContent的参数为flex_start时,即app:justifyContent=”flex_start”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a3caa97804088183.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="justifyContent-flex_start.PNG"></p>
<p>2.当justifyContent的参数为flex_end时,即app:justifyContent=”flex_end”:<br><img src="http://upload-images.jianshu.io/upload_images/925576-40db9bfe0b29624e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="justifyContent-flex_end.PNG"></p>
<p>3.当justifyContent的参数为center时,即app:justifyContent=”center”:<br><img src="http://upload-images.jianshu.io/upload_images/925576-83c77f1359bc84c3.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="justifyContent-center.PNG"></p>
<p>4.当justifyContent的参数为space_around时,即app:justifyContent=”space_around”:<br><img src="http://upload-images.jianshu.io/upload_images/925576-9f5412e9e9bbf522.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="justifyContent-space-around.PNG"></p>
<p>5.当justifyContent的参数为space-between时,即app:justifyContent=”space-between”:<br><img src="http://upload-images.jianshu.io/upload_images/925576-d4c0386ff33d20f9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="justifyContent-space_between.PNG"></p>
<p>4.alignItems属性定义项目在副轴轴上如何对齐。(一般默认一般默认情况下，主轴是从左往右的直线，而对应的副轴就是从上忘下)，alignItems对应的参数和含义如下：</p>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<p>实例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">        android:id=&quot;@+id/flexbox_layout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        app:alignItems=&quot;flex_start&quot;&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview1&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color1&quot;</div><div class="line">            android:text=&quot;textview1&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview2&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color2&quot;</div><div class="line">            android:text=&quot;textview2&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview3&quot;</div><div class="line">            android:layout_width=&quot;80dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color3&quot;</div><div class="line">            android:text=&quot;textview3&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>1.当alignItems的参数为stretch时,即app:alignItems=”stretch”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-57359490c35bdd42.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignItems-stretch.PNG"></p>
<p>2.当alignItems的参数为flex_start时,即app:alignItems=”flex_start”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-b7fb4734ed67cdd4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignItems-flex_start.PNG"></p>
<p>3.当alignItems的参数为flex_end时,即app:alignItems=”flex_end”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-ac05c629186bb301.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignItems-flex_end.PNG"></p>
<p>4.当alignItems的参数为center时,即app:alignItems=”center”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c831cafc1b6f68f4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignItems-center.PNG"></p>
<p>5.当alignItems的参数为baseline时,即app:alignItems=”baseline”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-526f0bd3c78642f7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignItems-baseline.PNG"></p>
<p>5.alignContent属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用，其属性如下：</p>
<ul>
<li>flex-start：与交叉轴的起点对齐。 </li>
<li>flex-end：与交叉轴的终点对齐。 </li>
<li>center：与交叉轴的中点对齐。 </li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍. </li>
<li>（默认值）：轴线占满整个交叉轴。</li>
</ul>
<p>实例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">        android:id=&quot;@+id/flexbox_layout&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        app:flexWrap=&quot;wrap&quot;</div><div class="line">        app:alignContent=&quot;flex_start&quot;&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview1&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color1&quot;</div><div class="line">            android:text=&quot;textview1&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview2&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color2&quot;</div><div class="line">            android:text=&quot;textview2&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview3&quot;</div><div class="line">            android:layout_width=&quot;90dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color3&quot;</div><div class="line">            android:text=&quot;textview3&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview4&quot;</div><div class="line">            android:layout_width=&quot;60dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color1&quot;</div><div class="line">            android:text=&quot;textview4&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview5&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color2&quot;</div><div class="line">            android:text=&quot;textview5&quot;/&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/textview6&quot;</div><div class="line">            android:layout_width=&quot;90dp&quot;</div><div class="line">            android:layout_height=&quot;80dp&quot;</div><div class="line">            android:gravity=&quot;center&quot;</div><div class="line">            android:background=&quot;@color/color3&quot;</div><div class="line">            android:text=&quot;textview6&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>1.当alignContent的参数为stretch时,即app:alignContent=”stretch”: </p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-fc73cb1a83eb4290.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignContent-stretch.PNG"></p>
<p>2.当alignContent的参数为flex_start时,即app:alignContent=”flex_start”: </p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9980960275a17962.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignContent-flex_start.PNG"></p>
<p>3.当alignContent的参数为flex_end时,即app:alignContent=”flex_end”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-b3fcb7a4c51f8f65.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignContent-flex_end.PNG"></p>
<p>4.当alignContent的参数为center时,即app:alignContent=”center”:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-86ae1c287f4b41ca.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignContent-center.PNG"></p>
<p>5.当alignContent的参数为space_around时,即app:alignContent=”space_around”: </p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-74d98305e68428e9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignContent-space_around.PNG"></p>
<p>6.当alignContent的参数为space_between时,即app:alignContent=”space_between”:  </p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-92d4375d760be0d8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="alignContent-space_between.PNG"></p>
<p>除了这些主要属性之外，还有其他的属性：</p>
<ol>
<li>layout_flexGrow(表示元素的权重属性)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">    android:layout_width=&quot;300dp&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;0dp&quot;</div><div class="line">        android:layout_height=&quot;48dp&quot;</div><div class="line">        android:background=&quot;@color/color1&quot;</div><div class="line">        app:layout_flexGrow=&quot;2&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;0dp&quot;</div><div class="line">        android:layout_height=&quot;48dp&quot;</div><div class="line">        android:background=&quot;@color/color2&quot;</div><div class="line">        app:layout_flexGrow=&quot;1&quot;/&gt;</div><div class="line">&lt;/com.google.android.flexbox.FlexboxLayout&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-1a6ee84788331828.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout_flexGrow.PNG"></p>
<p>2.layout_flexShrink(表示空间不足时子控件的缩放比例，0表示不缩放)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> &lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">     android:layout_width=&quot;300dp&quot;</div><div class="line">     android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line"></div><div class="line">     &lt;TextView</div><div class="line">id=&quot;@+id/text1&quot;</div><div class="line">         android:layout_width=&quot;400dp&quot;</div><div class="line">         android:layout_height=&quot;48dp&quot;</div><div class="line">         app:layout_flexShrink=&quot;2&quot;</div><div class="line">         android:background=&quot;@color/color1&quot;/&gt;</div><div class="line"></div><div class="line">     &lt;TextView</div><div class="line">id=&quot;@+id/text2&quot;</div><div class="line">         app:layout_flexShrink=&quot;1&quot;</div><div class="line">         android:layout_width=&quot;300dp&quot;</div><div class="line">         android:layout_height=&quot;48dp&quot;</div><div class="line">         android:background=&quot;@color/color2&quot;/&gt;</div><div class="line"> &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div></pre></td></tr></table></figure></p>
<p>总的300dp因为宽度不足，所以text1就缩小原来的三分之二，text2缩小为原来的三分之一。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-cbd5cadae2597340.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout_flexShrink.PNG"></p>
<p>3.layout_order(可以控制排列的顺序，负值在前，正值灾后，按照从小到大的顺序依次排列)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">       android:layout_width=&quot;match_parent&quot;</div><div class="line">       android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line"></div><div class="line">       &lt;TextView</div><div class="line">           android:layout_width=&quot;100dp&quot;</div><div class="line">           android:layout_height=&quot;48dp&quot;</div><div class="line">           app:layout_order=&quot;2&quot;</div><div class="line">           android:text=&quot;color1&quot;</div><div class="line">           android:gravity=&quot;center&quot;</div><div class="line">           android:background=&quot;@color/color1&quot;/&gt;</div><div class="line"></div><div class="line">       &lt;TextView</div><div class="line">           android:layout_width=&quot;100dp&quot;</div><div class="line">           android:layout_height=&quot;48dp&quot;</div><div class="line">           app:layout_order=&quot;1&quot;</div><div class="line">           android:text=&quot;color2&quot;</div><div class="line">           android:gravity=&quot;center&quot;</div><div class="line">           android:background=&quot;@color/color2&quot;/&gt;</div><div class="line"></div><div class="line">   &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9929705b91523682.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout_order.PNG"></p>
<p>4.layout_flexBasisPercent(属性定义了在分配多余空间之前，子元素占据的main size主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即子元素的本来大小。)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">      android:layout_width=&quot;match_parent&quot;</div><div class="line">      android:layout_height=&quot;wrap_content&quot;</div><div class="line">      app:flexWrap=&quot;wrap&quot;&gt;</div><div class="line"></div><div class="line">      &lt;TextView</div><div class="line">          android:id=&quot;@+id/flexbox&quot;</div><div class="line">          android:layout_width=&quot;100dp&quot;</div><div class="line">          android:layout_height=&quot;100dp&quot;</div><div class="line">          android:text=&quot;text1&quot;</div><div class="line">          android:gravity=&quot;center&quot;</div><div class="line">          android:background=&quot;@color/color1&quot;/&gt;</div><div class="line"></div><div class="line">      &lt;TextView</div><div class="line">          android:layout_width=&quot;100dp&quot;</div><div class="line">          android:layout_height=&quot;100dp&quot;</div><div class="line">          android:text=&quot;text2&quot;</div><div class="line">          android:gravity=&quot;center&quot;</div><div class="line">          app:layout_flexBasisPercent=&quot;50%&quot;</div><div class="line">          android:background=&quot;@color/color2&quot;/&gt;</div><div class="line"></div><div class="line">  &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-54c66ac3d099057b.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout_flexBasisPercent.PNG"></p>
<p>5.layout_alignSelf(属性允许单个子元素有与其他子元素不一样的对齐方式，可覆盖 alignItems 属性。默认值为auto，表示继承父元素的 alignItems 属性，如果没有父元素，则等同于stretch。)</p>
<ul>
<li>auto (default)</li>
<li>flex_start</li>
<li>flex_end</li>
<li>center</li>
<li>baseline</li>
<li>stretch</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.flexbox.FlexboxLayout</div><div class="line">       android:layout_width=&quot;match_parent&quot;</div><div class="line">       android:layout_height=&quot;match_parent&quot;</div><div class="line">       app:alignItems=&quot;flex_start&quot;&gt;</div><div class="line"></div><div class="line">       &lt;TextView</div><div class="line">           android:layout_width=&quot;100dp&quot;</div><div class="line">           android:layout_height=&quot;100dp&quot;</div><div class="line">           android:text=&quot;text1&quot;</div><div class="line">           android:gravity=&quot;center&quot;</div><div class="line">           android:background=&quot;@color/color1&quot;/&gt;</div><div class="line"></div><div class="line">       &lt;TextView</div><div class="line">           android:layout_width=&quot;100dp&quot;</div><div class="line">           android:layout_height=&quot;100dp&quot;</div><div class="line">           android:text=&quot;text2&quot;</div><div class="line">           android:gravity=&quot;center&quot;</div><div class="line">           app:layout_alignSelf=&quot;center&quot;</div><div class="line">           android:background=&quot;@color/color2&quot;/&gt;</div><div class="line"></div><div class="line">       &lt;TextView</div><div class="line">           android:layout_width=&quot;100dp&quot;</div><div class="line">           android:layout_height=&quot;100dp&quot;</div><div class="line">           android:text=&quot;text2&quot;</div><div class="line">           android:gravity=&quot;center&quot;</div><div class="line">           android:background=&quot;@color/color3&quot;/&gt;</div><div class="line"></div><div class="line">   &lt;/com.google.android.flexbox.FlexboxLayout&gt;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-073472c9cc07e432.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="layout_alignSelf.PNG"></p>
<p>最后就是FlexboxLayoutManager，这也是最新FlexBoxLayout新出的功能，以前我们用流式布局的时候大部分不自己实现的话都是用第三方的库实现，现在有了这个就可以轻松的实现流式布局，并FlexboxLayoutManager<br>就像LinearLayoutManager等那样可以用RecyclerView加载，即可以不用一次全部加载又可以轻松加载多条数据。使用FlexboxLayoutManager很简单，跟一般的布局控制器没有区别，实例代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RecyclerView recycler_view=......</div><div class="line">FlexboxLayoutManager flexboxLayoutManager=new </div><div class="line">FlexboxLayoutManager(this);</div><div class="line">flexboxLayoutManager.setFlexWrap(FlexWrap.WRAP);</div><div class="line">recycler_view.setLayoutManager(flexboxLayoutManager);</div><div class="line">mainAdapter=new MainAdapter(this);</div><div class="line">recycler_view.setAdapter(mainAdapter);</div></pre></td></tr></table></figure></p>
<p>我们通过FlexboxLayoutManager就可以设置FlexBoxLayout的各种属性，而上面的MainAdapter就是和普通的Adapter没区别。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c53b26bd9bf9b82c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="recyclerview.PNG"></p>
]]></content>
    
    <summary type="html">
    
      对于学习React Native或者前端的同学肯定对Flexbox 的有所了解，因为这是前端领域CSS的一种布局方案，现在google也开源了类似前端Flexbox的项目叫Flexboxlayout，这样android也可以用Flexboxlayout实现类似前端Flexbox的布局。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jack921.win/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>高仿网易严选底部弹出菜单</title>
    <link href="http://jack921.win/2017/06/24/%E9%AB%98%E4%BB%BF%E7%BD%91%E6%98%93%E4%B8%A5%E9%80%89%E5%BA%95%E9%83%A8%E5%BC%B9%E5%87%BA%E8%8F%9C%E5%8D%95/"/>
    <id>http://jack921.win/2017/06/24/高仿网易严选底部弹出菜单/</id>
    <published>2017-06-24T14:42:00.000Z</published>
    <updated>2017-06-24T14:46:24.267Z</updated>
    
    <content type="html"><![CDATA[<p>  在网易严选的看东西的时候在商品详情页里看到他的底部弹出菜单，本能反应是想用DottomSheetDialog或者PopupWindow来实现，可是发现实现不了他那种效果，于是就自己模仿一个像严选这样的底部弹出菜单。</p>
<p>  不管是DottomSheetDialog或者PopupWindow他们的阴影背景都是全部覆盖的，这就造成除了菜单内容的View之外其他都是阴影的，而严选不是这样的。唠叨到此，首先展示效果图如下：<br>  <img src="http://upload-images.jianshu.io/upload_images/925576-ce7cb61b6f2943b4.gif?imageMogr2/auto-orient/strip" alt="show.gif"></p>
<p> 是不是还可以呢，由于代码量不多却注释详细，所以先贴出代码再一一详说:</p>
<p> BottomPopupWindowView类：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"> public class BottomPopupWindowView extends LinearLayout&#123;</div><div class="line"></div><div class="line">    private AnimatorListener animatorListener;</div><div class="line">    //底部内容的View</div><div class="line">    private FrameLayout base_view;</div><div class="line">    //内容的View</div><div class="line">    private FrameLayout content_view;</div><div class="line">    //背景的View</div><div class="line">    private RelativeLayout popup_bg;</div><div class="line">    //xml加载的View</div><div class="line">    private View bottomPopouView;</div><div class="line">    //外部加载的内容View</div><div class="line">    private View contentView;</div><div class="line">    //外部加载的底部内容View</div><div class="line">    private View baseView;</div><div class="line">    //手势的最小值</div><div class="line">    private float minVelocity=0;</div><div class="line">    //加载一次的判断值</div><div class="line">    private boolean mDrawable=true;</div><div class="line"></div><div class="line">    public void setAnimatorListener(AnimatorListener animatorListener) &#123;</div><div class="line">        this.animatorListener = animatorListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setBaseView(View baseView)&#123;</div><div class="line">        this.baseView=baseView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContextView(View view)&#123;</div><div class="line">        this.contentView=view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setContentView(int id)&#123;</div><div class="line">        this.contentView=LayoutInflater.from(getContext()).inflate(id,null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BottomPopupWindowView(Context context) &#123;</div><div class="line">        this(context,null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BottomPopupWindowView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        this(context,attrs,0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public BottomPopupWindowView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        //初始化各种数值</div><div class="line">        minVelocity=ViewConfiguration.get(getContext()).getScaledTouchSlop();</div><div class="line">        bottomPopouView= LayoutInflater.from(getContext()).inflate(R.layout.layout_bottom_popup,null);</div><div class="line">        base_view=(FrameLayout)bottomPopouView.findViewById(R.id.bottom_view);</div><div class="line">        content_view=(FrameLayout)bottomPopouView.findViewById(R.id.content_view);</div><div class="line">        popup_bg=(RelativeLayout)bottomPopouView.findViewById(R.id.popup_bg);</div><div class="line">        //把整个View都加载在LinearLayout里以显示出来</div><div class="line">        addView(bottomPopouView);</div><div class="line">        //背景颜色监听</div><div class="line">        popup_bg.setOnClickListener(new OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                disMissPopupView();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        //屏蔽内容区域点击事件</div><div class="line">        content_view.setOnClickListener(new OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view)&#123;&#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        //屏蔽底部内容区域点击事件</div><div class="line">        base_view.setOnClickListener(new OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View view)&#123;&#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        //内容区域判断是否向下，手势向下就关闭弹框</div><div class="line">        content_view.setOnTouchListener(new OnTouchListener() &#123;</div><div class="line">            @Override</div><div class="line">            public boolean onTouch(View view, MotionEvent motionEvent) &#123;</div><div class="line">                float y1=0,y2=0;</div><div class="line">                if(motionEvent.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                    y1 = motionEvent.getY();</div><div class="line">                &#125;</div><div class="line">                if(motionEvent.getAction() == MotionEvent.ACTION_UP)&#123;</div><div class="line">                    y2 = motionEvent.getY();</div><div class="line">                    if((y2-y1)&gt;minVelocity)&#123;</div><div class="line">                        disMissPopupView();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        if(mDrawable&amp;&amp;baseView!=null)&#123;</div><div class="line">            //刚开始加载底部内容区域，只需一次就行，多次报错</div><div class="line">            base_view.addView(baseView);</div><div class="line">            mDrawable=false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void showPopouView()&#123;</div><div class="line">        if(contentView!=null)&#123;</div><div class="line">            //开始动画数据</div><div class="line">            startAnimation();</div><div class="line">            //开启背景颜色的渐变动画</div><div class="line">            popup_bg.setVisibility(View.VISIBLE);</div><div class="line">            popup_bg.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bp_bottom_bg_in));</div><div class="line">            //把这个区域全部显示出来</div><div class="line">            ((BottomPopupWindowView)this).setLayoutParams(new RelativeLayout.LayoutParams(</div><div class="line">                    RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT));</div><div class="line">            //假如内容区域</div><div class="line">            content_view.addView(contentView,0);</div><div class="line">            content_view.setVisibility(View.VISIBLE);</div><div class="line">            //开启内容区域动画</div><div class="line">            content_view.setAnimation(AnimationUtils.loadAnimation(getContext(),R.anim.bp_bottom_view_in));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void disMissPopupView()&#123;</div><div class="line">        //开始关闭动画数据</div><div class="line">        endAnimation();</div><div class="line">        //开启内容区域动画</div><div class="line">        content_view.setVisibility(View.GONE);</div><div class="line">        Animation animation=AnimationUtils.loadAnimation(getContext(),R.anim.bp_bottom_view_out);</div><div class="line">        animation.setAnimationListener(new Animation.AnimationListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animation animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animation animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animation animation) &#123;</div><div class="line">                //等内容区域动画结束后，清楚所有View</div><div class="line">                content_view.removeAllViews();</div><div class="line">                //开启背景颜色的渐变动画</div><div class="line">                popup_bg.setVisibility(View.GONE);</div><div class="line">                popup_bg.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bp_bottom_bg_out));</div><div class="line">                //把整个控件的大小恢复到底部View区域的大小</div><div class="line">                RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams(</div><div class="line">                        RelativeLayout.LayoutParams.MATCH_PARENT,getViewHeight((BottomPopupWindowView)BottomPopupWindowView.this));</div><div class="line">                layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,-1);</div><div class="line">                ((BottomPopupWindowView)BottomPopupWindowView.this).setLayoutParams(layoutParams);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        //开始动画</div><div class="line">        content_view.setAnimation(animation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //获取View的高度</div><div class="line">    public int getViewHeight(View view)&#123;</div><div class="line">        int width =View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);</div><div class="line">        int height =View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED);</div><div class="line">        view.measure(width,height);</div><div class="line">        return view.getMeasuredHeight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //开始动画数据变化</div><div class="line">    public void startAnimation()&#123;</div><div class="line">        ValueAnimator valueAnimator = ValueAnimator.ofInt(0,40);</div><div class="line">        valueAnimator.setDuration(250);</div><div class="line">        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;</div><div class="line">                if(animatorListener!=null)&#123;</div><div class="line">                    animatorListener.startValue((int) valueAnimator.getAnimatedValue());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        valueAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //结束动画数值变化</div><div class="line">    public void endAnimation() &#123;</div><div class="line">        ValueAnimator valueAnimator = ValueAnimator.ofInt(40,0);</div><div class="line">        valueAnimator.setDuration(250);</div><div class="line">        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;</div><div class="line">                if(animatorListener!=null)&#123;</div><div class="line">                    animatorListener.endValue((int) valueAnimator.getAnimatedValue());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        valueAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对应的加载的xml布局是：<br>layout_bottom_popou.xml如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:background=&quot;#707A7A7A&quot;&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:id=&quot;@+id/popup_bg&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:background=&quot;#707A7A7A&quot;</div><div class="line">        android:layout_above=&quot;@+id/bottom_view&quot;&gt;&lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/content_view&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_above=&quot;@+id/bottom_view&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">    &lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/bottom_view&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_alignParentBottom=&quot;true&quot;&gt;&lt;/FrameLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p>
<p>1.在BottomPopupWindowView是继承LinearLayout，而layout_bottom_popou.xml是这整个BottomPopupWindowView里的骨架，然后在BottomPopupWindowView初始化的时候通过addView()来加载整个骨架布局。在onDraw()里只需加载一次baseView就可以了，不然后重复加载导致报错。这样就初始化成功了，刚开始只会加载baseView的界面，就相当于严选最下面的购物车立即购买等界面。<br><img src="http://upload-images.jianshu.io/upload_images/925576-b6d39da3e30437a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="baseView.png"></p>
<p>2.当调用showPopouView()时显示菜单的。startAnimation()方法只是为了产生动画的数据。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">popup_bg.setVisibility(View.VISIBLE);</div><div class="line">popup_bg.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bp_bottom_bg_in)); ```只是为了开启背景渐变的动画没什么说的。最重要的是显示菜单实现是把BottomPopupWindowView的大小扩展到全屏，所以设置```((BottomPopupWindowView)this).setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT)); ```,然后把弹出菜单的View即contentView装进content_view即可，然后开启弹出动画就实现了。</div><div class="line"></div><div class="line">3.最后是disMissPopupView()方法关闭弹窗。endAnimation()方法只是为了产生动画的数据。再启动内容域View即content_View的退出动画，在动画结束后用```content_view.removeAllViews();</div></pre></td></tr></table></figure></p>
<p>起初菜单内容，再像上面一样开启背景颜色渐变动画，最后只需使BottomPopupWindowView恢复原来的baseView的大小及可以了，具体如下:<figure class="highlight plain"><figcaption><span>layoutParams=new RelativeLayout.LayoutParams(</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">                        RelativeLayout.LayoutParams.MATCH_PARENT,getViewHeight((BottomPopupWindowView)BottomPopupWindowView.this));</div><div class="line">                layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,-1);</div><div class="line">                ((BottomPopupWindowView)BottomPopupWindowView.this).setLayoutParams(layoutParams); ```。这就是核心的代码功能了，代码量不多具体细节看上面的源码。</div><div class="line"></div><div class="line"></div><div class="line">有人或许会问返回动画的数据有什么用，很简单就是为了实现严选菜单框出来时整个上面详情的缩放。具体看如下demo,首先给出界面xml,如下:</div></pre></td></tr></table></figure></p>
<p>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<relativelayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent"><br><br>    <linearlayout android:id="@+id/main_view" android:layout_width="match_parent" android:layout_height="match_parent" android:background="@color/colorAccent" android:orientation="vertical"><br><br>        <imageview android:id="@+id/banner_img" android:layout_width="match_parent" android:layout_height="300dp" android:scaletype="fitXY" android:src="@mipmap/banner"><br><br>        <view android:layout_width="match_parent" android:layout_height="0.1dp" android:background="@color/colorPrimary"></view><br><br>        <relativelayout android:id="@+id/guige" android:layout_width="match_parent" android:layout_height="50dp" android:background="#ffffff"><br><br>            <textview android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_centervertical="true" android:layout_marginleft="15dp" android:textsize="15dp" android:text="规格数量选择"><br><br>            <imageview android:layout_width="20dp" android:layout_height="20dp" android:layout_alignparentright="true" android:layout_centervertical="true" android:layout_marginright="15dp" android:src="@mipmap/ic_jiantou"><br><br>        </imageview></textview></relativelayout>

<pre><code>    &lt;View
        android:layout_width=&quot;match_parent&quot;
        android:layout_height=&quot;0.1dp&quot;
        android:background=&quot;@color/colorPrimary&quot;&gt;&lt;/View&gt;


&lt;/LinearLayout&gt;

&lt;com.jack.bottompopupwindowview.BottomPopupWindowView
    android:id=&quot;@+id/bottom_popup&quot;
    android:layout_width=&quot;match_parent&quot;
    android:layout_height=&quot;50dp&quot;
    android:background=&quot;@android:color/transparent&quot;
    android:layout_alignParentBottom=&quot;true&quot;&gt;
&lt;/com.jack.bottompopupwindowview.BottomPopupWindowView&gt;
</code></pre><p></p></imageview></linearlayout></relativelayout><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这就是上面效果图的界面布局，没什么可以说的，再看事例代码如下：</div></pre></td></tr></table></figure><p></p>
<p>public class MainActivity extends AppCompatActivity implements View.OnClickListener, AnimatorListener {</p>
<pre><code>private BottomPopupWindowView bottomPopupWindowView;
private View contentView;
private View bottomView;
private LinearLayout mainView;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    mainView=(LinearLayout)findViewById(R.id.main_view);

    bottomView=LayoutInflater.from(this).inflate(R.layout.layout_bottom_view,null);
    (bottomView.findViewById(R.id.promptly_buy)).setOnClickListener(this);
    (findViewById(R.id.guige)).setOnClickListener(this);
    bottomPopupWindowView=(BottomPopupWindowView)findViewById(R.id.bottom_popup);
    bottomPopupWindowView.setOnClickListener(this);
    bottomPopupWindowView.setBaseView(bottomView);
    contentView=LayoutInflater.from(this).inflate(R.layout.layout_content_view,null);
    bottomPopupWindowView.setContextView(contentView);
    (contentView.findViewById(R.id.ic_cancel)).setOnClickListener(this);
    bottomPopupWindowView.setAnimatorListener(this);
}

@Override
public void onClick(View view) {
    switch(view.getId()){
        case R.id.promptly_buy:
        case R.id.ic_cancel:
            bottomPopupWindowView.disMissPopupView();
            break;
        case R.id.guige:
            bottomPopupWindowView.showPopouView();
            break;
    }
}

@Override
public void startValue(int value) {
    setMargins (mainView,value-10,value,value-10,value);
}

@Override
public void endValue(int value) {
    setMargins (mainView,value,value,value,value);
}

public static void setMargins (View v, int l, int t, int r, int b) {
    if (v.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) v.getLayoutParams();
        p.setMargins(l, t, r, b);
        v.requestLayout();
    }
}
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">其中设置内容菜单的View</div><div class="line">```BottomPopupWindowView.setContextView(bottomView);</div></pre></td></tr></table></figure></p>
<p>设置没有显示菜单时候显示的View(注:bottomView的高度要和BottomPopupWindowView的高度一样，具体看demo)<br><code>BottomPopupWindowView.setBaseView(bottomView);</code>而回调的<br> public void startValue(int value)和public void endValue(int value)设置动画监听放回的数据，以便根据数据实现动画，严选的弹出和显示商品详情动画很简单就是不断设设置View的间距就可以了。</p>
<p>最后附上demo和源码链接<a href="https://github.com/jack921/BottomPopupWindowDemo" target="_blank" rel="external">https://github.com/jack921/BottomPopupWindowDemo</a></p>
]]></content>
    
    <summary type="html">
    
      在网易严选的看东西的时候在商品详情页里看到他的底部弹出菜单，本能反应是想用DottomSheetDialog或者PopupWindow来实现，可是发现实现不了他那种效果，于是就自己模仿一个像严选这样的底部弹出菜单。不管是DottomSheetDialog或者PopupWindow他们的阴影背景都是全部覆盖的，这就造成除了菜单内容的View之外其他都是阴影的，而严选不是这样的。
    
    </summary>
    
      <category term="Android自定义控件" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
    
      <category term="Android自定义控件" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>淘宝开源库VLayout实践</title>
    <link href="http://jack921.win/2017/05/23/%E6%B7%98%E5%AE%9D%E5%BC%80%E6%BA%90%E5%BA%93VLayout%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jack921.win/2017/05/23/淘宝开源库VLayout实践/</id>
    <published>2017-05-23T14:05:46.000Z</published>
    <updated>2017-05-23T14:08:40.241Z</updated>
    
    <content type="html"><![CDATA[<p>最近淘宝出了vlayout,刚开始看淘宝的文档的时候还是有点懵，后来自己也总结规划了一下，写了一个比较好看的demo，顺便在这里总结一下。</p>
<p>VLayout是什么，说白了就是用一个原生RecycelerView加上VLayout来实现在一个页面上比较复杂的布局并且有一个比较好的复用，在RecyclerView里同时有GridLayout布局，瀑布流布局，浮动布局等VLayout提供的九大布局，这也是淘宝客户端首页加载不同布局的方法。</p>
<p>好了，简单介绍到这里，首先我们先导入VLayout:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile (&apos;com.alibaba.android:vlayout:版本@aar&apos;) &#123;</div><div class="line">	transitive = true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的版本请看github里VLayout给出的版本号。现在最新是1.0.6<br>接着我们就可以开始引用VLayout了,VLayout的通用代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VirtualLayoutManager manager = new VirtualLayoutManager(this);</div><div class="line">recyclerview.setLayoutManager(manager);</div><div class="line">DelegateAdapter adapter =new DelegateAdapter(manager, true);</div></pre></td></tr></table></figure></p>
<ul>
<li>其中VirtualLayoutManager它继承自LinearLayoutManager；引入了 LayoutHelper 的概念，它负责具体的布局逻辑；VirtualLayoutManager管理了一系列LayoutHelper，将具体的布局能力交给LayoutHelper来完成。</li>
<li>DelegateAdapter是VLayout专门为LayoutHelper定制的Adapter，我们把装载有各种布局的LayoutHelper的Adapter放进DelegateAdapter里最后在RecyclerView.setAdapter(DelegateAdapter);就可以加载出复杂的布局。</li>
<li>或许你们会问什么是LayoutHelper，这个问题问得好，就是VLayout提供的九种默认通用布局，解耦所有的View和布局之间的关系: Linear, Grid, 吸顶, 浮动, 固定位置等具体,名称和功能如下:</li>
</ul>
<ol>
<li>LinearLayoutHelper: 线性布局</li>
<li>GridLayoutHelper: Grid布局， 支持横向的colspan</li>
<li>StaggeredGridLayoutHelper: 瀑布流布局，可配置间隔高度/宽度</li>
<li>FixLayoutHelper: 固定布局，始终在屏幕固定位置显示</li>
<li>ScrollFixLayoutHelper: 固定布局，但之后当页面滑动到该图片区域才显示, 可以用来做返回顶部或其他书签等</li>
<li>FloatLayoutHelper: 浮动布局，可以固定显示在屏幕上，但用户可以拖拽其位置</li>
<li>ColumnLayoutHelper: 栏格布局，都布局在一排，可以配置不同列之间的宽度比值</li>
<li>SingleLayoutHelper: 通栏布局，只会显示一个组件View</li>
<li>OnePlusNLayoutHelper: 一拖N布局，可以配置1-5个子元素</li>
<li>StickyLayoutHelper: stikcy布局， 可以配置吸顶或者吸底</li>
</ol>
<p>这就是九种布局对应的类，我们可以用着九个类实现各种复杂的布局，下面我会一一介绍每个布局和效果，以便更直观的看到效果:</p>
<ul>
<li>LinearLayoutHelper: 线性布局，就是实现ListView的效果很简单，直接看代码:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class LinearLayoutHelperActivity extends Activity&#123;</div><div class="line">    public static RecyclerView recyclerview;</div><div class="line">    public static DelegateRecyclerAdapter delegateRecyclerAdapter;</div><div class="line">    public DelegateAdapter adapter;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_main);</div><div class="line">        recyclerview=(RecyclerView)findViewById(R.id.recyclerview);</div><div class="line">        VirtualLayoutManager manager = new VirtualLayoutManager(this);</div><div class="line">        recyclerview.setLayoutManager(manager);</div><div class="line">        adapter =new DelegateAdapter(manager, true);</div><div class="line"></div><div class="line">        adapter.addAdapter(init(this));</div><div class="line">        recyclerview.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static DelegateRecyclerAdapter init(Context context)&#123;</div><div class="line">        LinearLayoutHelper linearLayoutHelper=new LinearLayoutHelper();</div><div class="line">        //设置间隔高度</div><div class="line">        linearLayoutHelper.setDividerHeight(5);</div><div class="line">        //设置布局底部与下个布局的间隔</div><div class="line">        linearLayoutHelper.setMarginBottom(20);</div><div class="line">        //设置间距</div><div class="line">        linearLayoutHelper.setMargin(20,20,20,20);</div><div class="line">        delegateRecyclerAdapter=new DelegateRecyclerAdapter(context,linearLayoutHelper,&quot;LinearLayoutHelper&quot;);</div><div class="line">        return delegateRecyclerAdapter;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而DelegateRecyclerAdapter的代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class DelegateRecyclerAdapter extends DelegateAdapter.Adapter&#123;</div><div class="line">    public Context context;</div><div class="line">    private LayoutHelper helper;</div><div class="line">    private LayoutInflater inflater;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public DelegateRecyclerAdapter(Context context,LayoutHelper helper,String name)&#123;</div><div class="line">        this.inflater = LayoutInflater.from(context);</div><div class="line">        this.helper = helper;</div><div class="line">        this.context=context;</div><div class="line">        this.name=name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutHelper onCreateLayoutHelper() &#123;</div><div class="line">        return this.helper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        return new MyViewHolder(inflater.inflate(R.layout.layout_item,parent,false));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) &#123;</div><div class="line">            if(position%2==0)&#123;</div><div class="line">                holder.itemView.setBackgroundColor(0xaa3F51B5);</div><div class="line">            &#125;else&#123;</div><div class="line">                holder.itemView.setBackgroundColor(0xccFF4081);</div><div class="line">            &#125;</div><div class="line">        MyViewHolder myViewHolder=(MyViewHolder)holder;</div><div class="line">        myViewHolder.name.setText(name+position+&quot;&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return 9;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class MyViewHolder extends RecyclerView.ViewHolder&#123;</div><div class="line">        public TextView name;</div><div class="line">        public MyViewHolder(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line">            name=(TextView)itemView.findViewById(R.id.item_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要说的就是在Adapter类里我们需要继承Vlayout的DelegateAdapter.Adapter类，然后多回调onCreateLayoutHelper()方法，返回我们传进去的LayoutHelper类，其他的和普通的RecyclerView是一个样的。DelegateRecyclerAdapter在我们后面也有多次引用。其他要说的就是我们初始完LinearLayoutHelper后生产DelegateAdapter.Adapter类再赋给DelegateAdapter，然后然后RecyclerView在setAdapter()就这样。<br><img src="http://upload-images.jianshu.io/upload_images/925576-f49efd0bc8ef6598.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>GridLayoutHelper: Grid布局， 支持横向的colspan，也很简单，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static DelegateRecyclerAdapter init(Context context)&#123;</div><div class="line">        GridLayoutHelper gridLayoutHelper=new GridLayoutHelper(4);</div><div class="line">        //自定义设置某些位置的Item的占格数</div><div class="line">        gridLayoutHelper.setSpanSizeLookup(new GridLayoutHelper.SpanSizeLookup() &#123;</div><div class="line">            @Override</div><div class="line">            public int getSpanSize(int position) &#123;</div><div class="line">                if (position &gt;5) &#123;</div><div class="line">                    return 2;</div><div class="line">                &#125;else &#123;</div><div class="line">                    return 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        //是否填满可用区域</div><div class="line">        gridLayoutHelper.setAutoExpand(false);</div><div class="line">        delegateRecyclerAdapter=new DelegateRecyclerAdapter(context,gridLayoutHelper,&quot;GridLayoutHelper&quot;);</div><div class="line">        return delegateRecyclerAdapter;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其他代码很上面的一样。<br><img src="http://upload-images.jianshu.io/upload_images/925576-b249b0f828e85a4a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.PNG"></p>
<ul>
<li>StaggeredGridLayoutHelper: 瀑布流布局，可配置间隔高度/宽度,代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static StaggeredAdapter init(Context context)&#123;</div><div class="line">   StaggeredGridLayoutHelper staggeredGridLayoutHelper=new StaggeredGridLayoutHelper(3,20);</div><div class="line">   staggeredAdapter=new StaggeredAdapter(context,staggeredGridLayoutHelper,&quot;StaggeredGridLayoutHelper&quot;);</div><div class="line">   return staggeredAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在StaggeredAdapter里我们在onBindViewHolder里用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ViewGroup.LayoutParams layoutParams = ((MyViewholder) holder).text.getLayoutParams();</div><div class="line">layoutParams.height = 260 + position % 7 * 20;</div><div class="line">((MyViewholder) holder).text.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure></p>
<p>来实现高度不一致，效果如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-4f28984953b9a0a5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.PNG"></p>
<ul>
<li>FixLayoutHelper: 固定布局，始终在屏幕固定位置显示,代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static FixLayoutAdapter initFixLayoutHelper(Context context)&#123;</div><div class="line">    FixLayoutHelper fixLayoutHelper=new FixLayoutHelper(FixLayoutHelper.BOTTOM_LEFT, 200, 200);</div><div class="line">    FixLayoutAdapter fixLayoutAdapter=new FixLayoutAdapter(context,fixLayoutHelper,&quot;fixlayouthelp&quot;);</div><div class="line">    return fixLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了有FixLayoutHelper.BOTTOM_LEFT之外，还有FixLayoutHelper.TOP_LEFT，FixLayoutHelper.BOTTOM_RIGHT，FixLayoutHelper.TOP_RIGHT, 200,200分别对应偏移量x,y，效果如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-cb8265841bbfe5e5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img4.PNG"><br>fixlayouthelp区域块就是FixLayoutHelper了。</p>
<ul>
<li>ScrollFixLayoutHelper: 固定布局，但之后当页面滑动到该图片区域才显示, 可以用来做返回顶部或其他书签等，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static FixLayoutAdapter initScrollFixLayout(Context context)&#123;</div><div class="line">    ScrollFixLayoutHelper scrollFixLayoutHelper = new ScrollFixLayoutHelper(15,15);</div><div class="line">    //show_always:总是显示</div><div class="line">    //show_on_enter:当页面滚动到这个视图的位置的时候，才显示</div><div class="line">    //show_on_leave:当页面滚出这个视图的位置的时候显示</div><div class="line">    scrollFixLayoutHelper.setShowType(ScrollFixLayoutHelper.SHOW_ON_ENTER);</div><div class="line">    return new FixLayoutAdapter(context, scrollFixLayoutHelper,&quot;scrollfixlayouthelper&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，看效果：<br><img src="http://upload-images.jianshu.io/upload_images/925576-21ed8eff046b70e6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img5.PNG"><br>ScrollFixLayoutHelper继承自FixLayoutHelper，不同的是showType来决定这个布局的Item是否显示，可以用来做一些返回顶部之类的按钮，</p>
<ol>
<li>SHOW_ALWAYS：与FixLayoutHelper的行为一致，固定在某个位置； </li>
<li>SHOW_ON_ENTER：默认不显示视图，当页面滚动到这个视图的位置的时候，才显示； </li>
<li>SHOW_ON_LEAVE：默认不显示视图，当页面滚出这个视图的位置的时候显示；</li>
</ol>
<p>这里效果不明显，等集合所有布局之后大家就可以看很直观的效果</p>
<ul>
<li>FloatLayoutHelper: 浮动布局，可以固定显示在屏幕上，但用户可以拖拽其位置，代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static FixLayoutAdapter initFloatLayoutHelper(Context context)&#123;</div><div class="line">    FloatLayoutHelper floatLayoutHelper=new FloatLayoutHelper();</div><div class="line">    floatLayoutHelper.setDefaultLocation(20,250);</div><div class="line">    FixLayoutAdapter fixLayoutAdapter=new FixLayoutAdapter(context,floatLayoutHelper,&quot;floatlayouthelper&quot;);</div><div class="line">    return  fixLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d3c37f8602d1b4eb.gif?imageMogr2/auto-orient/strip" alt="img6.gif"></p>
<p>其中setDefaultLocation()使用来设置他的初始位置的，setAlignType（表示吸边时的基准位置，默认左上角，有四个取值，分别是TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT）</p>
<ul>
<li>ColumnLayoutHelper: 栏格布局，都布局在一排，可以配置不同列之间的宽度比值，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> public static ColumnLayoutAdapter initColumnLayout(Context context)&#123;</div><div class="line">    ColumnLayoutHelper columnLayoutHelper=new ColumnLayoutHelper();</div><div class="line">    columnLayoutHelper.setWeights(new float[]&#123;20,20,20,20,20&#125;);</div><div class="line">    columnLayoutHelper.setMarginBottom(20);</div><div class="line">    ColumnLayoutAdapter columnLayoutAdapter=new ColumnLayoutAdapter(context,columnLayoutHelper,&quot;ColumnLayoutHelper&quot;);</div><div class="line">    return columnLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ColumnLayoutHelper需要设置Weights，是一个float数组，总和为100，否则超出布局。效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-7a749e29d9653da2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img7.PNG"></p>
<ul>
<li>SingleLayoutHelper: 通栏布局，只会显示一个组件View，这里建议设置Adapter个数为1，因为他就只会显示一栏，假如有多个可能会出现一些问题，本人实测个数多时会出点问题。代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static SingleLayoutAdapter initSingleLayout(Context context)&#123;</div><div class="line">    SingleLayoutHelper singleLayoutHelper=new SingleLayoutHelper();</div><div class="line">    //设置间距</div><div class="line">    singleLayoutHelper.setMargin(20,20,20,20);</div><div class="line">    SingleLayoutAdapter singleLayoutAdapter=new SingleLayoutAdapter(context,singleLayoutHelper,&quot;SingleLayoutHelper&quot;);</div><div class="line">    return singleLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c0c41a40cc9c215d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img8.PNG"></p>
<ul>
<li>OnePlusNLayoutHelper: 一拖N布局，可以配置1-5个子元素,根据个数的不同所呈现的界面也是不一样的,不同个数效果如下：</li>
</ul>
<p>//个数为1</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a4c577ec374e57cd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为1.PNG"></p>
<p>//个数为2</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d874d7b8fa5d9971.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为2.PNG"></p>
<p>//个数为3</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9f228d43a65eeae7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为3.PNG"></p>
<p>//个数为4</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-74dc8792c026cb34.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为4.PNG"></p>
<p>//个数为5</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-29d47f791ba380b6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为5.PNG"></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> public static OnePlusNLayoutAdapter initOnePlusNLayout(Context context)&#123;</div><div class="line">    OnePlusNLayoutHelper onePlusNLayoutHelper=new OnePlusNLayoutHelper();</div><div class="line">    //设置布局底部与下个布局的间隔</div><div class="line">    onePlusNLayoutHelper.setMarginBottom(20);</div><div class="line">    OnePlusNLayoutAdapter onePlusNLayoutAdapter=new OnePlusNLayoutAdapter(context,onePlusNLayoutHelper,&quot;OnePlusNLayoutHelper&quot;);</div><div class="line">    return onePlusNLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>StickyLayoutHelper: stikcy布局， 可以配置吸顶或者吸底，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static StickyLayoutAdapter initStickyLayoutHelper(Context context)&#123;</div><div class="line">    StickyLayoutHelper stickyLayoutHelper=new StickyLayoutHelper();</div><div class="line">    return new StickyLayoutAdapter(context,stickyLayoutHelper);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-7511442ba426d5a1.gif?imageMogr2/auto-orient/strip" alt="img10.gif"></p>
<ul>
<li>最后假如只是单单加载其中的一个布局其实意义不大，VLayout只最大的意义在于加载多个布局并且保持一个很好的复用，所以我们把上面的所有布局一起加载起来，代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class AllActivity extends Activity&#123;</div><div class="line"></div><div class="line">    private RecyclerView recyclerview;</div><div class="line">    private DelegateAdapter delegateAdapter ;</div><div class="line">    final List&lt;DelegateAdapter.Adapter&gt; adapters = new LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_main);</div><div class="line">        recyclerview=(RecyclerView)findViewById(R.id.recyclerview);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void initView()&#123;</div><div class="line">        RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool();</div><div class="line">        recyclerview.setRecycledViewPool(viewPool);</div><div class="line">        viewPool.setMaxRecycledViews(0,10);</div><div class="line"></div><div class="line">        adapters.add(LinearLayoutHelperActivity.init(this));</div><div class="line">        adapters.add(ColumnLayoutHelperActivity.initColumnLayout(this));</div><div class="line">        adapters.add(GridLayoutHelperActivity.init(this));</div><div class="line">        adapters.add(FixLayoutHelperActivity.initFixLayoutHelper(this));</div><div class="line">        adapters.add(ScrollFixLayoutHelperActivity.initScrollFixLayout(this));</div><div class="line">        adapters.add(SingleLayoutHelperActivity.initSingleLayout(this));</div><div class="line">        adapters.add(OnePlusNLayoutHelperActivity.initOnePlusNLayout(this));</div><div class="line">        adapters.add(FloatLayoutHelperActivity.initFloatLayoutHelper(this));</div><div class="line">        adapters.add(StickyLayoutHelperActivity.initStickyLayoutHelper(this));</div><div class="line">        adapters.add(StaggeredGridLayoutHelperActivity.init(this));</div><div class="line"></div><div class="line">        VirtualLayoutManager manager = new VirtualLayoutManager(this);</div><div class="line">        recyclerview.setLayoutManager(manager);</div><div class="line">        delegateAdapter = new DelegateAdapter(manager);</div><div class="line"></div><div class="line">        delegateAdapter.setAdapters(adapters);</div><div class="line">        recyclerview.setAdapter(delegateAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要注意的是DelegateAdapter delegateAdapter = new DelegateAdapter(layoutManager, hasConsistItemType);里当hasConsistItemType=true的时候，不论是不是属于同一个子adapter，相同类型的item都能复用。表示它们共享一个类型。 当hasConsistItemType=false的时候，不同子adapter之间的类型不共享。</p>
<p>效果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-56a30a38b9907e92.gif?imageMogr2/auto-orient/strip" alt="img11.gif"></p>
<p>最后源码demo,代码都在这<a href="https://github.com/jack921/ProjectVLayout" target="_blank" rel="external">https://github.com/jack921/ProjectVLayout</a></p>
]]></content>
    
    <summary type="html">
    
      最近淘宝出了vlayout,刚开始看淘宝的文档的时候还是有点懵，后来自己也总结规划了一下，写了一个比较好看的demo，顺便在这里总结一下。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="android" scheme="http://jack921.win/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>高仿京东金融的数值滚动尺</title>
    <link href="http://jack921.win/2017/05/17/%E9%AB%98%E4%BB%BF%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D%E7%9A%84%E6%95%B0%E5%80%BC%E6%BB%9A%E5%8A%A8%E5%B0%BA/"/>
    <id>http://jack921.win/2017/05/17/高仿京东金融的数值滚动尺/</id>
    <published>2017-05-16T16:21:13.000Z</published>
    <updated>2017-05-16T16:22:40.134Z</updated>
    
    <content type="html"><![CDATA[<p>以前博客讲的大部分都是静态的自定义View的编写,其实无非就是“画画”画出一个好看的效果,而这篇博客写的是写一个动态的自定义控价,这里不仅需要”画”,还要各种事件和计算,废话不说现在就讲讲自定义数值滚动尺,这个用的还是满广的，例如京东金融的通过滚动尺选择金额等,而这次就是高仿京东金融的数值滚动尺。首先看看下效果图，如下<br><img src="http://upload-images.jianshu.io/upload_images/925576-d7ef373f4104a883.gif?imageMogr2/auto-orient/strip" alt="show.gif"></p>
<ul>
<li>首先先给你们各个变量的含义，以免在后面的讲解中不知变量的意思，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">//最小值</div><div class="line">private int minValue;</div><div class="line">//最大值</div><div class="line">private int maxValue;</div><div class="line">//当前值</div><div class="line">private int currentValue;</div><div class="line">//最小单位值</div><div class="line">private int minUnitValue;</div><div class="line">//最小当前值</div><div class="line">private int minCurrentValue;</div><div class="line">//字体大小</div><div class="line">private int textSize;</div><div class="line">//字体颜色</div><div class="line">private int textColor;</div><div class="line">//线颜色</div><div class="line">private int dividerColor;</div><div class="line">//指示线颜色</div><div class="line">private int indicatrixColor;</div><div class="line">//画线的画笔</div><div class="line">private Paint linePaint;</div><div class="line">//控价的宽度</div><div class="line">private int slideRulerWidth=0;</div><div class="line">//滑动的宽度</div><div class="line">private int rollingWidth;</div><div class="line">//屏幕的宽</div><div class="line">private int wrapcontentWidth;</div><div class="line">//屏幕的高</div><div class="line">private int wrapcontentHeight;</div><div class="line">//一屏显示Item</div><div class="line">private int showItemSize;</div><div class="line">//刻度和数值的间距</div><div class="line">private int marginCursorData;</div><div class="line">//长刻度的大小</div><div class="line">private int longCursor;</div><div class="line">//短刻度的大小</div><div class="line">private int shortCursor;</div><div class="line">//计算每个刻度的间距</div><div class="line">private int marginWidth=0;</div><div class="line">//数据回调接口</div><div class="line">private SlideRulerDataInterface slideRulerDataInterface;</div><div class="line">//正在滑动状态</div><div class="line">private int isScrollingState=1;</div><div class="line">//快速一滑</div><div class="line">private int fastScrollState=2;</div><div class="line">//结束滑动</div><div class="line">private int finishScrollState=3;</div><div class="line"></div><div class="line">private GestureDetector mDetector;</div><div class="line">private Display display =null;</div><div class="line">private Scroller scroller;</div><div class="line"></div><div class="line">public SlideRuler(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context,attrs,defStyleAttr);</div><div class="line">        display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();</div><div class="line">        //屏幕宽高</div><div class="line">        wrapcontentWidth=display.getWidth();</div><div class="line">        wrapcontentHeight=display.getHeight();</div><div class="line">        //初始化自定义的参数</div><div class="line">        TypedArray typedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.slideruler,defStyleAttr,0);</div><div class="line">        textSize = typedArray.getDimensionPixelSize(R.styleable.slideruler_textSize,(int) TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));</div><div class="line">        textColor=typedArray.getColor(R.styleable.slideruler_textColor,Color.DKGRAY);</div><div class="line">        dividerColor=typedArray.getColor(R.styleable.slideruler_dividerColor,Color.BLACK);</div><div class="line">        indicatrixColor=typedArray.getColor(R.styleable.slideruler_indicatrixColor,Color.BLACK);</div><div class="line">        minValue=typedArray.getInteger(R.styleable.slideruler_min_value,0);</div><div class="line">        maxValue=typedArray.getInteger(R.styleable.slideruler_max_value,199000);</div><div class="line">        currentValue=typedArray.getInteger(R.styleable.slideruler_current_value,10000);</div><div class="line">        minUnitValue=typedArray.getInteger(R.styleable.slideruler_min_unitValue,1000);</div><div class="line">        minCurrentValue=typedArray.getInteger(R.styleable.slideruler_min_currentValue,1000);</div><div class="line">        showItemSize=typedArray.getInteger(R.styleable.slideruler_show_itemSize,30);</div><div class="line">        marginCursorData=typedArray.getDimensionPixelSize(R.styleable.slideruler_margin_cursor_data,(int)TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,10,getResources().getDisplayMetrics()));</div><div class="line">        longCursor=typedArray.getDimensionPixelSize(R.styleable.slideruler_longCursor,(int)TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,25,getResources().getDisplayMetrics()));</div><div class="line">        shortCursor=typedArray.getDimensionPixelSize(R.styleable.slideruler_shortCursor,(int)TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));</div><div class="line"></div><div class="line">        scroller=new Scroller(context);</div><div class="line">        mDetector=new GestureDetector(context,myGestureListener);</div><div class="line"></div><div class="line">        //初始化Paint</div><div class="line">        linePaint=new Paint();</div><div class="line">        linePaint.setAntiAlias(true);</div><div class="line">        linePaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">        linePaint.setStyle(Paint.Style.STROKE);</div><div class="line">        linePaint.setTextSize(textSize);</div><div class="line">        //检查当前值是不是正确值</div><div class="line">        checkCurrentValue();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>其次自定义View也好自定义控价也好<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heigh)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>也是蛮重要的所以照例也讲讲，用来确定控件的大小，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">       int widthModel=MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">       int heightModel=MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">       int widthSize=MeasureSpec.getSize(widthMeasureSpec);    </div><div class="line">       int heightSize=MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">       int width;</div><div class="line">       int height;</div><div class="line">       if(widthModel==MeasureSpec.EXACTLY)&#123;</div><div class="line">           width=widthSize;</div><div class="line">       &#125;else&#123;</div><div class="line">           width=wrapcontentWidth;</div><div class="line">       &#125;</div><div class="line">       if(heightModel==MeasureSpec.EXACTLY)&#123;</div><div class="line">           height=heightSize;</div><div class="line">       &#125;else&#123;</div><div class="line">           height=(getPaddingBottom()+getPaddingTop()+(wrapcontentHeight/4));</div><div class="line">       &#125;</div><div class="line">       setMeasuredDimension(width,height);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>代码的意思也很简单，当MeasureSpec里的specMode类型是EXACTLY时，即设置了明确的值或者是MATCH_PARENT时，就直接把MeasureSpec.getSize()的值赋进去，如果不是即为WARP_CONTENT时，就直接赋给屏幕的宽高。控件的宽高都是同一样的做法。</p>
<ul>
<li>当控件大小确定之后，我们再利用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>进行一些变量的赋值，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">       //计算每个刻度的间距</div><div class="line">       marginWidth=getWidth()/showItemSize;</div><div class="line">       //开始时的距离</div><div class="line">       rollingWidth=(int)(marginWidth*cursorNum());</div><div class="line">       //整个控件的宽度</div><div class="line">       slideRulerWidth=(maxValue/minUnitValue)*marginWidth;</div><div class="line">       super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>到此我们就可以在onDraw(Canvas canvas)方法里画出初始的界面，而以后的动态只是通过不断的改变数值再进行绘画而已，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas)&#123;</div><div class="line">    //画最基础的两条线</div><div class="line">    drawBaseView(canvas);</div><div class="line">    //画初始的界面</div><div class="line">    drawBaseLine(canvas);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">//画最基础的两条线</div><div class="line">public void drawBaseLine(Canvas canvas)&#123;</div><div class="line">    //画中间的线</div><div class="line">    linePaint.setColor(indicatrixColor);</div><div class="line">    canvas.drawLine(getWidth()/2,0,getWidth()/2,getHeight(),linePaint);</div><div class="line">    //画底部的直线</div><div class="line">    linePaint.setColor(dividerColor);</div><div class="line">    canvas.drawLine(0,getHeight(),slideRulerWidth,getHeight(),linePaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//画初始的界面</div><div class="line">public void drawBaseView(Canvas canvas)&#123;</div><div class="line">    //整数刻度的个数</div><div class="line">    int integerWidth= (int)Math.rint((currentValue-minValue)/minUnitValue);</div><div class="line">    //剩余不整一个刻度的数值</div><div class="line">    int residueWidth=(currentValue-minValue)%minUnitValue;</div><div class="line">    //开始画图的X轴位置</div><div class="line">    int startCursor=(getWidth()/2)-(marginWidth*integerWidth)-(int)(marginWidth*(float)residueWidth/minUnitValue);</div><div class="line">        for(int i=0;i&lt;(maxValue/minUnitValue)+1;i++)&#123;</div><div class="line">            float xValue=startCursor+(marginWidth*i);</div><div class="line">            if(i%10==0)&#123;</div><div class="line">                //画长刻度</div><div class="line">                linePaint.setColor(textColor);</div><div class="line">                canvas.drawText((minCurrentValue*i)+&quot;&quot;,xValue,getHeight()-longCursor-marginCursorData,linePaint);</div><div class="line">                linePaint.setColor(dividerColor);</div><div class="line">                canvas.drawLine(xValue,getHeight(),xValue,getHeight()-longCursor,linePaint);</div><div class="line">            &#125;else&#123;</div><div class="line">                //画短刻度</div><div class="line">                canvas.drawLine(xValue,getHeight(),xValue,getHeight()-shortCursor,linePaint);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在drawBaseView()方法里，也很简单，就是在二分之一宽度，画一条直线，然后在控价的底部画出宽度为整个控件的宽度的底线。接着在drawBaseView(Canvas canvas)方法里</p>
<ol>
<li>首先用当前值(currentValue)-最小值(minValue)之后再除于最小单位值(minUnitValue)以获取整数刻度的个数</li>
<li>因为有余数的情况，我们再当前值(currentValue)-最小值(minValue)之后求余与最小单位值(minUnitValue)以获取余数</li>
<li>接着我们要获取我们画图的X轴开始的位置，因为最小值只能滑到中间，所以开始的位置为控件一半的宽度(getWidth()/2)<br>减去计算每个刻度的间距(marginWidth)乘以整数刻度的个数(integerWidth)即<figure class="highlight plain"><figcaption><span>```(int)(marginWidth*(float)residueWidth/minUnitValue)```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">4. 再通过For循环刻度的个数，不同的进行刻度的绘画，当i%10==0时即为一个大的单位刻度否者为一个小的单位刻度，具体代码我上面已有注释，原理和画中间线一直就不在赘述。</div><div class="line"> </div><div class="line">到此我们就已经把自定义控价静态的部分写完了，效果如下：![img.PNG](http://upload-images.jianshu.io/upload_images/925576-4b829e7c35c2befc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)接着我们用GestureDetector绑定手势事件，根据回调手势事件的方法来改变数据和刷新页面，在GestureDetector里，我们只会回调```public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)```(手指在触摸屏上滑动)和</div></pre></td></tr></table></figure></li>
</ol>
<p>public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>private GestureDetector.SimpleOnGestureListener myGestureListener =new  GestureDetector.SimpleOnGestureListener(){<br>        @Override<br>        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {<br>            //滑动刷新UI<br>            updateView(rollingWidth+(int)distanceX,isScrollingState);<br>            return true;<br>        }<br>        @Override<br>        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {<br>            //快速滑动的动画<br>            scroller.fling(rollingWidth,0,(int)(-velocityX/1.5),0,0,(maxValue/minUnitValue)*marginWidth,0,0);<br>            return true;<br>        }<br>    };</p>
<p>//动态更新滑动View<br>public void updateView(int srcollWidth,int action){<br>    if(action==isScrollingState){<br>        //正在滑动状态(onScroll())<br>        rollingWidth=srcollWidth;<br>        float itemNum=(float)srcollWidth/marginWidth;<br>        currentValue=(int)(minUnitValue<em>itemNum);<br>    }else if(action==fastScrollState){<br>        //快速一滑(onFling())<br>        rollingWidth=srcollWidth;<br>        int itemNum=(int)Math.rint((float)rollingWidth/marginWidth);<br>        currentValue=(minUnitValue</em>itemNum);<br>    }else if(action==finishScrollState){<br>        //结束滑动(ACTION_UP)<br>        int itemNum=(int)Math.rint((float)rollingWidth/marginWidth);<br>        currentValue=minUnitValue<em>itemNum;<br>    }<br>    //判断是否在最小选择值<br>    if(currentValue&lt;=minCurrentValue){<br>        rollingWidth=(minCurrentValue/minUnitValue)</em>marginWidth;<br>        currentValue=minCurrentValue;<br>    }<br>    //判断是否在最大值<br>    if(currentValue&gt;=maxValue){<br>        rollingWidth=marginWidth*allCursorNum();<br>        currentValue=maxValue;<br>    }<br>    //回调数值<br>    if(slideRulerDataInterface!=null){<br>        slideRulerDataInterface.getText(currentValue+””);<br>    }<br>    invalidate();<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.当我们滑动我们的控件是，就会回调GestureDetector里的onScroll()方法，然后```rollingWidth+(int)distanceX```即当前滑动的宽度(rollingWidth)加上滑动产生的宽度(distanceX)为动态产生的宽度，再除于计算每个刻度的间距(marginWidth)从而得到刻度的数量，有了刻度的数量即可得到当前值```currentValue=(int)(minUnitValue*itemNum);```有了当前值调用invalidate();刷新onDraw()即可完成连续滑动时动态绘制。</div><div class="line"></div><div class="line">2.当我们快速一划时，就会回调GestureDetector里的onFling()方法，在方法里用</div></pre></td></tr></table></figure>
<p>scroller.fling(rollingWidth,0,(int)(-velocityX/1.5),0,0,(maxValue/minUnitValue)*marginWidth,0,0);<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">  @Override</div><div class="line">  public void computeScroll() &#123;</div><div class="line">    if(scroller.computeScrollOffset())&#123;</div><div class="line">        //快滑刷新UI</div><div class="line">        updateView(scroller.getCurrX(),fastScrollState);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>的scroller.computeScrollOffset()==true;而scroller.getCurrX()就相当于为动态产生的滑动宽度剩下的也是调用updateView()方法不断的刷新，当scroller.computeScrollOffset()==false就滑动动画结束了。</p>
<p>3.最后当我们滑动结束手指抬起时:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">       switch(event.getAction())&#123;</div><div class="line">           case MotionEvent.ACTION_UP:</div><div class="line">               updateView(0,finishScrollState);</div><div class="line">           default:</div><div class="line">               mDetector.onTouchEvent(event);</div><div class="line">               break;</div><div class="line">       &#125;</div><div class="line">       return true;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>我们也要掉updateView(),以保持滑动的最后结构都指在指针上。</p>
<p>最后大家要深入学习的话，请看<a href="https://github.com/jack921/SlideRuler" target="_blank" rel="external">https://github.com/jack921/SlideRuler</a></p>
]]></content>
    
    <summary type="html">
    
      以前博客讲的大部分都是静态的自定义View的编写,其实无非就是“画画”画出一个好看的效果,而这篇博客写的是写一个动态的自定义控价,这里不仅需要&quot;画&quot;,还要各种事件和计算,废话不说现在就讲讲自定义数值滚动尺,这个用的还是满广的，例如京东金融的通过滚动尺选择金额等,而这次就是高仿京东金融的数值滚动尺。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>教你实现最简单的QQ消息item侧滑菜单</title>
    <link href="http://jack921.win/2017/04/16/%E6%95%99%E4%BD%A0%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84QQ%E6%B6%88%E6%81%AFitem%E4%BE%A7%E6%BB%91%E8%8F%9C%E5%8D%95/"/>
    <id>http://jack921.win/2017/04/16/教你实现最简单的QQ消息item侧滑菜单/</id>
    <published>2017-04-16T15:22:00.000Z</published>
    <updated>2017-04-29T16:40:15.007Z</updated>
    
    <content type="html"><![CDATA[<p>这次跟大家介绍怎么简单的实现类似QQ消息Item的左右滑动菜单的实现。首先见效果图先:</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-09d6e9d464be1176.gif?imageMogr2/auto-orient/strip" alt="show.gif"><br>这就实现了ListView或RecyclerView加载的item的View实现侧滑菜单。至于这么实现，很简单就是通过继承HorizontalScrollView，再判断滑动的距离以滑到对应的View或菜单。具体如下:<br>首先，在item的界面布局方面如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;com.example.jack.listviewitemscroll.widget.ScrollListViewItem</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;50dp&quot;&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">        &lt;include layout=&quot;@layout/leftbutton&quot;/&gt;</div><div class="line">        &lt;include layout=&quot;@layout/context_view&quot;/&gt;</div><div class="line">        &lt;include layout=&quot;@layout/rightbutton&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/com.example.jack.listviewitemscroll.widget.ScrollListViewItem&gt;</div></pre></td></tr></table></figure></p>
<p>就是ScrollListViewItem包裹着LinearLayout里面的三个View,分别是左菜单，内容和右菜单对应的View。最为重点的就是ScrollListViewItem这个类，这就是我们继承HorizontalScrollView类所自定义的控制菜单滑动的类。<br>这个类的源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">public class ScrollListViewItem extends HorizontalScrollView&#123;</div><div class="line"></div><div class="line">    private static int ScreenWidth=0;</div><div class="line">    private static int MenuWidth=0;</div><div class="line">    private static int HalfMenuWidth=0;</div><div class="line">    private boolean  operateLeft=false;</div><div class="line">    private boolean operateRight=false;</div><div class="line">    private boolean once;</div><div class="line"></div><div class="line">    ViewGroup left;</div><div class="line">    ViewGroup centre;</div><div class="line">    ViewGroup right;</div><div class="line"></div><div class="line">    public ScrollListViewItem(Context context) &#123;</div><div class="line">        this(context, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ScrollListViewItem(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs,0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ScrollListViewItem(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr,0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       if(!once)&#123;</div><div class="line">           LinearLayout linearLayout=(LinearLayout)getChildAt(0);</div><div class="line">           left=(ViewGroup)linearLayout.getChildAt(0);</div><div class="line">           centre=(ViewGroup)linearLayout.getChildAt(1);</div><div class="line">           right=(ViewGroup)linearLayout.getChildAt(2);</div><div class="line"></div><div class="line">           ScreenWidth= ScreenUtils.getScreenWidth(getContext());</div><div class="line">           MenuWidth=ScreenWidth/4;</div><div class="line">           HalfMenuWidth=MenuWidth/2;</div><div class="line"></div><div class="line">           left.getLayoutParams().width=MenuWidth;</div><div class="line">           centre.getLayoutParams().width=ScreenWidth;</div><div class="line">           right.getLayoutParams().width=MenuWidth;</div><div class="line">       &#125;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        super.onLayout(changed, l, t, r, b);</div><div class="line">        if(changed)&#123;</div><div class="line">            this.scrollTo(MenuWidth,0);</div><div class="line">            once=true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent ev) &#123;</div><div class="line">        switch(ev.getAction())&#123;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                //在左侧</div><div class="line">                if(operateLeft)&#123;</div><div class="line">                    if(getScrollX()&lt;HalfMenuWidth)&#123;</div><div class="line">                        //滑到左最末尾</div><div class="line">                        this.scrollTo(0, 0);</div><div class="line">                    &#125;else if(getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth)&#123;</div><div class="line">                        //滑到中间</div><div class="line">                        this.scrollTo(MenuWidth, 0);</div><div class="line">                    &#125;else&#123;</div><div class="line">                        this.scrollTo(MenuWidth * 2, 0);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                //向右侧</div><div class="line">                if(operateRight)&#123;</div><div class="line">                    if(getScrollX()&gt;MenuWidth+HalfMenuWidth)&#123;</div><div class="line">                        //滑到最右</div><div class="line">                        this.scrollTo(MenuWidth + MenuWidth, 0);</div><div class="line">                    &#125;else if(getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth)&#123;</div><div class="line">                        //滑到中间</div><div class="line">                        this.scrollTo(MenuWidth, 0);</div><div class="line">                    &#125;else&#123;</div><div class="line">                        //滑到最左</div><div class="line">                        this.scrollTo(0, 0);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onScrollChanged(int l, int t, int oldl, int oldt) &#123;</div><div class="line">        super.onScrollChanged(l, t, oldl, oldt);</div><div class="line">        if(l&gt;MenuWidth)&#123;</div><div class="line">            operateLeft=false;</div><div class="line">            operateRight=true;</div><div class="line">        &#125;else&#123;</div><div class="line">            operateLeft=true;</div><div class="line">            operateRight=false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在onMeasure()这个自定义View的测量方法里，我们首先拿到左菜单，内容，右菜单所对用的view,即left,centre,right这三个View,然后获取屏幕的宽度，动态设定菜单的宽度为屏幕宽度的四分之一，而内容的宽度就是整个屏幕的宽度，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">left.getLayoutParams().width=MenuWidth;</div><div class="line">centre.getLayoutParams().width=ScreenWidth;</div><div class="line">right.getLayoutParams().width=MenuWidth;</div></pre></td></tr></table></figure></p>
<p>然后我们在onLayout()方法里对这三个View进行定位，即让他滑到内容的那个View。</p>
<p>然后回调onScrollChanged(int l, int t, int oldl, int oldt)方法，当l大于菜单宽度时是右侧，当l小于菜单宽度时是右侧。(注:l是屏幕最右边到整个View最右边的距离)</p>
<p>其次就是最重要的onTouchEvent(MotionEvent ev)方法了。(注:是屏幕最右边到整个View最右边的距离).当operateLeft==true的时候,滑动在操作在左侧,当<code>getScrollX()&lt;HalfMenuWidth</code>,即在最左向右滑还不到菜单的二分之一宽度时，恢复原状，即<code>this.scrollTo(0, 0);</code>，当<code>getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth</code>,即最左向右滑大于菜单的二分之一宽度但却小于左菜单加右菜单一半的宽度，所以只能滑到内容区域，即<code>this.scrollTo(MenuWidth, 0);</code>，这两种情况除外都会滑到最后边的菜单，所以<code>this.scrollTo(MenuWidth * 2, 0)</code>;</p>
<p>同样的道理，当operateRight==true时，<code>getScrollX()&gt;MenuWidth+HalfMenuWidth</code>时，即在最右菜单但滑动的距离小于菜单宽度的一半，所以只能恢复原状即<code>this.scrollTo(MenuWidth + MenuWidth, 0);</code>,当<code>getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth</code>时，即滑动大于菜单一半但是却小于左菜单加右菜单一半的宽度，所以是内容区域，即滑动 this.scrollTo(MenuWidth, 0);，除这两种情况都是要滑到最左边的菜单，即 this.scrollTo(0, 0);。到此整个流程就讲完了。</p>
<p>最后奉上<a href="https://github.com/jack921/ListViewItemScroll" target="_blank" rel="external">源码</a></p>
]]></content>
    
    <summary type="html">
    
      这次跟大家介绍怎么简单的实现类似QQ消息Item的左右滑动菜单的实现。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="android自定义控件" scheme="http://jack921.win/tags/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>android蓝牙4.0的知识要点</title>
    <link href="http://jack921.win/2017/03/13/android%E8%93%9D%E7%89%994-0%E7%9A%84%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/"/>
    <id>http://jack921.win/2017/03/13/android蓝牙4-0的知识要点/</id>
    <published>2017-03-13T14:58:00.000Z</published>
    <updated>2017-04-29T16:40:28.774Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/925576-4e60f16439ab4a9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="蓝牙4.0"></p>
<p>这次主要讲解蓝牙4.0的基本要点,作为自己的备忘录记录下来吧。首先普及一下蓝牙4.0基于Gatt协议来实现。而蓝牙4.0以下的是传统蓝牙，基于socket方式来实现。所以4.0以上的蓝牙具有传输速度更快，覆盖范围更广，安全性更高，延迟更短，耗电极低等等优点。</p>
<p> 一个BLE终端可以包含多个Service， 一个Service可以包含多个Characteristic，一个Characteristic包含一个value和多个Descriptor，一个Descriptor包含一个Value。Characteristic是比较重要的，是手机与BLE终端交换数据的关键，读取设置数据等操作都是操作Characteristic的相关属性。<br>接下来就是代码部分:<br>    1.首先是声明权限:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>如果你想声明你的应用程序只能在支持BLE的设备上运行，可以将下面声明包含进你的应用程序manifest文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;&gt;&lt;/uses-feature&gt;</div></pre></td></tr></table></figure></p>
<p>2.其次获取蓝牙适配器:<br> <figure class="highlight plain"><figcaption><span>mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();```也可以用</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"> BluetoothManager  mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</div><div class="line"> BluetoothAdapter  mBluetoothAdapter = mBluetoothManager.getAdapter();</div></pre></td></tr></table></figure></p>
<p>当mBluetoothAdapter==null的时候就说明手机没有开蓝牙，此时我们可以通过调用系统的蓝牙打开窗口打开蓝牙，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</div></pre></td></tr></table></figure></p>
<p>再通过<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">    super.onActivityResult(requestCode, resultCode, data);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>回调看时候开启成功。<br>3.接着就是查找蓝牙了。查找蓝牙很简单，首先就是定义蓝牙查找获取设备的回调接口，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() &#123;</div><div class="line">        @Override</div><div class="line">        public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) &#123;</div><div class="line">            //device.getName();获取蓝牙设备名字</div><div class="line">            //device.getAddress();获取蓝牙设备mac地址</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>然后使用<figure class="highlight plain"><figcaption><span>.startLeScan(mLeScanCallback);```开始搜索设备，每当有设备即通过回调onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord)方法来输出设备数据信息。当你不想再搜索是可以使用```mBluetoothAdapter.stopLeScan(mLeScanCallback);```来停止搜索。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4.有蓝牙设备信息了，下一步我们当然要连接蓝牙了，不然要这些信息也没用了。连接蓝牙也是很简单。建议蓝牙连接最好在后台service进行。假如你保存上面回调方法的BluetoothDevice对象，就直接可以运行```BluetoothGatt mBluetoothGatt= device.connectGatt(this, false, mGattCallback);```这代码进行连接，至于mGattCallback是什么下文会介绍。而BluetoothGatt这对象也很重要，后面发现服务读写设备等操作都是通过该对象。假如没有BluetoothDevice 对象只有蓝牙设备的mac地址也可以连接，这个可以先像上面那样首先获取BluetoothAdapter蓝牙适配对象，```BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(intent.getStringExtra(&quot;mac&quot;));```再通过getRemoteDevice()方法也可以BluetoothDevice 对象然后再像上面那样连接也可以。</div><div class="line">上面连接代码中出现的mGattCallback对象，这个是什么呢？它是蓝牙连接，读取设备，往设备里写数据及设备发出通知等都会回调该接口方法，具体如下:</div></pre></td></tr></table></figure></p>
<p>private final BluetoothGattCallback mGattCallback=new BluetoothGattCallback() {</p>
<pre><code>    //当连接上设备或者失去连接时会回调该函数
    @Override
    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
        if(newState== BluetoothProfile.STATE_CONNECTED){
            Log.e(&quot;log_state&quot;,&quot;连接成功&quot;);
            mBluetoothGatt.discoverServices();
        }else if(newState==BluetoothProfile.STATE_DISCONNECTED){
            Log.e(&quot;log_state&quot;,&quot;连接失败&quot;);
        }
        super.onConnectionStateChange(gatt, status, newState);
    }

    //当设备是否找到服务时，会回调该函数
    @Override
    public void onServicesDiscovered(BluetoothGatt gatt, int status) {
        super.onServicesDiscovered(gatt, status);
        if (status == BluetoothGatt.GATT_SUCCESS) {   //找到服务了
            //在这里可以对服务进行解析，寻找到你需要的服务
        } 
    }

     //设备发出通知时会调用到该接口
    @Override
    public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
        super.onCharacteristicChanged(gatt, characteristic);
        Log.e(&quot;log_change&quot;,&quot;发送通知&quot;);
    }

   //当读取设备时会回调该函数
    @Override
    public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
        super.onCharacteristicRead(gatt, characteristic, status);
        if (status == BluetoothGatt.GATT_SUCCESS) {
            //读取成功
            Log.e(&quot;log_read&quot;,characteristic.getValue()[0]+&quot;&quot;);
        }else{
          //读取失败
        }

    }

  //当向Characteristic写数据时会回调该函数
    @Override
    public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
        super.onCharacteristicWrite(gatt, characteristic, status);
        if(status == BluetoothGatt.GATT_SUCCESS){
          //写入成功
        }else{
          //写入失败
        }
    }

  @Override //当向设备Descriptor中写数据时，会回调该函数
public void onDescriptorWrite(BluetoothGatt gatt,BluetoothGattDescriptor descriptor, int status) {
      super.onDescriptorRead(gatt, descriptor, status);
}

};<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这是整个蓝牙核心的回调方法，因为你所有的蓝牙操作都离不开这个方法。当我们调用connectGatt()方法进行连接，首先会回到onConnectionStateChange(BluetoothGatt gatt, int status, int newState);方法看是否已经连接成功，接入成功newState==BluetoothProfile.STATE_CONNECTED;此时我们就可以用 mBluetoothGatt.discoverServices();方法找出该设备中的服务了。当蓝牙设备服务查找完之后就会回调</div><div class="line">onServicesDiscovered(BluetoothGatt gatt, int status);方法此时你就可以遍历出蓝牙设备的所有服务，例如方法如下：</div></pre></td></tr></table></figure>
</code></pre><p>private void displayGattServices(List<bluetoothgattservice> gattServices) {<br>        if (gattServices == null)<br>            return;<br>        for (BluetoothGattService gattService : gattServices) {<br>           // 遍历出gattServices里面的所有服务<br>            List<bluetoothgattcharacteristic> gattCharacteristics = gattService.getCharacteristics();<br>            for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) {<br>            // 遍历每条服务里的所有Characteristic<br>               if (gattCharacteristic.getUuid().toString().equalsIgnoreCase(需要通信的UUID)) {<br>                    // 有哪些UUID，每个UUID有什么属性及作用，一般硬件工程师都会给相应的文档。我们程序也可以读取其属性判断其属性。<br>                    // 此处可以可根据UUID的类型对设备进行读操作，写操作，设置notification等操作<br>                    // BluetoothGattCharacteristic gattNoticCharacteristic 假设是可设置通知的Characteristic<br>                    // BluetoothGattCharacteristic gattWriteCharacteristic 假设是可读的Characteristic<br>                    // BluetoothGattCharacteristic gattReadCharacteristic  假设是可写的Characteristic<br>               }<br>            }<br>        }<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">到这一步，你就需要硬件工程师给你提供关于这个蓝牙设备的UUID文档，每个UUID的功能和操作都需要文档提供，不然你也不知道这些UUID具体代表什么功能和怎么用。当你知道UUID的意思,你就可以通过BluetoothGattCharacteristic 这个类进行各种读写操作。</div><div class="line"></div><div class="line">5.当你从文档看到遍历出来的UUID有接送通知的功能。这时你就可以设置可以接收通知。代码如下:</div></pre></td></tr></table></figure></bluetoothgattcharacteristic></bluetoothgattservice></p>
<p>public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enabled) {<br>        if (mBluetoothAdapter == null || mBluetoothGatt == null) {<br>            Log.w(TAG, “BluetoothAdapter not initialized”);<br>            return;<br>        }<br>        mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);<br>        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(“00002902-0000-1000-8000-00805f9b34fb”));<br>        if (descriptor != null) {<br>            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);<br>            mBluetoothGatt.writeDescriptor(descriptor);<br>        }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">通过拿到对应通知UUID的BluetoothGattCharacteristic，调用setCharacteristicNotification().其中00002902-0000-1000-8000-00805f9b34fb是系统提供接受通知自带的UUID，通过设置BluetoothGattDescriptor相当于设置BluetoothGattCharacteristic的Descriptor属性来实现通知，这样只要蓝牙设备发送通知信号，就会回调onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) 方法，这你就可以在这方法做相应的逻辑处理。</div><div class="line"></div><div class="line">6。还是当你遍历的UUID服务中关于写数据到设备已达到控制设备的UUID是，你可以保存对应的BluetoothGattCharacteristic对象。然后向BluetoothGattCharacteristic对象写入数据，在通过</div><div class="line">BluetoothGatt调用writeCharacteristic()方法即可向硬件写入数据，例如下代码:</div></pre></td></tr></table></figure></p>
<p>sendCharacteristic.setValue(new byte[] {0x00});<br>mBluetoothGatt.writeCharacteristic(sendCharacteristic);<br>```<br>其中一般硬件里读出写入的数据为二进制类型，所以要熟悉整型，字符串，二进制，十六进制等它们之间的转换。至于写什么数据看硬件工程师的文档。</p>
<p>7.有写就有读，从蓝牙设备读数据也不难。首先还是从遍历的UUID中找到关于读取蓝牙设备数据的UUID，具体哪个UUID还是要看硬件文档。然后还是保存对应的BluetoothGattCharacteristic对象。当要读取时直接用运行BluetoothGatt的readCharacteristic(BluetoothGattCharacteristic characteristic);参数里的characteristic就是你保存的BluetoothGattCharacteristic对象，如<code>mBluetoothGatt.readCharacteristic(getCharacteristic);</code>然后就会回调上面的onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status);方法，最后当status == BluetoothGatt.GATT_SUCCESS时，即可通过characteristic.getValue();方法获取蓝牙设备返回的数据，你拿到数据剩下就是你的逻辑处理了。</p>
<p>至此，蓝牙4.0的关键知识就写完了，你掌握这些就可以连接蓝牙设备做很多事了,当然前提是要有蓝牙的硬件文档，不然你也不知道那些UUID是什么意思要怎么用。如果对你有帮助就请给我给喜欢吧,谢谢。</p>
]]></content>
    
    <summary type="html">
    
      这次主要讲解蓝牙4.0的基本要点,作为自己的备忘录记录下来吧。首先普及一下蓝牙4.0基于Gatt协议来实现。而蓝牙4.0以下的是传统蓝牙，基于socket方式来实现。所以4.0以上的蓝牙具有传输速度更快，覆盖范围更广，安全性更高，延迟更短，耗电极低等等优点。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="android蓝牙4.0" scheme="http://jack921.win/tags/android%E8%93%9D%E7%89%994-0/"/>
    
  </entry>
  
  <entry>
    <title>基于豆瓣和妹子的api用React Native写的demo for android</title>
    <link href="http://jack921.win/2017/01/24/%E5%9F%BA%E4%BA%8E%E8%B1%86%E7%93%A3%E5%92%8C%E5%A6%B9%E5%AD%90%E7%9A%84api%E7%94%A8React%20Native%E5%86%99%E7%9A%84demo%20for%20android/"/>
    <id>http://jack921.win/2017/01/24/基于豆瓣和妹子的api用React Native写的demo for android/</id>
    <published>2017-01-24T02:53:00.000Z</published>
    <updated>2017-04-29T16:43:23.837Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在学React Naitve,可以说React Native的确有他自身强大的地方,不管是运行效率还是热更新都和一般的h5有的一比,当然因为面世的时间还不算太久,版本更新又十分的快,所以坑也多,对于一般的移动开发者来说学习成本也蛮大的, 个人觉得用React Naitve做混合开发，把一些需要经常变化的模块用react native开发还是一个不错的选择。</p>
<ol>
<li>demo就是已React Naitve的官方文档和学习过程中踩过的这种坑写出来仅供学习demo级东西，因为没有苹果电脑,只试运行android.</li>
<li>数据方面是用豆瓣的Gank的妹子api</li>
<li>所用到的第三方控件如下:</li>
</ol>
<ul>
<li>React-native-vector-icons(一个可以用的网上图标库,不用自己设计),</li>
<li>React-native-scrollable-tab-view(通用的Tab控制器),这上面两个的开源的结合可以参考<a href="http://www.jianshu.com/p/b0cfe7f11ee7" target="_blank" rel="external">http://www.jianshu.com/p/b0cfe7f11ee7</a>这篇博客,</li>
<li>React-native-tab-navigator(底部的tab控制器)</li>
</ul>
<p>剩下的用到的React Native的原生控件有:</p>
<ul>
<li>ScorllView</li>
<li>WebView</li>
<li>TouchableOpacity</li>
<li>Navigator</li>
<li>Text</li>
<li>Image</li>
<li>ListView</li>
<li>BackAndroid</li>
<li>Button</li>
<li>DrawerLayoutAndroid</li>
<li>ActivityIndicator</li>
<li>ToastAndroid</li>
<li>…</li>
</ul>
<p>效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a2ecb0e32ef034a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo_img1.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c441daf9615d0f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="
![demo_img2.jpg](http://upload-images.jianshu.io/upload_images/925576-f7bfb21db961d4dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-96cb8eab949aeed7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo_img3.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-6369f8477f0414c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo_img4.jpg"></p>
<p>最后github地址<a href="https://github.com/jack921/JackBan-ReactNative" target="_blank" rel="external">https://github.com/jack921/JackBan-ReactNative</a></p>
]]></content>
    
    <summary type="html">
    
      最近一直在学React Naitve,可以说React Native的确有他自身强大的地方,不管是运行效率还是热更新都和一般的h5有的一比,当然因为面世的时间还不算太久,版本更新又十分的快,所以坑也多,对于一般的移动开发者来说学习成本也蛮大的, 个人觉得用React Naitve做混合开发，把一些需要经常变化的模块用react native开发还是一个不错的选择。
    
    </summary>
    
      <category term="React Native" scheme="http://jack921.win/categories/React-Native/"/>
    
    
      <category term="react native" scheme="http://jack921.win/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能</title>
    <link href="http://jack921.win/2016/12/23/%E4%B8%80%E4%B8%AA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%B9%B2%E8%B4%A7%E9%9B%86%E4%B8%AD%E8%90%A5%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%94%9F%E6%88%90%EF%BC%8C%E9%9B%86%E5%90%88%E4%BA%86%E5%B9%B2%E8%B4%A7api%E7%9A%84%E5%A4%A7%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/"/>
    <id>http://jack921.win/2016/12/23/一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能/</id>
    <published>2016-12-23T09:58:00.000Z</published>
    <updated>2017-04-29T16:44:57.837Z</updated>
    
    <content type="html"><![CDATA[<p>好像好久没有更新了,这次给大家带来的是自己完全用一个全新的方式练手开发的客户端，而后台接口用的是干货集中营的API，所以在这里要谢谢daimajia,因为他的贡献所以我们才可以有好的api进行练手。</p>
<p>这是一个漂亮的Gank客户端,里面的功能包含了干货集中营的api所提供的大部分功能。功能如下：</p>
<ul>
<li>可以查看每一天提供的Android,ios,休息视频等相关的技术干货，还有一张高清的妹子图在等着你哦</li>
<li>除此之外你还可以查看过往任何一天推荐的干货，让你真正的不会错过每天的干货集中营的推荐，并且支持发布自己的链接给代码家和根据关键字搜索自己想要的内容</li>
<li>同时可以按照不同的分类查看自己感兴趣的分类的干货如android,ios等，并且可以对分类进行排序，删除，再加入丰富的动画效果，体验效果棒棒的</li>
<li>对于男基友来说最最重要的当然是查看妹子啦，这也少不了，高清妹子图形成的瀑布流列表，支持转场动画，滑动浏览，放大图片，让你流连忘返</li>
<li>对于自己喜欢的干货数据不仅可以分享，还可以收藏，让你看了还可以再看，也可以让别人知道</li>
<li>最后支持app换肤，海量颜色总有一种颜色是你喜欢的，打造属于自己个性的Gank客户端</li>
</ul>
<p>功能就大概这样啦，以上功能也基本对接的干货集中营api的大部分功能，算是先对与其他客户端来说功能比较全面的。</p>
<h6 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h6><p>有人说现在这Gank的客户端已经很多了为什么还要做。本项目完全开源，用的是现在很多的MVP模式开发，并学习和整个Rxjava,Retrofit,EventBus,ButterKnife的各个优秀开源框架的优点而产生的东西，自己学一个完成客户端从开始的设计，调研，都后来的编码，还有一些看似简单其实还是有点麻烦的小细节的实现，整个流程一下来是可以学到很多东西的，和激发起自己的很多思考，这也是我觉得做这个最重要的地方。所以做这个东西还有蛮有意义的，特别是一些细节，所对分类的排序怎样过度好，点击图片的转场动画，沉浸式状态栏的，和android5.0的新控件的运用等等的这些细节都是看似简单其实还是要花点力气的。此外用新的东西练练手也是很重要的。</p>
<p>就说到这，项目的效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c7f4f1d84658b6fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img1.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-e50a1f785c6e5a38.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-ad3193f28e8ae2c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.jpg"></p>
<p><a href="https://github.com/jack921/GankNew" target="_blank" rel="external">github源码</a><br>觉得有帮助的话就给个start吧</p>
<p><a href="http://fir.im/j8c3" target="_blank" rel="external">app下载</a></p>
]]></content>
    
    <summary type="html">
    
      这次给大家带来的是自己完全用一个全新的方式练手开发的客户端，而后台接口用的是干货集中营的API，所以在这里要谢谢daimajia,因为他的贡献所以我们才可以有好的api进行练手。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="Gank Android 客户端" scheme="http://jack921.win/tags/Gank-Android-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>高仿QQ运动的周报界面</title>
    <link href="http://jack921.win/2016/10/22/%E9%AB%98%E4%BB%BFQQ%E8%BF%90%E5%8A%A8%E7%9A%84%E5%91%A8%E6%8A%A5%E7%95%8C%E9%9D%A2/"/>
    <id>http://jack921.win/2016/10/22/高仿QQ运动的周报界面/</id>
    <published>2016-10-22T14:05:00.000Z</published>
    <updated>2017-05-16T16:22:37.334Z</updated>
    
    <content type="html"><![CDATA[<p>这次高仿的是QQ运动的周报界面的网图。这个控件刚开始的时候以为代码量不大，没想到一路下来界面代码在加上动画代码还是蛮多的。好了老规矩先上图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-08ae515a0f3bcd81.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"><br>效果还是和qq的才不多吧。 1. 首先我把各个变量都贴出来以便在后续中你们可以更好理解代码的意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">//屏幕的宽度 </div><div class="line">private int mScreemWidth; </div><div class="line">//屏幕的高度 </div><div class="line">private int mScreemHight;</div><div class="line"> //圆的线 </div><div class="line">private Paint mCirclePaint; </div><div class="line">//圆区域的颜色 </div><div class="line">private Paint mCirclePaintColor; </div><div class="line">//虚线 </div><div class="line">private Paint mLineCircle;</div><div class="line"> //圆点 </div><div class="line">private Paint mCircleHoldPaint; </div><div class="line">//画字体 </div><div class="line">private Paint mCenterCircle; </div><div class="line">//最外的圆的透明度 </div><div class="line">private int mCircleAlpha1=0; </div><div class="line">//中间的圆的透明度 </div><div class="line">private int mCircleAlpha2=0; </div><div class="line">//最内的圆的透明度 </div><div class="line">private int mCircleAlpha3=0; </div><div class="line">//好友排名 </div><div class="line">private int mFriendDranking=0; </div><div class="line">//达标天数 </div><div class="line">private int mStandardDay=0; </div><div class="line">//平均步数 </div><div class="line">private int mAverageCount=0; </div><div class="line">//好友排名的X轴坐标 </div><div class="line">private float mFriendDrankingX=0; </div><div class="line">//好友排名的Y轴坐标 </div><div class="line">private float mFriendDrankingY=0; </div><div class="line">//平均步数的X轴坐标</div><div class="line">private float mStandardDayX=0; </div><div class="line">//平均步数的Y轴坐标 </div><div class="line">private float mStandardDayY=0;</div><div class="line"> //达标天数的X轴坐标 </div><div class="line">private float mAverageCountX=0; </div><div class="line">//达标天数的Y轴坐标 </div><div class="line">private float mAverageCountY=0; </div><div class="line">//临时的View的半径 </div><div class="line">private int tempCircleRadius=0; </div><div class="line">//View的半径 </div><div class="line">private int circleRadius=0; </div><div class="line">//每个圆圈的间隔 </div><div class="line">private float marginCircleSize=0; </div><div class="line">//圆的颜色 </div><div class="line">private int circleColor=0; </div><div class="line">//朋友区域的颜色 </div><div class="line">private int friendColor; </div><div class="line">//平均步数区域的颜色 </div><div class="line">private int averageColor; </div><div class="line">//达标天数区域的颜色 </div><div class="line">private int standardColor; </div><div class="line">//总步数 </div><div class="line">private String allStep; </div><div class="line">//好友排名</div><div class="line">private String firendDrank; </div><div class="line">//达标天数 </div><div class="line">private String standarDay; </div><div class="line">//平均步数 </div><div class="line">private String averageCount; </div><div class="line">//波浪动画的数值 </div><div class="line">private int waveData=-30; </div><div class="line">//中间文字翻转动画的数值 </div><div class="line">private float centerData=0; </div><div class="line">//画波浪的看门狗 </div><div class="line">private boolean waveWatchDag=false; </div><div class="line">//画虚线的看门狗 </div><div class="line">private boolean lineWatchDag=false; </div><div class="line">//各点解释的看门狗 </div><div class="line">private boolean expainWatchDag=false; </div><div class="line">//中心圆的内容的看门狗 </div><div class="line">private boolean centerWatchDag=false; </div><div class="line">//解释的字符串 </div><div class="line">private String averageCountTxt=&quot;平均步数&quot;; </div><div class="line">private String friendDrankTxt=&quot;好友排名&quot;; </div><div class="line">private String standarDayTxt=&quot;达标天数&quot;; </div><div class="line">private String theyCount=&quot;本周总步数&quot;; </div><div class="line">private String tip=&quot;步&quot;;</div></pre></td></tr></table></figure></p>
<p>2.有点多了，其次就是测量View的大小的onMeasure():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Override protected void onMeasure(</div><div class="line">int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line"> int widthModel=MeasureSpec.getMode(widthMeasureSpec); </div><div class="line"> int heightModel=MeasureSpec.getMode(heightMeasureSpec); </div><div class="line"> int measureWidth=MeasureSpec.getSize(widthMeasureSpec); </div><div class="line"> int measureHeight=MeasureSpec.getSize(heightMeasureSpec); </div><div class="line"> int width; </div><div class="line"> int height; </div><div class="line">   if(widthModel==MeasureSpec.EXACTLY)&#123; </div><div class="line">     width=measureWidth; </div><div class="line">   &#125;else&#123; </div><div class="line">    width=getPaddingLeft()+getPaddingRight()+measureWidth;</div><div class="line">   &#125;</div><div class="line">   if(heightModel==MeasureSpec.EXACTLY)&#123; </div><div class="line">    height=measureHeight; </div><div class="line">   &#125;else&#123; </div><div class="line">    height=(getPaddingLeft()+getPaddingRight()+measureHeight)/2; </div><div class="line">  &#125; </div><div class="line">   setMeasuredDimension(width,height); </div><div class="line">  loadAnimator(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 3.这里当设置大小为wrap_content的时候，View的宽度的话是用屏幕的的宽，而View的高的话是屏幕的高度的一半。当View的大小生成之后会调用onSizeChange()方法，具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override </div><div class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; </div><div class="line">super.onSizeChanged(w, h, oldw, oldh); </div><div class="line">mScreemWidth=w; </div><div class="line">mScreemHight=h;</div><div class="line">  //得出最大的圆的半径 </div><div class="line">  if(mScreemWidth&gt;mScreemHight)&#123; </div><div class="line">     circleRadius=Float.valueOf((w/3.4)+&quot;&quot;).intValue(); </div><div class="line">  &#125;else&#123; </div><div class="line">    circleRadius=Float.valueOf((h/3.4)+&quot;&quot;).intValue(); </div><div class="line">  &#125; </div><div class="line"> if(tempCircleRadius!=0&amp;&amp;tempCircleRadius&lt;=circleRadius)&#123;          </div><div class="line">    circleRadius=tempCircleRadius; </div><div class="line"> &#125; </div><div class="line">   //得出每个圆的间隔 </div><div class="line">   marginCircleSize=circleRadius/6; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当View的宽度大于View的高度时，最外边的圆的半径就是w/3.4，反之当View的高度大于View的宽度时，最外边的圆的半径就是h/3.4,而每个圆的间隔就是圆半径的六分之一。4.接着就是最重要的onDraw()方法了，代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override protected void onDraw(Canvas canvas) &#123; </div><div class="line">canvas.translate(getWidth()/2,getHeight()/2-(circleRadius/6)); </div><div class="line">  canvas.save(); </div><div class="line">  //画出三条圆圈 </div><div class="line">  drawCircle(canvas);</div><div class="line">  //画出波浪图形 </div><div class="line">  drawWaves(canvas); </div><div class="line">  //画虚线 </div><div class="line">  drawDottedLine(canvas); </div><div class="line">  //画点 </div><div class="line">  drawCircleHold(canvas); </div><div class="line">  //画解释的内容 </div><div class="line">  drawExpain(canvas); </div><div class="line">  //画中心圆的内容 </div><div class="line">  centerCircleContent(canvas); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先把canvas的原点移到X轴为宽度的一半，Y轴为高度的一半再减去六分之一的半径，保存canvas的状态。接着就一个个说这里面的每一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//画出三条圆圈 </div><div class="line">public void drawCircle(Canvas canvas)&#123; </div><div class="line">  //画出最大的圆 </div><div class="line">  mCirclePaint.setAlpha(mCircleAlpha1);</div><div class="line">  canvas.drawCircle(0,0,circleRadius,mCirclePaint); </div><div class="line">  //画出第二大的圆 </div><div class="line">  mCirclePaint.setAlpha(mCircleAlpha2); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize,mCirclePaint); </div><div class="line">  mCirclePaintColor.setColor(Color.parseColor(&quot;#F1FCFE&quot;)); </div><div class="line">  mCirclePaintColor.setAlpha(mCircleAlpha2); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize-2,mCirclePaintColor); </div><div class="line">  //画出第三大的圆 </div><div class="line">  mCirclePaint.setAlpha(mCircleAlpha3); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize*2,mCirclePaint); </div><div class="line">  mCirclePaintColor.setColor(Color.parseColor(&quot;#E7F9FE&quot;)); </div><div class="line">  mCirclePaintColor.setAlpha(mCircleAlpha3); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize*2-2,mCirclePaintColor); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法是比较简单的，就是画出三个圆圈，每个圆圈的间隔就是前面所初始化的marginCircleSize，圆圈的圆心就是canvas的原点，之前我们移动过原点了。第二和第三个圆圈里面还配有圆的背景，效果如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-8762fcd94edd4f08.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img1.PNG"><br>接着就是画出波浪图形的方法 drawWaves(canvas)代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"> //画出波浪图形 </div><div class="line">public void drawWaves(Canvas canvas)&#123;</div><div class="line"> if(!waveWatchDag)&#123;</div><div class="line">     return ;</div><div class="line"> &#125; </div><div class="line"></div><div class="line">canvas.rotate(waveData);</div><div class="line">float inCircleRadius=circleRadius-marginCircleSize*3; </div><div class="line">//算出最上面的点 </div><div class="line">float topPointX=0; </div><div class="line">float topPointY=-inCircleRadius; </div><div class="line">//算出左下角的点 </div><div class="line">float leftBottpmPointX=-(float)Math.sqrt(Math.pow(inCircleRadius,2)-Math.pow(inCircleRadius/2,2));</div><div class="line">float leftBottomPointY=inCircleRadius/2; </div><div class="line">//算出右小角的点 </div><div class="line">float rightBottomPointX=-leftBottpmPointX;</div><div class="line">float rightBottomPointY=inCircleRadius/2;</div><div class="line">//得到好友排名半径</div><div class="line">float mFriendDrankingData=circleValue(mFriendDranking); </div><div class="line">//得到达标天数半径 </div><div class="line">float mStandarDayData=circleValue(mStandardDay); </div><div class="line">//得到平均步数半径</div><div class="line">float mAverageCountData=circleValue(mAverageCount); </div><div class="line"></div><div class="line">/*画好友排名*/ </div><div class="line">//得出左上角的圆的坐标</div><div class="line">float[] mFriendDrankingPoint=calculatePoint(mFriendDrankingData); </div><div class="line">//好友排名的X轴坐标 </div><div class="line">mFriendDrankingX=-mFriendDrankingPoint[0]; </div><div class="line">//好友排名的Y轴坐标 </div><div class="line">mFriendDrankingY=-mFriendDrankingPoint[1]; </div><div class="line">//画出还有排名的波浪线 </div><div class="line">Path mFriendDrankingPath=new Path(); </div><div class="line">mFriendDrankingPath.moveTo(leftBottpmPointX,leftBottomPointY); </div><div class="line">mFriendDrankingPath.lineTo(mFriendDrankingX-6,mFriendDrankingY-6); </div><div class="line">mFriendDrankingPath.lineTo(topPointX,topPointY); </div><div class="line">mFriendDrankingPath.lineTo(topPointX+10,topPointY+10); </div><div class="line">mCirclePaintColor.setPathEffect(new CornerPathEffect(20)); </div><div class="line">mCirclePaintColor.setColor(friendColor); </div><div class="line">canvas.drawPath(mFriendDrankingPath,mCirclePaintColor);</div><div class="line"></div><div class="line"> /*画达标天数*/ </div><div class="line">//得出右上角的圆的坐标</div><div class="line"> float[] mStandarDayPoint=calculatePoint(mStandarDayData);</div><div class="line"> //达标天数的X轴坐标</div><div class="line"> mStandardDayX=mStandarDayPoint[0]; </div><div class="line">//达标天数的Y轴坐标 </div><div class="line">mStandardDayY=-mStandarDayPoint[1];</div><div class="line"> //画出还有达标天数的波浪线 </div><div class="line">Path mStandarDayPath=new Path();</div><div class="line"> mStandarDayPath.moveTo(topPointX,topPointY); </div><div class="line">mStandarDayPath.lineTo(mStandardDayX+6,mStandardDayY-6); </div><div class="line">mStandarDayPath.lineTo(rightBottomPointX,rightBottomPointY); </div><div class="line">mStandarDayPath.lineTo(rightBottomPointX-10,rightBottomPointY+10); </div><div class="line">mCirclePaintColor.setColor(standardColor); </div><div class="line">canvas.drawPath(mStandarDayPath,mCirclePaintColor); </div><div class="line"></div><div class="line">/*平均步数*/</div><div class="line">//平均步数的X轴坐标 </div><div class="line">mAverageCountX=0; </div><div class="line">//平均步数的Y轴坐标 </div><div class="line">mAverageCountY=mAverageCountData;</div><div class="line">//画出还有平均步数的波浪线 </div><div class="line">Path mAverageCountPath=new Path();</div><div class="line">mAverageCountPath.moveTo(rightBottomPointX,rightBottomPointY); </div><div class="line">mAverageCountPath.lineTo(topPointX,mAverageCountData+8); </div><div class="line">mAverageCountPath.lineTo(leftBottpmPointX,leftBottomPointY); </div><div class="line">mAverageCountPath.lineTo(leftBottpmPointX+10,leftBottomPointY+10); </div><div class="line">mCirclePaintColor.setColor(averageColor); </div><div class="line">canvas.drawPath(mAverageCountPath,mCirclePaintColor);</div><div class="line"> //最里面的圆 mCirclePaintColor.setColor(Color.WHITE); </div><div class="line">canvas.drawCircle(0,0,circleRadius-marginCircleSize*3,mCirclePaintColor); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这方法里最核心的就是数学计算了，整个View有3个波浪区域，各占一个圆的三分之一，所以第一步就是计算出这个圆的左下角,右小角和正上角的三个点，如图<br><img src="http://upload-images.jianshu.io/upload_images/925576-5c3e3e7c151a9cd8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.PNG">的蓝色点所示。具体代码见注释。在通过circleValue算出波浪线的半径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> //算出弧线区域的半径 </div><div class="line">public float circleValue(int mDataDranking)&#123; </div><div class="line">if(mDataDranking==1)&#123; </div><div class="line">    return circleRadius-marginCircleSize*2; </div><div class="line">&#125;else if(mDataDranking==2)&#123; </div><div class="line">    return circleRadius-marginCircleSize; </div><div class="line">&#125;else if(mDataDranking==3)&#123; </div><div class="line">    return circleRadius; </div><div class="line">&#125;else&#123; </div><div class="line">    return circleRadius-marginCircleSize*2;</div><div class="line"> &#125; &#125;</div></pre></td></tr></table></figure></p>
<p>然后通过calculatePoint()方法来各个波浪区域对应的顶点，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//算出右上角或左上角的坐标 </div><div class="line">public float[] calculatePoint(float radius)&#123; </div><div class="line">   float[] result=new float[2]; </div><div class="line">   float pointY=radius/2; </div><div class="line">   float pointX=(float)Math.sqrt(Math.pow(radius,2)-Math.pow(pointY,2)); </div><div class="line">   result[0]=pointX; </div><div class="line">   result[1]=pointY; </div><div class="line">   return result; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后转化为形象的图就是:<br><img src="http://upload-images.jianshu.io/upload_images/925576-eb3181385fef577e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.PNG">接着用Path把各个区域的点连起来就是形成区域，不过现在还是尖角，要把它变成原角就要用mCirclePaintColor.setPathEffect(new CornerPathEffect(20));方法，这样各个边的连接处都可以转换成圆角，可是因为是圆角所以到不到圆圈的边，这时候你要对你的顶点进行微调，所以我再顶点都进行了减6或者加6的操作。至于我这个6是怎么得出来的,我用的等比例的数学方法来求出来的，到时有优化我可以把我的方法用代码表示出来。至此，重要的就说完了，剩下的只是用canvas和path和paint画出来就是了。效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-ce3162a552d959a9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img4.PNG"><br>接着就是画虚线的方法了drawDottedLine(canvas)代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"> //画圆点和虚线 </div><div class="line">public void drawDottedLine(Canvas canvas)&#123; </div><div class="line">    if(!lineWatchDag)&#123; </div><div class="line">       return; </div><div class="line">    &#125; </div><div class="line">   for(int i=0;i&lt;3;i++)&#123; </div><div class="line">      canvas.rotate(120); </div><div class="line">    if(i==0)&#123; </div><div class="line">    //画好友排名的虚线</div><div class="line">    mLineCircle.setTextSize(18); </div><div class="line">    mLineCircle.setColor(friendColor);     </div><div class="line">   drawDottedLine(canvas,judgeDotte(mFriendDranking)); </div><div class="line">    &#125;else if(i==1)&#123; </div><div class="line">   //画达标天数的虚线 </div><div class="line">   mLineCircle.setColor(standardColor); </div><div class="line">   drawDottedLine(canvas,judgeDotte(mStandardDay));</div><div class="line">   &#125;else if(i==2)&#123; </div><div class="line">   //画平均步数的虚线 </div><div class="line">  mLineCircle.setColor(averageColor); </div><div class="line">  drawDottedLine(canvas,judgeDotte(mAverageCount)); </div><div class="line">&#125; &#125; </div><div class="line">  canvas.restore(); </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//判断虚线 </div><div class="line">public List&lt;Float&gt; judgeDotte(int value)&#123; List&lt;Float&gt; temp=new ArrayList&lt;&gt;(); </div><div class="line">     if(value==1)&#123; </div><div class="line">       //当为1时,波浪顶点到第三个圆  </div><div class="line">      temp.add(circleRadius-marginCircleSize*2); </div><div class="line">      temp.add((float)circleRadius); </div><div class="line">      temp.add(circleRadius-marginCircleSize*3); </div><div class="line">    &#125;else if(value==2)&#123; </div><div class="line">     //当为2时,波浪顶点到第二个圆 </div><div class="line">     temp.add(circleRadius-marginCircleSize); </div><div class="line">     temp.add((float)circleRadius); </div><div class="line">     temp.add(circleRadius-marginCircleSize*3); </div><div class="line">   &#125;else if(value==3)&#123; </div><div class="line">   //当为3时,波浪顶点到第一个圆</div><div class="line">    temp.add(circleRadius-marginCircleSize*3);</div><div class="line">    temp.add((float)circleRadius); </div><div class="line">  &#125; </div><div class="line">   return temp; </div><div class="line">&#125; </div><div class="line">//画虚线 </div><div class="line">public void drawDottedLine(Canvas canvas,List&lt;Float&gt; data)&#123; </div><div class="line">    if(data.size()==2)&#123;</div><div class="line">       /*当数值是最大的是时候也就是3*/</div><div class="line">      mLineCircle.setColor(Color.WHITE);</div><div class="line">      Path path=new Path(); </div><div class="line">     path.moveTo(0,data.get(0)); </div><div class="line">     path.lineTo(0,data.get(1));</div><div class="line">     canvas.drawPath(path,mLineCircle);</div><div class="line">     return ; </div><div class="line">&#125;else&#123; </div><div class="line">    /*当数值在1和2的时候*/ </div><div class="line">   //画出数值外的虚线 </div><div class="line">   Path pathOut=new Path(); </div><div class="line">   pathOut.moveTo(0,data.get(0));</div><div class="line">   pathOut.lineTo(0,data.get(1));</div><div class="line">   mLineCircle.setPathEffect(new DashPathEffect(new float[]&#123;7,5,7,5&#125;,5)); </div><div class="line">  canvas.drawPath(pathOut,mLineCircle); </div><div class="line">  //画出数值内的虚线 </div><div class="line">  Path pathIn=new Path(); </div><div class="line">  pathIn.moveTo(0,data.get(1)); </div><div class="line">  pathIn.lineTo(0,data.get(2)); </div><div class="line">  mLineCircle.setColor(Color.WHITE); </div><div class="line">  canvas.drawPath(pathIn,mLineCircle); </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先canvas通过每次旋转120度来画出每一条波浪线，通过judgeDotte()方法得出波浪线三个点对应的Y轴的坐标，假如judgeDotte返回的个数是两个的话那就是证明顶点在最外面的圆，假如是3个的话就画出顶点之外和顶点之内的线就可以了，代码注释已经很详细了，效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-323913dd364865f2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img5.PNG"><br>接着是画虚线上的圆点，drawCircleHold(Canvas canvas)代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//画虚线上的圆点 </div><div class="line">public void drawCircleHold(Canvas canvas)&#123; </div><div class="line">  if(!lineWatchDag)&#123;</div><div class="line">     return;</div><div class="line">  &#125;</div><div class="line"> float[] yuan1=calculatePoint(circleRadius-marginCircleSize*2); </div><div class="line"> float[] yuan2=calculatePoint(circleRadius-marginCircleSize); </div><div class="line"> float[] yuan3=calculatePoint(circleRadius); </div><div class="line">//画好友排名的圆点 </div><div class="line">drawCircleHoldImpl(-yuan1[0],-yuan1[1],-yuan2[0],-yuan2[1], -yuan3[0],-yuan3[1],mFriendDranking,canvas,friendColor);</div><div class="line"> //画达标天数的圆点 </div><div class="line">drawCircleHoldImpl(yuan1[0],-yuan1[1],yuan2[0],-yuan2[1], yuan3[0],-yuan3[1],mStandardDay,canvas,standardColor);</div><div class="line"> //画平均步数的圆点 drawCircleHoldImpl(0,circleRadius-marginCircleSize*2,0,circleRadius-marginCircleSize, 0,circleRadius,mAverageCount,canvas,averageColor); </div><div class="line">expainWatchDag=true;</div><div class="line"> &#125; </div><div class="line">//画圆的具体的方法 </div><div class="line">public void drawCircleHoldImpl(float mCirlce1X,float mCircle1Y,float mCirlce2X,float mCircle2Y, float mCirlce3X,float mCircle3Y,int action,Canvas canvas,int color)&#123; </div><div class="line">mCircleHoldPaint.setColor(color); </div><div class="line">if(action==1)&#123; </div><div class="line">//当数值为3时画所有圆圈 canvas.drawCircle(mCirlce1X,mCircle1Y,8,mCircleHoldPaint); </div><div class="line">canvas.drawCircle(mCirlce2X,mCircle2Y,8,mCircleHoldPaint); </div><div class="line">&#125;else if(action==2)&#123;</div><div class="line"> //当数值为2时画中间的圆圈 </div><div class="line">canvas.drawCircle(mCirlce2X,mCircle2Y,8,mCircleHoldPaint);</div><div class="line"> &#125; </div><div class="line">//画一定要画的圆圈和圆点 </div><div class="line">canvas.drawCircle(mCirlce3X,mCircle3Y,8,mCircleHoldPaint); </div><div class="line">mCircleHoldPaint.setColor(Color.WHITE); </div><div class="line">canvas.drawCircle(mCirlce1X,mCircle1Y,6,mCircleHoldPaint); </div><div class="line">canvas.drawCircle(mCirlce2X,mCircle2Y,6,mCircleHoldPaint); </div><div class="line">canvas.drawCircle(mCirlce3X,mCircle3Y,6,mCircleHoldPaint); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里同样注释也是很详细的，整个思路就是通过calculatePoint()算出三个圆点的坐标，在通过传进去的数值来要画多少个圆圈，而原点是不管数值多少都要画的。效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-8b9b623f2a29804e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img6.PNG"><br>接着就是画解释的内容drawExpain(Canvas canvas)代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> //画解释的内容 </div><div class="line">public void drawExpain(Canvas canvas)&#123; </div><div class="line">    if(!expainWatchDag)&#123;</div><div class="line">        return ;</div><div class="line">    &#125; </div><div class="line">//间隔 int margin=circleRadius/5; </div><div class="line">//画平均步数和对应的数值 </div><div class="line">   Rect txtRect=new Rect(); </div><div class="line">   mCenterCircle.setColor(Color.BLACK); </div><div class="line">   mCenterCircle.setTextSize(circleRadius/6); </div><div class="line">   mCenterCircle.setTypeface(Typeface.SANS_SERIF); </div><div class="line">   canvas.drawText(averageCount,0,circleRadius+margin,mCenterCircle); </div><div class="line">   mCenterCircle.setColor(friendColor); mCenterCircle.setTextSize(circleRadius/10); </div><div class="line">  mCenterCircle.getTextBounds(averageCountTxt,0,averageCountTxt.length(),txtRect); </div><div class="line">  canvas.drawText(averageCountTxt,0,circleRadius+margin+(txtRect.bottom-   txtRect.top),mCenterCircle);</div><div class="line"> </div><div class="line">//画好友排名和对应的数值</div><div class="line">  mCenterCircle.setColor(Color.BLACK); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/6); </div><div class="line">  canvas.drawText(firendDrank,-circleRadius,-(circleRadius-  marginCircleSize),mCenterCircle); </div><div class="line">  mCenterCircle.setColor(friendColor); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/10); </div><div class="line">  mCenterCircle.getTextBounds(friendDrankTxt,0,friendDrankTxt.length(),txtRect); </div><div class="line">  canvas.drawText(friendDrankTxt,-circleRadius,-(circleRadius-marginCircleSize)+(txtRect.bottom-txtRect.top),mCenterCircle);</div><div class="line">  //画达标天数和对应的数值 </div><div class="line">  mCenterCircle.setColor(Color.BLACK); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/6); </div><div class="line">  canvas.drawText(standarDay,circleRadius,-(circleRadius-  marginCircleSize),mCenterCircle); </div><div class="line">  mCenterCircle.setColor(friendColor); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/10); </div><div class="line">  mCenterCircle.getTextBounds(friendDrankTxt,0,friendDrankTxt.length(),txtRect); </div><div class="line">  canvas.drawText(standarDayTxt,circleRadius,-(circleRadius-marginCircleSize)+(txtRect.bottom-txtRect.top),mCenterCircle); centerWatchDag=true; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来代码有点多，其实是最简单的，就是确定好友排名的坐标(-circleRadius,-(circleRadius-marginCircleSize)),int margin=circleRadius/5,平均步数的坐标(0,circleRadius+margin),达标天数的坐标(circleRadius,-(circleRadius-marginCircleSize))来进行drawText的操作而已，没什么可以说的，Rect是得出字体大小的，具体看上面代码。效果如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-9fa29418c9dd9e9c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img7.PNG"><br>最后就是画中心圆的内容的centerCircleContent(canvas)了，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//画中心圆的内容 </div><div class="line">public void centerCircleContent(Canvas canvas)&#123; </div><div class="line">if(!centerWatchDag)&#123; </div><div class="line">return ; </div><div class="line">&#125; </div><div class="line">//画出颜色渐变的圆圈 </div><div class="line">  canvas.rotate(140); </div><div class="line">  float centerSize=circleRadius-marginCircleSize*3-(circleRadius/20); </div><div class="line">  mCenterCircle.setShader(new SweepGradient(0,0,new int[]&#123;   friendColor,friendColor,standardColor,averageColor&#125;,null)); </div><div class="line">  canvas.drawCircle(0,0,centerSize,mCenterCircle); </div><div class="line">  canvas.rotate(-140); </div><div class="line">//画出运动的总步数 </div><div class="line">  mCenterCircle.setShader(null); </div><div class="line">  mCenterCircle.setColor(friendColor); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/4);     </div><div class="line">  mCenterCircle.setTextAlign(Paint.Align.CENTER); </div><div class="line">  Rect numRect=new Rect();   </div><div class="line">  mCenterCircle.getTextBounds(allStep,0,allStep.length(),numRect); </div><div class="line">  Camera camera=new Camera(); camera.rotateY(centerData); </div><div class="line">  camera.applyToCanvas(canvas); </div><div class="line">  canvas.drawText(allStep,0,(numRect.bottom-numRect.top)/2,mCenterCircle); </div><div class="line">//画出总运动步数右边的字</div><div class="line">  Rect tipRect=new Rect(); </div><div class="line"> mCenterCircle.setTextSize(circleRadius/12); </div><div class="line"> mCenterCircle.getTextBounds(tip,0,tip.length(),tipRect); </div><div class="line"> canvas.drawText(tip,(numRect.right-numRect.left)/2+(tipRect.right-tipRect.left)/2+5 ,(numRect.bottom-numRect.top)/2-3,mCenterCircle); </div><div class="line">//画出总运动步数下面的提示 </div><div class="line"> Rect theyRect=new Rect(); </div><div class="line"> mCenterCircle.getTextBounds(theyCount,0,theyCount.length(),theyRect); </div><div class="line"> float marginBottom=circleRadius/12; </div><div class="line"> mCenterCircle.setTextSize(circleRadius/11); </div><div class="line"> canvas.drawText(theyCount,0,marginBottom+(numRect.bottom-numRect.top)/2 +(theyRect.bottom-theyRect.top)/2,mCenterCircle);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>中心圆的内容里实现的大概思路画解释的内容的思路都差不多，我觉得值得讲的就是这个Camera类了，这里的Camera类可不是相机里的Camera类，他可以实现Camera的旋转缩放的功能，是一个十分强大的类，而<code>camera.rotateY(centerData)</code>就是设置Y轴旋转的效果的关键代码。其次就是用<code>mCenterCircle.setShader(new SweepGradient(0,0,new int[]{ friendColor,friendColor,standardColor,averageColor},null));</code>来实现圆圈颜色的渐变功能的关键代码，里面还可以实现更多效果，这就需要小伙伴们用外的时间学了。最后效果如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-113243bf8482b852.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img8.PNG"><br>至此整个绘画就结束了，接着就是动画效果，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"> //启动动画的方法 </div><div class="line">public void loadAnimator()&#123;</div><div class="line"> final ValueAnimator alphaAmimator3=ValueAnimator.ofInt(0,225);</div><div class="line"> final ValueAnimator alphaAmimator2=ValueAnimator.ofInt(0,225); </div><div class="line"> final ValueAnimator wavesAminator=ValueAnimator.ofInt(-30,0); </div><div class="line"> final ValueAnimator centerAnimator=ValueAnimator.ofFloat(0,360); </div><div class="line"> ValueAnimator alphaAmimator1=ValueAnimator.ofInt(0,225); </div><div class="line"> centerAnimator.setDuration(1000);</div><div class="line"> centerAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;   </div><div class="line">  @Override </div><div class="line">  public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">     centerData=(float)animation.getAnimatedValue(); postInvalidate();</div><div class="line">   &#125; </div><div class="line">  &#125;);</div><div class="line">  wavesAminator.setDuration(1000); </div><div class="line">  wavesAminator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;    </div><div class="line">  @Override </div><div class="line">  public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">   waveData=(int)animation.getAnimatedValue(); </div><div class="line">   waveWatchDag=true; </div><div class="line">   if(waveData==0&amp;&amp;lineWatchDag==false)&#123; </div><div class="line">      lineWatchDag=true; centerAnimator.start(); </div><div class="line">   &#125; </div><div class="line">   postInvalidate(); </div><div class="line"> &#125; &#125;); </div><div class="line">alphaAmimator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override </div><div class="line">public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">   mCircleAlpha3=(int)animation.getAnimatedValue(); </div><div class="line">   postInvalidate(); </div><div class="line">   if(mCircleAlpha3==225)&#123; </div><div class="line">      wavesAminator.start(); </div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;);</div><div class="line"> alphaAmimator3.setDuration(250); </div><div class="line"> alphaAmimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override </div><div class="line">public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">   mCircleAlpha2=(int)animation.getAnimatedValue(); </div><div class="line">   postInvalidate();</div><div class="line">   if(mCircleAlpha2==225)&#123;</div><div class="line">       alphaAmimator3.start(); </div><div class="line">   &#125; </div><div class="line"> &#125; &#125;); </div><div class="line">alphaAmimator2.setDuration(250); </div><div class="line">alphaAmimator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override </div><div class="line">public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">    mCircleAlpha1=(int)animation.getAnimatedValue(); postInvalidate();    </div><div class="line">   if(mCircleAlpha1==225)&#123; </div><div class="line">       alphaAmimator2.start(); </div><div class="line">   &#125; </div><div class="line">&#125;</div><div class="line">&#125;); </div><div class="line">alphaAmimator1.setDuration(250); </div><div class="line">alphaAmimator1.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实就是通过ValueAnimator不断的生成状态量然后调用postInvalidate()不断的刷新View即可实现。最后要想更详细的了解整个流程请看源码吧。<br>奉上<strong><a href="https://github.com/jack921/WebChart" target="_blank" rel="external">源码</a></strong>。如果对你有帮助就请给我给星星或喜欢吧</p>
]]></content>
    
    <summary type="html">
    
      这次高仿的是QQ运动的周报界面的网图。这个控件刚开始的时候以为代码量不大，没想到一路下来界面代码在加上动画代码还是蛮多的。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>模仿企鹅FM播放主页面滑动动态改变各视图的大小</title>
    <link href="http://jack921.win/2016/10/05/%E6%A8%A1%E4%BB%BF%E4%BC%81%E9%B9%85FM%E6%92%AD%E6%94%BE%E4%B8%BB%E9%A1%B5%E9%9D%A2%E6%BB%91%E5%8A%A8%E5%8A%A8%E6%80%81%E6%94%B9%E5%8F%98%E5%90%84%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%A7%E5%B0%8F/"/>
    <id>http://jack921.win/2016/10/05/模仿企鹅FM播放主页面滑动动态改变各视图的大小/</id>
    <published>2016-10-05T06:12:00.000Z</published>
    <updated>2017-04-29T16:44:35.275Z</updated>
    
    <content type="html"><![CDATA[<p>国庆的一个任务就是把自己之前写的代码搬到博客。这次给各位带来的是通过滑动来动态改变各个View的大小进而达到企鹅FM播放页面的滑动效果(仅仅是滑动效果)，老规矩看图先:<br><img src="http://upload-images.jianshu.io/upload_images/925576-241a7390d47fb14c.gif?imageMogr2/auto-orient/strip" alt="fm.gif"><br>首先看看主界面的xml布局：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;@color/black&quot;&gt;</div><div class="line"></div><div class="line">   &lt;com.qqfm.jack.qqfmcontentview.util.ObservableScrollView</div><div class="line">       android:id=&quot;@+id/MenuMainScrollView&quot;</div><div class="line">       android:layout_width=&quot;match_parent&quot;</div><div class="line">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">       &lt;LinearLayout</div><div class="line">           android:id=&quot;@+id/contentshow&quot;</div><div class="line">           android:layout_width=&quot;match_parent&quot;</div><div class="line">           android:layout_height=&quot;match_parent&quot;</div><div class="line">           android:orientation=&quot;horizontal&quot;/&gt;</div><div class="line">   &lt;/com.qqfm.jack.qqfmcontentview.util.ObservableScrollView&gt;</div><div class="line">        </div><div class="line">    &lt;include</div><div class="line">        android:id=&quot;@+id/contentcontrolview&quot;</div><div class="line">        layout=&quot;@layout/contentcontrol&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_alignParentBottom=&quot;true&quot; /&gt;</div><div class="line">        </div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>在这布局里好包含着一个布局就是contentcontrol.xml文件，由于此文件有点多并且也简单所以就不列出来，详细到时可看源码，contentcontrol.xml的界面效果是<br><img src="http://upload-images.jianshu.io/upload_images/925576-c9a0313833a4e0e0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fm2.PNG"><br>这样主体的布局搭建完了。接着我们有一个自定义的类ObservableScrollView.java,而这个类也是很简单的，只是起到了一个接口监听滑动变量的作用，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class ObservableScrollView extends HorizontalScrollView &#123;</div><div class="line"></div><div class="line">    private ScrollViewListener scrollViewListener = null;</div><div class="line"></div><div class="line">    public ObservableScrollView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ObservableScrollView(Context context, AttributeSet attrs,</div><div class="line">                                int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ObservableScrollView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setScrollViewListener(ScrollViewListener scrollViewListener) &#123;</div><div class="line">        this.scrollViewListener = scrollViewListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onScrollChanged(int x, int y, int oldx, int oldy) &#123;</div><div class="line">        super.onScrollChanged(x, y, oldx, oldy);</div><div class="line">        if (scrollViewListener != null) &#123;</div><div class="line">            scrollViewListener.onScrollChanged(this, x, y, oldx, oldy);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如代码所示ObservableScrollView只是继承HorizontalScrollView ，定义接口监听onScrollChanged()方法的各个变量。<br>接下来就是最终要的MainActivity.java里面的代码，这是整个逻辑的核心代码都在这里，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener,ScrollViewListener &#123;</div><div class="line">    private ObservableScrollView mHorizontalScrollView;</div><div class="line">    private LinearLayout Contentshow;</div><div class="line"></div><div class="line">    private RelativeLayout contentcontrolshow=null;</div><div class="line">    private LinearLayout contentcontrolmenu=null;</div><div class="line">    private RelativeLayout contentcontrolbu=null;</div><div class="line">    //屏幕的宽</div><div class="line">    private int width=0;</div><div class="line">    //屏幕的高</div><div class="line">    private int height=0;</div><div class="line">    //信息view</div><div class="line">    private View info;</div><div class="line">    //菜单view</div><div class="line">    private View menu;</div><div class="line">    //控制按钮view</div><div class="line">    private View control;</div><div class="line">    //半个页面的距离</div><div class="line">    private int HalfMenuWidth=0;</div><div class="line">    private int ScrollX;</div><div class="line">    //显示信息百分比</div><div class="line">    private float InfoPercent=0;</div><div class="line">    //菜单百分比</div><div class="line">    private float MenuPercent=0;</div><div class="line">    //底部视图各部分的高度</div><div class="line">    private int ShowHeight;</div><div class="line">    private int MenuHeight;</div><div class="line">    private int ControlHeight;</div><div class="line">    //第一次滑动状态</div><div class="line">    private boolean FirstScoll=true;</div><div class="line">    private boolean InitFirstData=true;</div><div class="line"></div><div class="line">    private Float infoheight=0.0f;</div><div class="line">    private Float menuheight=0.0f;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //真正的View显示时onWindowFocusChanged()函数被执行</div><div class="line">    @Override</div><div class="line">    public void onWindowFocusChanged(boolean hasFocus) &#123;</div><div class="line">        super.onWindowFocusChanged(hasFocus);</div><div class="line">        if(InitFirstData)&#123;</div><div class="line">            width= ScreenUtils.getScreenWidth(this);</div><div class="line">            height=ScreenUtils.getViewHeight(this);</div><div class="line">            initScrollViewPlace();</div><div class="line">            initViewSize();</div><div class="line">            InitFirstData=false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //初始时移动到详细页面</div><div class="line">    public void initScrollViewPlace()&#123;</div><div class="line">        mHorizontalScrollView.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                //滑到显示信息的View</div><div class="line">                mHorizontalScrollView.smoothScrollTo(width,0);</div><div class="line">//              UpdateViewHeight(height/2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //初始化视图</div><div class="line">    public void initView()&#123;</div><div class="line">        try&#123;</div><div class="line">            //初始化HorizontalScrollView</div><div class="line">            mHorizontalScrollView=(ObservableScrollView)findViewById(R.id.MenuMainScrollView);</div><div class="line">            //设置监听</div><div class="line">            mHorizontalScrollView.setOnTouchListener(this);</div><div class="line">            mHorizontalScrollView.setScrollViewListener(this);</div><div class="line">            //初始化底部视图</div><div class="line">            Contentshow=(LinearLayout)findViewById(R.id.contentshow);</div><div class="line">            //初始化contentcontrol的各个部分</div><div class="line">            contentcontrolshow=(RelativeLayout)findViewById(R.id.contentcontrol_show);</div><div class="line">            contentcontrolmenu=(LinearLayout)findViewById(R.id.contentcontrol_menu);</div><div class="line">            contentcontrolbu=(RelativeLayout)findViewById(R.id.controlbutton);</div><div class="line">            //初始化滑动的三个视图</div><div class="line">            info= LayoutInflater.from(this).inflate(R.layout.contentinfo,null);</div><div class="line">            menu= LayoutInflater.from(this).inflate(R.layout.contentmenu, null);</div><div class="line">            control=findViewById(R.id.contentcontrolview);</div><div class="line">        &#125;catch(Exception e)&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void initViewSize()&#123;</div><div class="line">        //半个页面的距离</div><div class="line">        HalfMenuWidth=width/2;</div><div class="line">        //为info,menu和control赋值</div><div class="line">        LinearLayout.LayoutParams InfoLayoutParams=new LinearLayout.LayoutParams(width,height/2);</div><div class="line">        LinearLayout.LayoutParams MenuLayoutParams=new LinearLayout.LayoutParams(width,height);</div><div class="line">        //显示信息的View是屏幕高度的二分之一</div><div class="line">        info.setLayoutParams(InfoLayoutParams);</div><div class="line">        //显示菜单的View是屏幕的高度</div><div class="line">        menu.setLayoutParams(MenuLayoutParams);</div><div class="line">        //控制按钮的View是屏幕高度的二分之一</div><div class="line">        control.getLayoutParams().height=height/2;</div><div class="line">        //添加View</div><div class="line">        Contentshow.addView(menu);</div><div class="line">        Contentshow.addView(info);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        switch(event.getAction())&#123;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                Log.e(&quot;onScrollChanged&quot;,ScrollX+&quot;&quot;);</div><div class="line">                Log.e(&quot;onScrollChanged2&quot;,width+&quot;&quot;);</div><div class="line">                if(ScrollX&gt;HalfMenuWidth)&#123;</div><div class="line">                    mHorizontalScrollView.smoothScrollTo(width,0);</div><div class="line">                &#125;else&#123;</div><div class="line">                    mHorizontalScrollView.smoothScrollTo(0,0);</div><div class="line">                &#125;</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void ChangeHeight(View view,int height)&#123;</div><div class="line">        ViewGroup.LayoutParams layoutParams=view.getLayoutParams();</div><div class="line">        layoutParams.height=height;</div><div class="line">        view.setLayoutParams(layoutParams);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void UpdateViewHeight(int height)&#123;</div><div class="line">        ViewGroup.LayoutParams layoutParams=control.getLayoutParams();</div><div class="line">        layoutParams.height=height;</div><div class="line">        control.setLayoutParams(layoutParams);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onScrollChanged(ObservableScrollView scrollView, int scrollX,</div><div class="line">                                int scrollY,int oldScrollX,int oldScrollY) &#123;</div><div class="line">        this.ScrollX=scrollX;</div><div class="line">        if(FirstScoll)&#123;</div><div class="line">            DecimalFormat df=new DecimalFormat(&quot;0.00&quot;);</div><div class="line">            ShowHeight=contentcontrolshow.getHeight();</div><div class="line">            MenuHeight=contentcontrolmenu.getHeight();</div><div class="line">            ControlHeight=contentcontrolbu.getHeight();</div><div class="line">            // info缩小对应的百分比</div><div class="line">            InfoPercent=Float.valueOf(df.format((float)width/ShowHeight));</div><div class="line">            // menu缩小对应的百分比</div><div class="line">            MenuPercent=Float.valueOf(df.format((float)width/MenuHeight));</div><div class="line">            FirstScoll=false;</div><div class="line">            //按钮保持原来的大小</div><div class="line">            ChangeHeight(contentcontrolbu,ControlHeight);</div><div class="line">            //保持原样</div><div class="line">            ChangeHeight(info,height/2);</div><div class="line">            ChangeHeight(menu,height-ControlHeight);</div><div class="line">        &#125;</div><div class="line">        infoheight=Float.valueOf(scrollX/InfoPercent);</div><div class="line">        menuheight=Float.valueOf(scrollX/MenuPercent);</div><div class="line">        //更新view的高度</div><div class="line">        UpdateViewHeight(infoheight.intValue()+menuheight.intValue()+ControlHeight);</div><div class="line">        //info缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolshow,infoheight.intValue());</div><div class="line">        //menu缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolmenu,menuheight.intValue());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码量还是有点多，不过一步一步来其实也就是几步而已。从OnCreate()开始在setContentView()加载完后，调用initView()方法对变量和子View进行初始化。对mHorizontalScrollView控件进行监听setOnTouchListener和setScrollViewListener，其中是自定义的接口，在监听自定义类ObservableScrollView。contentcontrolshow，contentcontrolmenu，contentcontrolbu分别对应着南海归墟，左中右，和底下五个按钮的View,如上图。info对应着写着contentinfo的View，menu对应着写着contentmenu的View.<br>      接着当Activity显示为可见的时候会回调onWindowFocusChanged()方法。而onWindowFocusChanged()方法里主要的操作是初始化各个子View的大小。有人会问为什么不在onCreate()方法里就初始化子View的大小？因为在onCreate()时此时整个Activity的界面还没有显示，所以等不到屏幕的整个View的大小的参数，所以在onWindowFocusChanged()里，首先把ObservableScrollView包含的info和menu这两个View移到info这个View里。然后动态设置各个子View的大小，核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//显示信息的View是屏幕高度的二分之一</div><div class="line">info.setLayoutParams(InfoLayoutParams);</div><div class="line">//显示菜单的View是屏幕的高度</div><div class="line">menu.setLayoutParams(MenuLayoutParams);</div><div class="line">//控制按钮的View是屏幕高度的二分之一</div><div class="line">control.getLayoutParams().height=height/2;</div></pre></td></tr></table></figure></p>
<p>当我们左右滑动界面是，会回调onScrollChanged()方法。因为Activity初始化完在没滑动的时候会回调onScrollChanged()方法，所以当第一次调用该方法时要计算出写着contentinfo的View和写着contentmenu的View缩小或放大对应的百分比，再设置control里面三个View大小。这样一开始的界面的初始化才能达到效果。<br>最后当滑动的时候我们只需要计算出滑动距离所要改变的大小，<br><code>infoheight=Float.valueOf(scrollX/InfoPercent);
 menuheight=Float.valueOf(scrollX/MenuPercent);</code><br> 再动态的设置各个View的高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//更新control的高度      </div><div class="line">UpdateViewHeight(infoheight.intValue()+menuheight.intValue()+ControlHeight);</div><div class="line">        //contentcontrolshow缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolshow,infoheight.intValue());</div><div class="line">        //contentcontrolmenu缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolmenu,menuheight.intValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 既可以实现滑动改变的效果。      </p>
<p>具体的细节请看<a href="https://github.com/jack921/QQfmContentView" target="_blank" rel="external">源码</a>吧，如果对你有帮助就请给我给星星或喜欢吧</p>
]]></content>
    
    <summary type="html">
    
      这次给各位带来的是通过滑动来动态改变各个View的大小进而达到企鹅FM播放页面的滑动效果(仅仅是滑动效果)
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jack921.win/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自定义天气显示温度变化的LinearChart控件</title>
    <link href="http://jack921.win/2016/10/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%A9%E6%B0%94%E6%98%BE%E7%A4%BA%E6%B8%A9%E5%BA%A6%E5%8F%98%E5%8C%96%E7%9A%84LinearChart%E6%8E%A7%E4%BB%B6/"/>
    <id>http://jack921.win/2016/10/04/自定义天气显示温度变化的LinearChart控件/</id>
    <published>2016-10-04T14:15:00.000Z</published>
    <updated>2017-04-29T16:45:20.419Z</updated>
    
    <content type="html"><![CDATA[<p>这次发表的是前几个月搞定的一个自定义控件，那时自己在写一个小的查看天气的软件，在这过程中就涉及了显示天气变化的折线图，一开始想用一些画图框架来解决问题，不过考虑到就只用到LineChart折线图这一个控件就要导一个库有点太浪费了，所以就自己自定义简易版LineChart算了。好了不说闲话老规矩，先发张效果图先：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-4e07bc394473da0d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img.PNG"><br>这就是这个自定义控件的最终效果，当然颜色你可以自己设置。<br>首先初始化自定义控件的各个变量，以便看得更清楚：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//圆点旁边字体的大小</div><div class="line">private int CircleTextSize;</div><div class="line">//字体颜色</div><div class="line">private int CircleTextColor;</div><div class="line">//高的温度的线的颜色</div><div class="line">private int MinLineColor;</div><div class="line">//低的温度的线的颜色</div><div class="line">private int MaxLineColor;</div><div class="line">//圆点的颜色</div><div class="line"> private int CircleColor;</div><div class="line">//画线的画笔</div><div class="line">private Paint LinePaint;</div><div class="line">//画圆点的画笔</div><div class="line">private Paint CirclePaint;</div><div class="line">//画字的画笔</div><div class="line">private Paint TextPaint;</div><div class="line">//存储Max轴的数据</div><div class="line">private List&lt;Float&gt; YValueMax=new ArrayList&lt;&gt;();</div><div class="line">//存储Min轴的数据</div><div class="line">private List&lt;Float&gt; YValueMin=new ArrayList&lt;&gt;();</div><div class="line">//控件的高度</div><div class="line">private int ChartHeight=0;</div><div class="line">//控件的长度</div><div class="line">private int ChartWidth=0;</div><div class="line">//缓存X轴的数据</div><div class="line">private List&lt;Float&gt; XValueWidth=new ArrayList&lt;&gt;();</div><div class="line">//画出Y轴最大值的数据</div><div class="line">private List&lt;Float&gt; mYAxisMax=new ArrayList&lt;&gt;();</div><div class="line">//画出Y轴最小值的数据</div><div class="line">private List&lt;Float&gt; mYAxisMin=new ArrayList&lt;&gt;();</div><div class="line">//设置透明度</div><div class="line">private int ChartAlpha=0;</div><div class="line">//圆点的半径</div><div class="line">private float mRadius=0;</div><div class="line">//折线的粗细</div><div class="line">private float StrokeWidth=0;</div><div class="line">//文字和上下的边的间隔</div><div class="line">private float marginHeigh=0;</div></pre></td></tr></table></figure>
<p>接着就是初始化各个自定义的变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">public WeatherLineChart(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        //初始化各参数</div><div class="line">        TypedArray typedArray=context.getTheme().obtainStyledAttributes(</div><div class="line">                attrs,R.styleable.WeatherLineChart,defStyleAttr,0);</div><div class="line">        int numCount=typedArray.getIndexCount();</div><div class="line">        for(int i=0;i&lt;numCount;i++)&#123;</div><div class="line">            int attr= typedArray.getIndex(i);</div><div class="line">            switch(attr)&#123;</div><div class="line">                case R.styleable.WeatherLineChart_MaxLineColor:</div><div class="line">                      MaxLineColor=typedArray.getColor(attr, Color.RED);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_MinLineColor:</div><div class="line">                      MinLineColor=typedArray.getColor(attr,Color.BLUE);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_CircleTextColor:</div><div class="line">                      CircleTextColor=typedArray.getColor(attr,Color.GRAY);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_CircleTextSize:</div><div class="line">                      CircleTextSize=typedArray.getDimensionPixelSize(attr,(int)TypedValue.applyDimension(</div><div class="line">                            TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_CircleColor:</div><div class="line">                      CircleColor=typedArray.getColor(attr,Color.BLACK);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_ChartAlpha:</div><div class="line">                      ChartAlpha=typedArray.getInt(attr,220);</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        typedArray.recycle();</div><div class="line"></div><div class="line">        float density=getResources().getDisplayMetrics().density;</div><div class="line">        mRadius = 3 * density;</div><div class="line">        StrokeWidth=density*3;</div><div class="line">    marginHeigh=density*10;</div><div class="line"></div><div class="line">        display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();</div><div class="line">        WrapcontentWidth=display.getWidth();</div><div class="line">        WrapcontentHight=display.getHeight();</div><div class="line"></div><div class="line">        //初始化画线的画笔</div><div class="line">        LinePaint=new Paint();</div><div class="line">        LinePaint.setAntiAlias(true);</div><div class="line">        LinePaint.setStyle(Paint.Style.STROKE);</div><div class="line">        LinePaint.setStrokeWidth(StrokeWidth);</div><div class="line">        LinePaint.setAlpha(ChartAlpha);</div><div class="line"></div><div class="line">        //初始化画圆点的画笔</div><div class="line">        CirclePaint=new Paint();</div><div class="line">        CirclePaint.setAntiAlias(true);</div><div class="line">        CirclePaint.setColor(CircleColor);</div><div class="line">        CirclePaint.setAlpha(ChartAlpha);</div><div class="line"></div><div class="line">        //初始化画字的画笔</div><div class="line">        TextPaint=new Paint();</div><div class="line">        TextPaint.setAntiAlias(true);</div><div class="line">        TextPaint.setTextSize(CircleTextSize);</div><div class="line">        TextPaint.setColor(CircleTextColor);</div><div class="line">        TextPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">        TextPaint.setAlpha(ChartAlpha);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这的代码虽然有点多，不过都只是一些初始化的操作而已，所以看起来也不会很复杂。而最重要的代码段当然是绘制View的onDraw()方法。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        ChartHeight=getHeight();</div><div class="line">        ChartWidth=getWidth();</div><div class="line">        if(XValueWidth!=null&amp;&amp;mYAxisMax!=null&amp;&amp;mYAxisMin!=null)&#123;</div><div class="line">            XValueWidth.clear();</div><div class="line">            mYAxisMax.clear();</div><div class="line">            mYAxisMin.clear();</div><div class="line">        &#125;</div><div class="line">        //初始化X轴的值</div><div class="line">        initXValueData();</div><div class="line">        //初始化Y轴的值</div><div class="line">        initYValueData();</div><div class="line">        //画出最大值的线</div><div class="line">        DrawLine(canvas,XValueWidth,mYAxisMax,YValueMax,true);</div><div class="line">        //画出最小值得线</div><div class="line">        DrawLine(canvas,XValueWidth,mYAxisMin,YValueMin,false);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个onDraw()方法最重要的就是底下的四个方法。其中initXValueData()是算出各个点在这个控件的X轴的位置数据，initYValueData()是画出两条线的Y轴的位置数据。剩下的DrawLine()方法就是具体的画出每条折线。接下来，看看initXValueData()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//初始化X轴的值</div><div class="line">public void initXValueData()&#123;</div><div class="line">     //得到数据的个数</div><div class="line">    int XNum=YValueMax.size();</div><div class="line">    //得到距离最左边的距离</div><div class="line">    float BaseWidth=ChartWidth/(XNum*2);</div><div class="line">    //得到各点之间的间隔</div><div class="line">    float tempWdith=BaseWidth*2;</div><div class="line">    for(int i=0;i&lt;XNum;i++)&#123;</div><div class="line">    //得到各点的具体X轴坐标</div><div class="line">        XValueWidth.add(BaseWidth);</div><div class="line">        BaseWidth+=tempWdith;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法我注释已经很清楚了，就是得到第一个点到最左边的距离(BaseWidth)。而各个点之间的距离是BaseWidth的两倍，进而就可以得到每个点的X轴的坐标数据。然后就是initYValueData(),代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">//初始化Y轴的值</div><div class="line">public void initYValueData()&#123;</div><div class="line">    //获取最大值</div><div class="line">    float tempMax=YValueMax.get(0);</div><div class="line">    //获取最小值</div><div class="line">    float tempMin=YValueMax.get(0);</div><div class="line"></div><div class="line">    //算出最高温度的最大值的最小值</div><div class="line">    for(int i=1;i&lt;YValueMax.size();i++)&#123;</div><div class="line">        if(tempMax&lt;YValueMax.get(i))&#123;</div><div class="line">            tempMax=YValueMax.get(i);</div><div class="line">        &#125;</div><div class="line">        if(tempMin&gt;YValueMax.get(i))&#123;</div><div class="line">            tempMin=YValueMax.get(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //和最高温度的最大值和最小值比较进而得到所有数据的最大值和最小值</div><div class="line">    for(int i=1;i&lt;YValueMin.size();i++)&#123;</div><div class="line">        if(tempMax&lt;YValueMin.get(i))&#123;</div><div class="line">            tempMax=YValueMin.get(i);</div><div class="line">        &#125;</div><div class="line">        if(tempMin&gt;YValueMin.get(i))&#123;</div><div class="line">            tempMin=YValueMin.get(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  //温差</div><div class="line">  float parts=tempMax-tempMin;</div><div class="line">  //y轴一端到控件一端的距离</div><div class="line">  float length = CircleTextSize+mRadius+marginHeigh;</div><div class="line">  //y轴高度</div><div class="line">  float yAxisHeight = ChartHeight-length*2;</div><div class="line"></div><div class="line">    if(parts==0)&#123;</div><div class="line">        //都为零没有温差</div><div class="line">        for(int i=0;i&lt;YValueMax.size();i++)&#123;</div><div class="line">            mYAxisMax.add((float) (ChartHeight/2));</div><div class="line">            mYAxisMin.add((float) (ChartHeight/2));</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        //有温差</div><div class="line">        float partVlaue=yAxisHeight/parts;</div><div class="line">        //最小高度值</div><div class="line">        for(int i=0;i&lt;YValueMax.size();i++)&#123;</div><div class="line">            //具体的Y轴坐标数据</div><div class="line">            mYAxisMax.add(ChartHeight-partVlaue*(YValueMax.get(i)-tempMin)-length);</div><div class="line">            mYAxisMin.add(ChartHeight-partVlaue*(YValueMin.get(i)-tempMin)-length);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化Y轴的坐标数据时略显复杂。总的思路就是首先的得到上下两个折线总的数据的最大值和最小值。即tempMax和tampMin分别是总数据的最大值和最小值。最大值和最小值的相减即可得到温差。因为两条折线的上下是有文字显示每个点的，所以实际的Y轴的高度是整个View的高度减去文字大小和原点半径和设置的间隔。即<code>//y轴一端到控件一端的距离
      float length = CircleTextSize+mRadius+marginHeigh;
      //y轴高度
      float yAxisHeight = ChartHeight-length*2;</code>这段代码的意思。当温差(parts)等于0时，即各点温度都是一样的时候，两条折线是显示在整个View的中间的。否则是有温差情况，高度除于温差得到最小的高度值<code>float partVlaue=yAxisHeight/parts;</code>，然后整个View的高度减去每个实际的温度数据减去最小值再乘以最小的高度值的值在减去底下的文字高度等(length),就是这一点具体的Y轴的高度。上下两条的折线的原理都是一样的，为此就可以得到具体的Y轴的位置数值。<br>    其实大部分代码都是在初始化数据，等数据初始化完之后就是画图的阶段了，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//画图</div><div class="line">  public void DrawLine(Canvas canvas,List&lt;Float&gt; XValue,List&lt;Float&gt; mYAxis,List&lt;Float&gt; YValue,boolean top)&#123;</div><div class="line">        for(int i=0;i&lt;XValue.size();i++)&#123;</div><div class="line">            if(top)&#123;</div><div class="line">                //画具体温度数据</div><div class="line">                LinePaint.setColor(MaxLineColor);</div><div class="line">                canvas.drawText(YValue.get(i)+&quot;&quot;,XValue.get(i),mYAxis.get(i)-mRadius,TextPaint);</div><div class="line">            &#125;else&#123;</div><div class="line">                LinePaint.setColor(MinLineColor);</div><div class="line">                //画具体温度数据</div><div class="line">                canvas.drawText(YValue.get(i)+&quot;&quot;,XValue.get(i),mYAxis.get(i)+CircleTextSize+mRadius,TextPaint);</div><div class="line">            &#125;</div><div class="line">            if(i!=XValue.size()-1)&#123;</div><div class="line">                </div><div class="line">                //画每两点之间的连线</div><div class="line">                canvas.drawLine(XValue.get(i),mYAxis.get(i),XValue.get(i+1),mYAxis.get(i+1),LinePaint);</div><div class="line">            &#125;</div><div class="line">            //画每一点的原点</div><div class="line">            canvas.drawCircle(XValue.get(i),mYAxis.get(i),mRadius,CirclePaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中top参数假如是true的话代表的是上面一条折线，false的画代表的是下面的一条折线图。其实只要得到上面的各个点的X,Y轴坐标的数据之后剩下的只是用Canvas进行画线，画点和画文字，具体的看代码注释，注释已经写得很清楚了。 </p>
<p>最后奉上<a href="https://github.com/jack921/WeatherLineChartView" target="_blank" rel="external">源码</a>。</p>
]]></content>
    
    <summary type="html">
    
      这次发表的是前几个月搞定的一个自定义控件，那时自己在写一个小的查看天气的软件，在这过程中就涉及了显示天气变化的折线图，一开始想用一些画图框架来解决问题，不过考虑到就只用到LineChart折线图这一个控件就要导一个库有点太浪费了，所以就自己自定义简易版LineChart算了。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义控件" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>模仿QQ运动item的界面</title>
    <link href="http://jack921.win/2016/09/25/%E6%A8%A1%E4%BB%BFQQ%E8%BF%90%E5%8A%A8item%E7%9A%84%E7%95%8C%E9%9D%A2/"/>
    <id>http://jack921.win/2016/09/25/模仿QQ运动item的界面/</id>
    <published>2016-09-25T14:42:00.000Z</published>
    <updated>2017-04-29T16:44:07.347Z</updated>
    
    <content type="html"><![CDATA[<p>首先按照老规矩，无图无真相嘛，先看看先：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-2cbef50cefed2c44.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p>
<a id="more"></a>
<p>是不是很像呢，那具体是实现是怎样的呢，即使概括的来说就是<br>1.计算各个变量的值(记得是会随整个View的大小变化而变化)。<br>2其次利用好canvas.translate()这个方法，计算好大小移动canvas的原点。<br>3最后就是调用api提供的各种方法画图就是了。这么说是不是太过于简略了呢，好，现在就来</p>
<p>看看那具体的吧。首先看看xml有什么参数吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;com.example.jack.besselcurve.BesselCurveView </div><div class="line">   android:id=&quot;@+id/besselCurveView&quot; </div><div class="line">   android:layout_width=&quot;match_parent&quot; </div><div class="line">   android:layout_height=&quot;match_parent&quot; </div><div class="line">   android:background=&quot;#ffffff&quot; </div><div class="line">   android:layout_centerHorizontal=&quot;true&quot; </div><div class="line">   app:besselColor=&quot;@color/besselColor&quot; </div><div class="line">   app:besselColorText=&quot;@color/besselColorText&quot; </div><div class="line">   app:friendAverageStep=&quot;6752&quot; </div><div class="line">   app:averageStep=&quot;2603&quot; </div><div class="line">   app:champion=&quot;Jack&quot; </div><div class="line">   app:allStep=&quot;8765&quot; </div><div class="line">   app:time=&quot;17:26&quot; </div><div class="line">   app:ranking=&quot;15&quot;&gt;</div><div class="line">&lt;/com.example.jack.besselcurve.BesselCurveView&gt;</div></pre></td></tr></table></figure></p>
<p>各参数对应的解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//时间 </div><div class="line">private String time; </div><div class="line">//所有步数 </div><div class="line">private int allStop; </div><div class="line">//还有平均步数 </div><div class="line">private int friendAverageStep; </div><div class="line">//平均步数 </div><div class="line">private int averageStep; </div><div class="line">//排名 </div><div class="line">private String ranking; </div><div class="line">//头像 </div><div class="line">private Bitmap champion_icon; </div><div class="line">//冠军名字 </div><div class="line">private String champion;</div></pre></td></tr></table></figure></p>
<p>接着代码段初始化所有参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">TypedArray mTypedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BesselCurveView,defStyleAttr,0); </div><div class="line">int numCount=mTypedArray.getIndexCount(); </div><div class="line">for(int i=0;i&lt;numCount;i++)&#123; </div><div class="line">int attr=mTypedArray.getIndex(i); </div><div class="line">switch(attr)&#123; </div><div class="line">     case R.styleable.BesselCurveView_allStep: </div><div class="line">     allStop=mTypedArray.getInt(attr,0); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_averageStep: </div><div class="line">     averageStep=mTypedArray.getInt(attr,0); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_friendAverageStep: </div><div class="line">     friendAverageStep = mTypedArray.getInt(attr,0); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_time: </div><div class="line">     time=mTypedArray.getString(attr); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_ranking: </div><div class="line">     ranking=mTypedArray.getString(attr); </div><div class="line">     break;</div><div class="line">case R.styleable.BesselCurveView_champion: </div><div class="line">     champion=mTypedArray.getString(attr); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_besselColor: </div><div class="line">     mBesselCurveColor=mTypedArray.getColor(attr,Color.BLUE); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_besselColorText:</div><div class="line">    besselColorText=mTypedArray.getColor(attr,Color.GRAY); break; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是每个自定义都有的相当于模板，来初始化参数，都看的明白吧。接下来也很简单，就是初始化画笔等变量，以便于后面看画图更简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public void initValue()&#123; </div><div class="line">animSet=new AnimatorSet(); </div><div class="line">//外圆的画笔 </div><div class="line">mCirclePaint=new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">mCirclePaint.setStyle(Paint.Style.STROKE); </div><div class="line">mCirclePaint.setStrokeWidth(radius/10); </div><div class="line">mCirclePaint.setStrokeJoin(Paint.Join.ROUND);</div><div class="line">mCirclePaint.setStrokeCap(Paint.Cap.ROUND); </div><div class="line">mCirclePaint.setAntiAlias(true); </div><div class="line">//中间的文字的画笔 </div><div class="line">mCenterTextPaint=new Paint(); </div><div class="line">mCenterTextPaint.setColor(mBesselCurveColor); </div><div class="line">mCenterTextPaint.setTextSize(radius/5); </div><div class="line">mCenterTextPaint.setAntiAlias(true); </div><div class="line">//除中间之外的文字的画笔 </div><div class="line">mTextPaint=new Paint(); </div><div class="line">mTextPaint.setAntiAlias(true); </div><div class="line">//最低下的矩形 </div><div class="line">mBottomRectPaint=new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">mBottomRectPaint.setColor(mBesselCurveColor); </div><div class="line">mBottomRectPaint.setAntiAlias(true); </div><div class="line">//虚线的画笔 </div><div class="line">mDottedLinePaint = new Paint(); </div><div class="line">mDottedLinePaint.setAntiAlias(true); </div><div class="line">mDottedLinePaint.setStyle(Paint.Style.STROKE); </div><div class="line">mDottedLinePaint.setStrokeWidth(2); mDottedLinePaint.setColor(mBesselCurveColor); mDottedLinePaint.setPathEffect(new DashPathEffect(new float[]&#123;5,5&#125;,1)); //画波浪线画笔 WavylinesPaint=new Paint(); WavylinesPaint = new Paint(Paint.ANTI_ALIAS_FLAG); WavylinesPaint.setColor(wavyColor); WavylinesPaint.setStyle(Paint.Style.FILL_AND_STROKE); //虚线的画线 mDottedLinePath=new Path(); </div><div class="line">//画波浪线画线 </div><div class="line">WavyLinePath=new Path(); </div><div class="line">//底下更多的画线 </div><div class="line">morePath=new Path(); </div><div class="line">mWaveCount = (int) Math.round(widthView / mWaveLength + 1.5);</div><div class="line">marginBottomText=radius/4; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，最重要的初始化都差不多了，现在就来画图(画画)吧先贴出所有画的代码然后再逐一讲解吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123; </div><div class="line">super.onDraw(canvas); </div><div class="line">canvas.save(); </div><div class="line">canvas.translate(widthView/2,(heightView*((float)2/3))/2); </div><div class="line">//画内圆圈 </div><div class="line">   mCirclePaint.setColor(besselColorText); </div><div class="line">   RectF mCircleRectF=new RectF(-radius,-radius,radius,radius); </div><div class="line">   canvas.drawArc(mCircleRectF,120,300,false,mCirclePaint); </div><div class="line">//画外圆圈 </div><div class="line">   mCirclePaint.setColor(mBesselCurveColor); </div><div class="line">   canvas.drawArc(mCircleRectF,120,mCircleNum,false,mCirclePaint); </div><div class="line">//画中间的文字</div><div class="line">   Rect mCenterRect=new Rect(); String tempAllStop=mCenterNum+&quot;&quot;; </div><div class="line">   mCenterTextPaint.getTextBounds(tempAllStop,0,tempAllStop.length(),mCenterRect);</div><div class="line">   int halfWidthText=(mCenterRect.right-mCenterRect.left)/2; </div><div class="line">   int halfHeightText=(mCenterRect.bottom-mCenterRect.top)/2; </div><div class="line">   canvas.drawText(tempAllStop,-halfWidthText,halfHeightText,mCenterTextPaint); </div><div class="line">//画上边的文字 </div><div class="line">  mTextPaint.setColor(besselColorText); mTextPaint.setTextSize(radius/6); </div><div class="line">  String tempFriendAverageStep=stringTemplate(R.string.besselTime,time); </div><div class="line">  Rect mTopRect=new Rect();     mTextPaint.getTextBounds(tempFriendAverageStep,0,tempFriendAverageStep.length(),mTopRect); </div><div class="line">  int halfTopWidthText=(mTopRect.right-mTopRect.left)/2;    </div><div class="line">  canvas.drawText(tempFriendAverageStep,-halfTopWidthText,-(halfHeightText+marginText),mTextPaint); </div><div class="line">//画下边的文字 String     </div><div class="line">  tempAverageStep=stringTemplate(R.string.friendAverageStep,friendAverageStep+&quot;&quot;);   </div><div class="line">  Rect mBottomRect=new Rect(); </div><div class="line"> mTextPaint.getTextBounds(tempAverageStep,0,tempAverageStep.length(),mBottomRect);</div><div class="line">  int halfBottomWidthText=(mBottomRect.right-mBottomRect.left)/2; </div><div class="line">  int mBottomHeightText=(mBottomRect.bottom-mBottomRect.top);</div><div class="line">  canvas.drawText(tempAverageStep,-  halfBottomWidthText,mBottomHeightText+halfHeightText+marginText,mTextPaint); </div><div class="line">//画排名 Rect mNumRect=new Rect(); </div><div class="line">  mCenterTextPaint.getTextBounds(ranking,0,ranking.length(),mNumRect); </div><div class="line">  int halfNum=(mNumRect.right-mNumRect.left)/2; </div><div class="line">  mCenterTextPaint.setTextSize(40); canvas.drawText(ranking,-  halfNum,radius,mCenterTextPaint); </div><div class="line">  String rankingLeft=getContext().getResources().getString(R.string.ranking_left); </div><div class="line">  mTextPaint.getTextBounds(rankingLeft,0,rankingLeft.length(),mNumRect);</div><div class="line">  canvas.drawText(rankingLeft,-halfNum-(mNumRect.right-  mNumRect.left)/2-20,radius,mTextPaint);   </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.ranking_right),halfNum+10,radius,mTextPaint); </div><div class="line">canvas.restore(); </div><div class="line">//画最近七天和平均运动 </div><div class="line">  mTextPaint.setTextSize(radius/9); canvas.save(); canvas.translate(0,heightView*((float)2/3));   </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.nextSevenDay),marginLi neChart,0,mTextPaint); </div><div class="line">  Rect mPercentRect=new Rect(); </div><div class="line">  String mPercentText=stringTemplate(R.string.averageStep,averageStep+&quot;&quot;); </div><div class="line">  mTextPaint.getTextBounds(mPercentText,0,mPercentText.length(),mPercentRect);</div><div class="line">  canvas.drawText(mPercentText,widthView-marginLineChart-(mPercentRect.right-  mPercentRect.left),0,mTextPaint); </div><div class="line">//画虚线 </div><div class="line">  mDottedLinePath.moveTo(marginLineChart,marginBottomText); </div><div class="line">  mDottedLinePath.lineTo(widthView-marginLineChart,marginBottomText); </div><div class="line">  canvas.drawPath(mDottedLinePath,mDottedLinePaint); </div><div class="line">//画7天数据柱状图 mTextPaint.setTextSize(radius/9);</div><div class="line">   int lineWidth=(widthView-marginLineChart*2)/8; </div><div class="line">  mCalendar.setTime(new Date()); </div><div class="line">  RectF mRecf=null; </div><div class="line">  if(mListStep.size()&gt;0)&#123; </div><div class="line">  for(int i=mListStep.size();i&gt;=1;i--)&#123; </div><div class="line">  if(mListStep.get(i-1)!=0)&#123; </div><div class="line">  int startX=marginLineChart+lineWidth*i-radius/23; </div><div class="line">  int endX=marginLineChart+lineWidth*i+radius/23; </div><div class="line">  if(mListStep.get(i-1)&gt;mStandardStop)&#123; </div><div class="line">//达标 mTextPaint.setColor(mBesselCurveColor); </div><div class="line">  int exceed=mListStep.get(i-1)-mStandardStop; </div><div class="line">  float standard=(float)</div><div class="line">  (mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop))); </div><div class="line">  mRecf=new RectF(startX,marginBottomText-(standard&gt;mCircleRectHeight?mCircleRectHeight:standard) ,endX,marginBottomText+mCircleRectHeight);</div><div class="line">  canvas.drawRoundRect(mRecf,50,50,mTextPaint); </div><div class="line">&#125;else&#123; </div><div class="line">//不达标</div><div class="line">  mTextPaint.setColor(besselColorText); </div><div class="line">  float noStandard=(float)(mCircleRectHeight*Double.valueOf(mListStep.get(i-1)/Double.valueOf(mStandardStop))); </div><div class="line">  mRecf=new RectF(startX,marginBottomText,endX,marginBottomText+(   noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard)); </div><div class="line">  canvas.drawRoundRect(mRecf,50,50,mTextPaint);</div><div class="line"> &#125;</div><div class="line"> &#125; </div><div class="line">//画底下的日期 </div><div class="line">  mTextPaint.setColor(besselColorText); </div><div class="line">mCalendar.set(Calendar.DAY_OF_MONTH,mCalendar.get(Calendar.DAY_OF_MONTH)-1); </div><div class="line">  Rect rect =new Rect();</div><div class="line">  String number=stringTemplate(R.string.day,mCalendar.get(Calendar.DAY_OF_MONTH)+&quot;&quot;);</div><div class="line">   mTextPaint.getTextBounds(number,0,number.length(),rect); </div><div class="line">   canvas.drawText(number,(marginLineChart+lineWidth*i)-(rect.right-rect.left)/2,marginBottomText+70,mTextPaint); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">  canvas.restore();</div><div class="line"> //画波浪图形 </div><div class="line">  canvas.save(); </div><div class="line">  float mWavyHeight=heightView*((float)4/5)+50; </div><div class="line">  canvas.translate(0,mWavyHeight); </div><div class="line">  WavyLinePath.reset(); </div><div class="line">  WavyLinePath.moveTo(-mWaveLength+ mOffset,0); </div><div class="line">  int wHeight=radius/5; </div><div class="line">  for(int i=0;i&lt;mWaveCount;i++)&#123; </div><div class="line">    WavyLinePath.quadTo((-mWaveLength*3/4)+(i*mWaveLength)+mOffset,wHeight,(-mWaveLength/2)+(i*mWaveLength)+mOffset,0); </div><div class="line">    WavyLinePath.quadTo((-mWaveLength/4)+(i * mWaveLength)+mOffset,- wHeight,i*mWaveLength+mOffset,0); </div><div class="line">&#125; </div><div class="line">  WavyLinePath.lineTo(widthView,heightView-mWavyHeight); </div><div class="line">  WavyLinePath.lineTo(0,heightView-mWavyHeight);</div><div class="line">  WavyLinePath.close();</div><div class="line">  canvas.drawPath(WavyLinePath,WavylinesPaint); </div><div class="line">  canvas.restore(); </div><div class="line">//画最低的信息 </div><div class="line">  float removeHeight=mWavyHeight+(radius/5); </div><div class="line">  canvas.translate(0,removeHeight); </div><div class="line">  float rectHeight=heightView-removeHeight; </div><div class="line">//画底下的矩形 </div><div class="line">  RectF rect = new RectF(0,0,widthView,rectHeight); </div><div class="line">  canvas.drawRect(rect,mBottomRectPaint); </div><div class="line">//画头像 </div><div class="line">  int bitmap_icon_x=radius/5;</div><div class="line">  float centerHeight=rectHeight/2; </div><div class="line">  Bitmap bitmap_icon=getRoundCornerImage(champion_icon,50,radius/5,radius/5); </div><div class="line">  canvas.drawBitmap(bitmap_icon,bitmap_icon_x,centerHeight-  bitmap_icon.getHeight()/2,null);</div><div class="line">  mTextPaint.setColor(Color.WHITE); mTextPaint.setTextSize(radius/8);</div><div class="line"> //画冠军文字 </div><div class="line">  int champion_x=radius/2; Rect mNameRect=new Rect(); </div><div class="line">  String championMame=stringTemplate(R.string.champion,champion); </div><div class="line">  mTextPaint.getTextBounds(championMame,0,championMame.length(),mNameRect); </div><div class="line">  canvas.drawText(championMame,champion_x,(rectHeight+(mNameRect.bottom-mNameRect.top))/2,mTextPaint); </div><div class="line">//画查看 </div><div class="line">  String look=getContext().getResources().getString(R.string.check); </div><div class="line">  mTextPaint.getTextBounds(look,0,look.length(),mNameRect); </div><div class="line">  canvas.drawText(look,widthView-(radius*(float)2/3),(rectHeight+(mNameRect.bottom-mNameRect.top))/2,mTextPaint);</div><div class="line"> //画更多图像 </div><div class="line">  float morePoint=(radius*(float)2/3)/2; </div><div class="line">  canvas.drawLine(widthView-morePoint,centerHeight-(mNameRect.bottom-  mNameRect.top)/2, widthView-morePoint+15,centerHeight,mTextPaint);</div><div class="line">  canvas.drawLine(widthView-morePoint+15,centerHeight,widthView-morePoint,    centerHeight+(mNameRect.bottom-mNameRect.top)/2,mTextPaint);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>代码是不是有点多呢，没办法画的东西本身就有点多了。好了刚开始我说要移动canvas的原点是不是,你看刚开始就移动了吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">super.onDraw(canvas);</div><div class="line">canvas.save();</div><div class="line">canvas.translate(widthView/2,(heightView*((float)2/3))/2);</div></pre></td></tr></table></figure>
<p>1、移动原点到整个圆弧的中心，其中widthView是整个view的宽，heightView是整个view的高,如下图:<br><img src="http://upload-images.jianshu.io/upload_images/925576-581675ed6dc8269f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="center.PNG"></p>
<p>就在上图的蓝色点就是现在的原点。<br>然后在这原点里画圆弧呗，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> //画内圆圈 </div><div class="line">mCirclePaint.setColor(besselColorText); </div><div class="line">RectF mCircleRectF=new RectF(-radius,-radius,radius,radius); </div><div class="line">canvas.drawArc(mCircleRectF,120,300,false,mCirclePaint);</div><div class="line"> //画外圆圈 </div><div class="line">mCirclePaint.setColor(mBesselCurveColor); </div><div class="line">canvas.drawArc(mCircleRectF,120,mCircleNum,false,mCirclePaint);</div></pre></td></tr></table></figure></p>
<p>mCircleNum是为了实现动画效果的，这后面会讲，这样圆弧就画完了。效果也是如上图。<br>2.在中心点再画今天的走的总路程，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> //画中间的文字 </div><div class="line">Rect mCenterRect=new Rect(); </div><div class="line">String tempAllStop=mCenterNum+&quot;&quot;; </div><div class="line">mCenterTextPaint.getTextBounds(tempAllStop,0,tempAllStop.length(),mCenterRect);</div><div class="line">int halfWidthText=(mCenterRect.right-mCenterRect.left)/2; </div><div class="line">int halfHeightText=(mCenterRect.bottom-mCenterRect.top)/2; </div><div class="line">canvas.drawText(tempAllStop,-halfWidthText,halfHeightText,mCenterTextPaint);</div></pre></td></tr></table></figure></p>
<p>基本的实现思路是用Rect在这个类计算出你要画文字的大小，然后在原点画，不过，记得这里的x,y点是在原点的左下，具体详解看<a href="http://www.jianshu.com/p/606ec69fb517" target="_blank" rel="external">这里写链接内容</a><br>接这就是画时间和好友平均步数，其实实现原理也是一样的，只不过在上面的高度是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(tempFriendAverageStep,-halfTopWidthText,-(halfHeightText+marginText),mTextPaint);</div></pre></td></tr></table></figure></p>
<p>是中心总步数高度的一半再加间隔，而下面的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(tempAverageStep,-halfBottomWidthText,mBottomHeightText+halfHeightText+marginText,mTextPaint);</div></pre></td></tr></table></figure></p>
<p>是下面文字总的高度再加上中心总步数高度的一半再加间隔。现在效果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-ee3b9a808c966c4a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img1.PNG"></p>
<p>接着就是画排名，首先还是套路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Rect mNumRect=new Rect(); </div><div class="line">mCenterTextPaint.getTextBounds(ranking,0,ranking.length(),mNumRect); </div><div class="line">int halfNum=(mNumRect.right-mNumRect.left)/2; </div><div class="line">mCenterTextPaint.setTextSize(40); </div><div class="line">canvas.drawText(ranking,-halfNum,radius,mCenterTextPaint);</div></pre></td></tr></table></figure></p>
<p>计算出排名文字的大小，然后在中心原点x轴为排名文字的一半，y轴问为半径画出排名，效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-0048bd3e09c9eddf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.PNG"></p>
<p>接着就在排名的两端画文字就行了，带代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String rankingLeft=getContext().getResources().getString(R.string.ranking_left); </div><div class="line">mTextPaint.getTextBounds(rankingLeft,0,rankingLeft.length(),mNumRect); </div><div class="line">canvas.drawText(rankingLeft,-halfNum-(mNumRect.right-mNumRect.left)/2-20,radius,mTextPaint); </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.ranking_right),halfNum+10,radius,mTextPaint);</div></pre></td></tr></table></figure></p>
<p>思路还是一样，就不说了。此时效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-b1c508945bc405a9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.PNG"></p>
<p>画底下柱状图是，首先用canvas.restore();恢复原点到(0,0)的状态，再用canvas.translate(0,heightView*((float)2/3));把原点移动到圆弧的下面，接着又可以继续画,实现思路和前面一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//画最近七天和平均运动 </div><div class="line">mTextPaint.setTextSize(radius/9); </div><div class="line">canvas.save(); canvas.translate(0,heightView*((float)2/3)); </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.nextSevenDay),marginLineChart,0,mTextPaint); </div><div class="line">Rect mPercentRect=new Rect();</div><div class="line"> String mPercentText=stringTemplate(R.string.averageStep,averageStep+&quot;&quot;); </div><div class="line">mTextPaint.getTextBounds(mPercentText,0,mPercentText.length(),mPercentRect); </div><div class="line">canvas.drawText(mPercentText,widthView-marginLineChart-(mPercentRect.right-mPercentRect.left),0,mTextPaint); </div><div class="line">//画虚线</div><div class="line"> mDottedLinePath.moveTo(marginLineChart,marginBottomText); </div><div class="line">mDottedLinePath.lineTo(widthView-marginLineChart,marginBottomText); </div><div class="line">canvas.drawPath(mDottedLinePath,mDottedLinePaint);</div></pre></td></tr></table></figure>
<p>此时效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-29ecb4e0d5ad9f08.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img4.PNG"><br>接下来画柱状图，首先<code>int lineWidth=(widthView-marginLineChart*2)/8;</code>计算出每个点之间的间隔</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-7252e4b4cc66a249.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img5.PNG"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">if(mListStep.size()&gt;0)&#123; </div><div class="line">  for(int i=mListStep.size();i&gt;=1;i--)&#123; </div><div class="line">    if(mListStep.get(i-1)!=0)&#123; </div><div class="line">    //计算出起始点X和终点X的值 </div><div class="line">     int startX=marginLineChart+lineWidth*i-radius/23; </div><div class="line">     int endX=marginLineChart+lineWidth*i+radius/23; </div><div class="line">    if(mListStep.get(i-1)&gt;mStandardStop)&#123; </div><div class="line">   //达标 mTextPaint.setColor(mBesselCurveColor); </div><div class="line">   //超出的部分  </div><div class="line">     int exceed=mListStep.get(i-1)-mStandardStop;</div><div class="line">  //算出柱体大小 float standard=(float)   (mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop))); </div><div class="line">    mRecf=new RectF(startX,marginBottomText-(standard&gt;mCircleRectHeight?mCircleRectHeight:standard) ,endX,marginBottomText+mCircleRectHeight); </div><div class="line">   canvas.drawRoundRect(mRecf,50,50,mTextPaint); </div><div class="line">&#125;else&#123; </div><div class="line">  //不达标 </div><div class="line">   mTextPaint.setColor(besselColorText); </div><div class="line"> //算出不达标柱体的大小 </div><div class="line">  float noStandard=(float)(mCircleRectHeight*Double.valueOf(mListStep.get(i-1)/Double.valueOf(mStandardStop))); </div><div class="line">   mRecf=new RectF(startX,marginBottomText,endX,marginBottomText+(   noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard)); </div><div class="line">   canvas.drawRoundRect(mRecf,50,50,mTextPaint); </div><div class="line">&#125;</div><div class="line">&#125; </div><div class="line"> //画底下的日期 </div><div class="line">   mTextPaint.setColor(besselColorText); </div><div class="line">mCalendar.set(Calendar.DAY_OF_MONTH,mCalendar.get(Calendar.DAY_OF_MONTH)-1); </div><div class="line">   Rect rect =new Rect(); </div><div class="line">   String number=stringTemplate(R.string.day,mCalendar.get(Calendar.DAY_OF_MONTH)+&quot;&quot;);</div><div class="line">   mTextPaint.getTextBounds(number,0,number.length(),rect); </div><div class="line">   canvas.drawText(number,(marginLineChart+lineWidth*i)-(rect.right-rect.left)/2,marginBottomText+70,mTextPaint); </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mStandardStop是达标的数据，当数据小于mStandardStop就是不达标，所以柱状图就要画在虚线的下面，mCircleRectHeight是柱状图一半的高<br><code>float standard=(float)(mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop)));</code>这句代码是计算出下面圆柱体的具体大小，<code>noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard</code>当，但柱状图大于mCircleRectHeight时就用mCircleRectHeight不然就根据计算的数值来。当数据大于mStandardStop时，<br><code>int exceed=mListStep.get(i-1)-mStandardStop;float standard=(float)(mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop)));</code>exceed是计算出超出的部分，再拿超出的部分算出具体的大小，剩下的和小于的一样，当standard大于最大的mCircleRectHeight是就用mCircleRectHeight否则就用standard。底下日期是用Calendar得到前7天的日期再循环的画上去，思路和上面一样不再赘述。此时效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a8549eda3d697386.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img6.PNG"></p>
<p>接下来是画波浪，画波浪是用了贝塞尔曲线的方法画的，如果不懂贝塞尔曲线请参考<a href="http://gold.xitu.io/post/57adbd9c79bc440058c9962d" target="_blank" rel="external">这里写链接内容</a>，这也是我学贝塞尔曲线参考的内容。首先我们又把canvas恢复到原点<code>canvas.restore();</code>再用<code>float mWavyHeight=heightView*((float)4/5)+50; canvas.translate(0,mWavyHeight);</code>移动这个位置，是为了适配。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">WavyLinePath.reset(); </div><div class="line">WavyLinePath.moveTo(-mWaveLength+ mOffset,0); </div><div class="line">int wHeight=radius/5; for(int i=0;i&lt;mWaveCount;i++)&#123; </div><div class="line">WavyLinePath.quadTo((-mWaveLength*3/4)+(i*mWaveLength)+mOffset,wHeight,(-mWaveLength/2)+(i*mWaveLength)+mOffset,0); </div><div class="line">WavyLinePath.quadTo((-mWaveLength/4)+(i * mWaveLength)+mOffset,-wHeight,i*mWaveLength+mOffset,0); </div><div class="line">&#125; </div><div class="line">WavyLinePath.lineTo(widthView,heightView-mWavyHeight); </div><div class="line">WavyLinePath.lineTo(0,heightView-mWavyHeight); </div><div class="line">WavyLinePath.close(); </div><div class="line">canvas.drawPath(WavyLinePath,WavylinesPaint);</div></pre></td></tr></table></figure>
<p>WavyLinePath.quadTo就是贝塞尔曲线调的方法，for循环几次使之形成波浪图形，记得一样要WavyLinePath.lineTo().不让会出现底下有些地方会画不到。原理是向上定一个控制点有向下定一个控制点使之形成一个sin函数图形。具体请学贝塞尔曲线。此时效果图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-80458918daebe178.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img7.PNG"></p>
<p>最后就是画底下的矩形和头像和文字了。最值得讲的是头像我一开始的设想的传Url的，不过这样子又要做网络方面的代码工作，这样子会破怀类的功能单一性原则，所以最后我实在外部传一个位图，在位图进行处理使其圆角。剩下的只是画文字而已，上面已经讲够多了，就不在讲了。<br>对了，最后还有一个刚开始的动画效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public void startAnimator()&#123; </div><div class="line">     ValueAnimator mCircleAminator=ValueAnimator.ofFloat(0f,300f); </div><div class="line">     mCircleAminator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">     mCircleNum=(float)animation.getAnimatedValue(); postInvalidate();</div><div class="line"> &#125; </div><div class="line">&#125;); </div><div class="line">   ValueAnimator mCenterText=ValueAnimator.ofInt(0,allStop); </div><div class="line">mCenterText.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">mCenterNum=(int)animation.getAnimatedValue(); postInvalidate(); </div><div class="line">&#125; &#125;); </div><div class="line">ValueAnimator mWavyAnimator = ValueAnimator.ofInt(0, mWaveLength); </div><div class="line">mWavyAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">mOffset = (int) animation.getAnimatedValue(); postInvalidate(); </div><div class="line">&#125; &#125;); </div><div class="line">animSet.setDuration(2000); </div><div class="line">animSet.playTogether(mCircleAminator,mCenterText,mWavyAnimator); </div><div class="line">animSet.start(); </div><div class="line">&#125;</div><div class="line"> //字符串拼接 </div><div class="line">public String stringTemplate(int template,String content)&#123; </div><div class="line">return String.format(getContext().getResources().getString(template),content);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>其实也简单通过设置ValueAnimator让它在规定的时间内产生数值的变化，再调用postInvalidate().对View的界面进行刷新即可实现动画效果。</p>
<p>最后给源码好好研究吧<a href="https://github.com/jack921/BesselCurve" target="_blank" rel="external">源码</a>只有好好看源码才能学到更多东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先按照老规矩，无图无真相嘛，先看看先：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/925576-2cbef50cefed2c44.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;效果图.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
</feed>
