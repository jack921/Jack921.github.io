<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>谢汉杰</title>
  <subtitle>保持愚蠢，保持饥饿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jack921.win/"/>
  <updated>2017-05-23T14:08:40.241Z</updated>
  <id>http://jack921.win/</id>
  
  <author>
    <name>jack</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>淘宝开源库VLayout实践</title>
    <link href="http://jack921.win/2017/05/23/%E6%B7%98%E5%AE%9D%E5%BC%80%E6%BA%90%E5%BA%93VLayout%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jack921.win/2017/05/23/淘宝开源库VLayout实践/</id>
    <published>2017-05-23T14:05:46.000Z</published>
    <updated>2017-05-23T14:08:40.241Z</updated>
    
    <content type="html"><![CDATA[<p>最近淘宝出了vlayout,刚开始看淘宝的文档的时候还是有点懵，后来自己也总结规划了一下，写了一个比较好看的demo，顺便在这里总结一下。</p>
<p>VLayout是什么，说白了就是用一个原生RecycelerView加上VLayout来实现在一个页面上比较复杂的布局并且有一个比较好的复用，在RecyclerView里同时有GridLayout布局，瀑布流布局，浮动布局等VLayout提供的九大布局，这也是淘宝客户端首页加载不同布局的方法。</p>
<p>好了，简单介绍到这里，首先我们先导入VLayout:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile (&apos;com.alibaba.android:vlayout:版本@aar&apos;) &#123;</div><div class="line">	transitive = true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体的版本请看github里VLayout给出的版本号。现在最新是1.0.6<br>接着我们就可以开始引用VLayout了,VLayout的通用代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VirtualLayoutManager manager = new VirtualLayoutManager(this);</div><div class="line">recyclerview.setLayoutManager(manager);</div><div class="line">DelegateAdapter adapter =new DelegateAdapter(manager, true);</div></pre></td></tr></table></figure></p>
<ul>
<li>其中VirtualLayoutManager它继承自LinearLayoutManager；引入了 LayoutHelper 的概念，它负责具体的布局逻辑；VirtualLayoutManager管理了一系列LayoutHelper，将具体的布局能力交给LayoutHelper来完成。</li>
<li>DelegateAdapter是VLayout专门为LayoutHelper定制的Adapter，我们把装载有各种布局的LayoutHelper的Adapter放进DelegateAdapter里最后在RecyclerView.setAdapter(DelegateAdapter);就可以加载出复杂的布局。</li>
<li>或许你们会问什么是LayoutHelper，这个问题问得好，就是VLayout提供的九种默认通用布局，解耦所有的View和布局之间的关系: Linear, Grid, 吸顶, 浮动, 固定位置等具体,名称和功能如下:</li>
</ul>
<ol>
<li>LinearLayoutHelper: 线性布局</li>
<li>GridLayoutHelper: Grid布局， 支持横向的colspan</li>
<li>StaggeredGridLayoutHelper: 瀑布流布局，可配置间隔高度/宽度</li>
<li>FixLayoutHelper: 固定布局，始终在屏幕固定位置显示</li>
<li>ScrollFixLayoutHelper: 固定布局，但之后当页面滑动到该图片区域才显示, 可以用来做返回顶部或其他书签等</li>
<li>FloatLayoutHelper: 浮动布局，可以固定显示在屏幕上，但用户可以拖拽其位置</li>
<li>ColumnLayoutHelper: 栏格布局，都布局在一排，可以配置不同列之间的宽度比值</li>
<li>SingleLayoutHelper: 通栏布局，只会显示一个组件View</li>
<li>OnePlusNLayoutHelper: 一拖N布局，可以配置1-5个子元素</li>
<li>StickyLayoutHelper: stikcy布局， 可以配置吸顶或者吸底</li>
</ol>
<p>这就是九种布局对应的类，我们可以用着九个类实现各种复杂的布局，下面我会一一介绍每个布局和效果，以便更直观的看到效果:</p>
<ul>
<li>LinearLayoutHelper: 线性布局，就是实现ListView的效果很简单，直接看代码:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class LinearLayoutHelperActivity extends Activity&#123;</div><div class="line">    public static RecyclerView recyclerview;</div><div class="line">    public static DelegateRecyclerAdapter delegateRecyclerAdapter;</div><div class="line">    public DelegateAdapter adapter;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_main);</div><div class="line">        recyclerview=(RecyclerView)findViewById(R.id.recyclerview);</div><div class="line">        VirtualLayoutManager manager = new VirtualLayoutManager(this);</div><div class="line">        recyclerview.setLayoutManager(manager);</div><div class="line">        adapter =new DelegateAdapter(manager, true);</div><div class="line"></div><div class="line">        adapter.addAdapter(init(this));</div><div class="line">        recyclerview.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static DelegateRecyclerAdapter init(Context context)&#123;</div><div class="line">        LinearLayoutHelper linearLayoutHelper=new LinearLayoutHelper();</div><div class="line">        //设置间隔高度</div><div class="line">        linearLayoutHelper.setDividerHeight(5);</div><div class="line">        //设置布局底部与下个布局的间隔</div><div class="line">        linearLayoutHelper.setMarginBottom(20);</div><div class="line">        //设置间距</div><div class="line">        linearLayoutHelper.setMargin(20,20,20,20);</div><div class="line">        delegateRecyclerAdapter=new DelegateRecyclerAdapter(context,linearLayoutHelper,&quot;LinearLayoutHelper&quot;);</div><div class="line">        return delegateRecyclerAdapter;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而DelegateRecyclerAdapter的代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class DelegateRecyclerAdapter extends DelegateAdapter.Adapter&#123;</div><div class="line">    public Context context;</div><div class="line">    private LayoutHelper helper;</div><div class="line">    private LayoutInflater inflater;</div><div class="line">    private String name;</div><div class="line"></div><div class="line">    public DelegateRecyclerAdapter(Context context,LayoutHelper helper,String name)&#123;</div><div class="line">        this.inflater = LayoutInflater.from(context);</div><div class="line">        this.helper = helper;</div><div class="line">        this.context=context;</div><div class="line">        this.name=name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutHelper onCreateLayoutHelper() &#123;</div><div class="line">        return this.helper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        return new MyViewHolder(inflater.inflate(R.layout.layout_item,parent,false));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) &#123;</div><div class="line">            if(position%2==0)&#123;</div><div class="line">                holder.itemView.setBackgroundColor(0xaa3F51B5);</div><div class="line">            &#125;else&#123;</div><div class="line">                holder.itemView.setBackgroundColor(0xccFF4081);</div><div class="line">            &#125;</div><div class="line">        MyViewHolder myViewHolder=(MyViewHolder)holder;</div><div class="line">        myViewHolder.name.setText(name+position+&quot;&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return 9;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class MyViewHolder extends RecyclerView.ViewHolder&#123;</div><div class="line">        public TextView name;</div><div class="line">        public MyViewHolder(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line">            name=(TextView)itemView.findViewById(R.id.item_name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要说的就是在Adapter类里我们需要继承Vlayout的DelegateAdapter.Adapter类，然后多回调onCreateLayoutHelper()方法，返回我们传进去的LayoutHelper类，其他的和普通的RecyclerView是一个样的。DelegateRecyclerAdapter在我们后面也有多次引用。其他要说的就是我们初始完LinearLayoutHelper后生产DelegateAdapter.Adapter类再赋给DelegateAdapter，然后然后RecyclerView在setAdapter()就这样。<br><img src="http://upload-images.jianshu.io/upload_images/925576-f49efd0bc8ef6598.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<ul>
<li>GridLayoutHelper: Grid布局， 支持横向的colspan，也很简单，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static DelegateRecyclerAdapter init(Context context)&#123;</div><div class="line">        GridLayoutHelper gridLayoutHelper=new GridLayoutHelper(4);</div><div class="line">        //自定义设置某些位置的Item的占格数</div><div class="line">        gridLayoutHelper.setSpanSizeLookup(new GridLayoutHelper.SpanSizeLookup() &#123;</div><div class="line">            @Override</div><div class="line">            public int getSpanSize(int position) &#123;</div><div class="line">                if (position &gt;5) &#123;</div><div class="line">                    return 2;</div><div class="line">                &#125;else &#123;</div><div class="line">                    return 1;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        //是否填满可用区域</div><div class="line">        gridLayoutHelper.setAutoExpand(false);</div><div class="line">        delegateRecyclerAdapter=new DelegateRecyclerAdapter(context,gridLayoutHelper,&quot;GridLayoutHelper&quot;);</div><div class="line">        return delegateRecyclerAdapter;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其他代码很上面的一样。<br><img src="http://upload-images.jianshu.io/upload_images/925576-b249b0f828e85a4a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.PNG"></p>
<ul>
<li>StaggeredGridLayoutHelper: 瀑布流布局，可配置间隔高度/宽度,代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static StaggeredAdapter init(Context context)&#123;</div><div class="line">   StaggeredGridLayoutHelper staggeredGridLayoutHelper=new StaggeredGridLayoutHelper(3,20);</div><div class="line">   staggeredAdapter=new StaggeredAdapter(context,staggeredGridLayoutHelper,&quot;StaggeredGridLayoutHelper&quot;);</div><div class="line">   return staggeredAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在StaggeredAdapter里我们在onBindViewHolder里用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ViewGroup.LayoutParams layoutParams = ((MyViewholder) holder).text.getLayoutParams();</div><div class="line">layoutParams.height = 260 + position % 7 * 20;</div><div class="line">((MyViewholder) holder).text.setLayoutParams(layoutParams);</div></pre></td></tr></table></figure></p>
<p>来实现高度不一致，效果如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-4f28984953b9a0a5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.PNG"></p>
<ul>
<li>FixLayoutHelper: 固定布局，始终在屏幕固定位置显示,代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static FixLayoutAdapter initFixLayoutHelper(Context context)&#123;</div><div class="line">    FixLayoutHelper fixLayoutHelper=new FixLayoutHelper(FixLayoutHelper.BOTTOM_LEFT, 200, 200);</div><div class="line">    FixLayoutAdapter fixLayoutAdapter=new FixLayoutAdapter(context,fixLayoutHelper,&quot;fixlayouthelp&quot;);</div><div class="line">    return fixLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了有FixLayoutHelper.BOTTOM_LEFT之外，还有FixLayoutHelper.TOP_LEFT，FixLayoutHelper.BOTTOM_RIGHT，FixLayoutHelper.TOP_RIGHT, 200,200分别对应偏移量x,y，效果如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-cb8265841bbfe5e5.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img4.PNG"><br>fixlayouthelp区域块就是FixLayoutHelper了。</p>
<ul>
<li>ScrollFixLayoutHelper: 固定布局，但之后当页面滑动到该图片区域才显示, 可以用来做返回顶部或其他书签等，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static FixLayoutAdapter initScrollFixLayout(Context context)&#123;</div><div class="line">    ScrollFixLayoutHelper scrollFixLayoutHelper = new ScrollFixLayoutHelper(15,15);</div><div class="line">    //show_always:总是显示</div><div class="line">    //show_on_enter:当页面滚动到这个视图的位置的时候，才显示</div><div class="line">    //show_on_leave:当页面滚出这个视图的位置的时候显示</div><div class="line">    scrollFixLayoutHelper.setShowType(ScrollFixLayoutHelper.SHOW_ON_ENTER);</div><div class="line">    return new FixLayoutAdapter(context, scrollFixLayoutHelper,&quot;scrollfixlayouthelper&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，看效果：<br><img src="http://upload-images.jianshu.io/upload_images/925576-21ed8eff046b70e6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img5.PNG"><br>ScrollFixLayoutHelper继承自FixLayoutHelper，不同的是showType来决定这个布局的Item是否显示，可以用来做一些返回顶部之类的按钮，</p>
<ol>
<li>SHOW_ALWAYS：与FixLayoutHelper的行为一致，固定在某个位置； </li>
<li>SHOW_ON_ENTER：默认不显示视图，当页面滚动到这个视图的位置的时候，才显示； </li>
<li>SHOW_ON_LEAVE：默认不显示视图，当页面滚出这个视图的位置的时候显示；</li>
</ol>
<p>这里效果不明显，等集合所有布局之后大家就可以看很直观的效果</p>
<ul>
<li>FloatLayoutHelper: 浮动布局，可以固定显示在屏幕上，但用户可以拖拽其位置，代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static FixLayoutAdapter initFloatLayoutHelper(Context context)&#123;</div><div class="line">    FloatLayoutHelper floatLayoutHelper=new FloatLayoutHelper();</div><div class="line">    floatLayoutHelper.setDefaultLocation(20,250);</div><div class="line">    FixLayoutAdapter fixLayoutAdapter=new FixLayoutAdapter(context,floatLayoutHelper,&quot;floatlayouthelper&quot;);</div><div class="line">    return  fixLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d3c37f8602d1b4eb.gif?imageMogr2/auto-orient/strip" alt="img6.gif"></p>
<p>其中setDefaultLocation()使用来设置他的初始位置的，setAlignType（表示吸边时的基准位置，默认左上角，有四个取值，分别是TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT）</p>
<ul>
<li>ColumnLayoutHelper: 栏格布局，都布局在一排，可以配置不同列之间的宽度比值，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> public static ColumnLayoutAdapter initColumnLayout(Context context)&#123;</div><div class="line">    ColumnLayoutHelper columnLayoutHelper=new ColumnLayoutHelper();</div><div class="line">    columnLayoutHelper.setWeights(new float[]&#123;20,20,20,20,20&#125;);</div><div class="line">    columnLayoutHelper.setMarginBottom(20);</div><div class="line">    ColumnLayoutAdapter columnLayoutAdapter=new ColumnLayoutAdapter(context,columnLayoutHelper,&quot;ColumnLayoutHelper&quot;);</div><div class="line">    return columnLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ColumnLayoutHelper需要设置Weights，是一个float数组，总和为100，否则超出布局。效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-7a749e29d9653da2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img7.PNG"></p>
<ul>
<li>SingleLayoutHelper: 通栏布局，只会显示一个组件View，这里建议设置Adapter个数为1，因为他就只会显示一栏，假如有多个可能会出现一些问题，本人实测个数多时会出点问题。代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static SingleLayoutAdapter initSingleLayout(Context context)&#123;</div><div class="line">    SingleLayoutHelper singleLayoutHelper=new SingleLayoutHelper();</div><div class="line">    //设置间距</div><div class="line">    singleLayoutHelper.setMargin(20,20,20,20);</div><div class="line">    SingleLayoutAdapter singleLayoutAdapter=new SingleLayoutAdapter(context,singleLayoutHelper,&quot;SingleLayoutHelper&quot;);</div><div class="line">    return singleLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c0c41a40cc9c215d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img8.PNG"></p>
<ul>
<li>OnePlusNLayoutHelper: 一拖N布局，可以配置1-5个子元素,根据个数的不同所呈现的界面也是不一样的,不同个数效果如下：</li>
</ul>
<p>//个数为1</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a4c577ec374e57cd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为1.PNG"></p>
<p>//个数为2</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d874d7b8fa5d9971.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为2.PNG"></p>
<p>//个数为3</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-9f228d43a65eeae7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为3.PNG"></p>
<p>//个数为4</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-74dc8792c026cb34.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为4.PNG"></p>
<p>//个数为5</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-29d47f791ba380b6.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="个数为5.PNG"></p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> public static OnePlusNLayoutAdapter initOnePlusNLayout(Context context)&#123;</div><div class="line">    OnePlusNLayoutHelper onePlusNLayoutHelper=new OnePlusNLayoutHelper();</div><div class="line">    //设置布局底部与下个布局的间隔</div><div class="line">    onePlusNLayoutHelper.setMarginBottom(20);</div><div class="line">    OnePlusNLayoutAdapter onePlusNLayoutAdapter=new OnePlusNLayoutAdapter(context,onePlusNLayoutHelper,&quot;OnePlusNLayoutHelper&quot;);</div><div class="line">    return onePlusNLayoutAdapter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>StickyLayoutHelper: stikcy布局， 可以配置吸顶或者吸底，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static StickyLayoutAdapter initStickyLayoutHelper(Context context)&#123;</div><div class="line">    StickyLayoutHelper stickyLayoutHelper=new StickyLayoutHelper();</div><div class="line">    return new StickyLayoutAdapter(context,stickyLayoutHelper);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-7511442ba426d5a1.gif?imageMogr2/auto-orient/strip" alt="img10.gif"></p>
<ul>
<li>最后假如只是单单加载其中的一个布局其实意义不大，VLayout只最大的意义在于加载多个布局并且保持一个很好的复用，所以我们把上面的所有布局一起加载起来，代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class AllActivity extends Activity&#123;</div><div class="line"></div><div class="line">    private RecyclerView recyclerview;</div><div class="line">    private DelegateAdapter delegateAdapter ;</div><div class="line">    final List&lt;DelegateAdapter.Adapter&gt; adapters = new LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_main);</div><div class="line">        recyclerview=(RecyclerView)findViewById(R.id.recyclerview);</div><div class="line"></div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void initView()&#123;</div><div class="line">        RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool();</div><div class="line">        recyclerview.setRecycledViewPool(viewPool);</div><div class="line">        viewPool.setMaxRecycledViews(0,10);</div><div class="line"></div><div class="line">        adapters.add(LinearLayoutHelperActivity.init(this));</div><div class="line">        adapters.add(ColumnLayoutHelperActivity.initColumnLayout(this));</div><div class="line">        adapters.add(GridLayoutHelperActivity.init(this));</div><div class="line">        adapters.add(FixLayoutHelperActivity.initFixLayoutHelper(this));</div><div class="line">        adapters.add(ScrollFixLayoutHelperActivity.initScrollFixLayout(this));</div><div class="line">        adapters.add(SingleLayoutHelperActivity.initSingleLayout(this));</div><div class="line">        adapters.add(OnePlusNLayoutHelperActivity.initOnePlusNLayout(this));</div><div class="line">        adapters.add(FloatLayoutHelperActivity.initFloatLayoutHelper(this));</div><div class="line">        adapters.add(StickyLayoutHelperActivity.initStickyLayoutHelper(this));</div><div class="line">        adapters.add(StaggeredGridLayoutHelperActivity.init(this));</div><div class="line"></div><div class="line">        VirtualLayoutManager manager = new VirtualLayoutManager(this);</div><div class="line">        recyclerview.setLayoutManager(manager);</div><div class="line">        delegateAdapter = new DelegateAdapter(manager);</div><div class="line"></div><div class="line">        delegateAdapter.setAdapters(adapters);</div><div class="line">        recyclerview.setAdapter(delegateAdapter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要注意的是DelegateAdapter delegateAdapter = new DelegateAdapter(layoutManager, hasConsistItemType);里当hasConsistItemType=true的时候，不论是不是属于同一个子adapter，相同类型的item都能复用。表示它们共享一个类型。 当hasConsistItemType=false的时候，不同子adapter之间的类型不共享。</p>
<p>效果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-56a30a38b9907e92.gif?imageMogr2/auto-orient/strip" alt="img11.gif"></p>
<p>最后源码demo,代码都在这<a href="https://github.com/jack921/ProjectVLayout" target="_blank" rel="external">https://github.com/jack921/ProjectVLayout</a></p>
]]></content>
    
    <summary type="html">
    
      最近淘宝出了vlayout,刚开始看淘宝的文档的时候还是有点懵，后来自己也总结规划了一下，写了一个比较好看的demo，顺便在这里总结一下。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="android" scheme="http://jack921.win/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>高仿京东金融的数值滚动尺</title>
    <link href="http://jack921.win/2017/05/17/%E9%AB%98%E4%BB%BF%E4%BA%AC%E4%B8%9C%E9%87%91%E8%9E%8D%E7%9A%84%E6%95%B0%E5%80%BC%E6%BB%9A%E5%8A%A8%E5%B0%BA/"/>
    <id>http://jack921.win/2017/05/17/高仿京东金融的数值滚动尺/</id>
    <published>2017-05-16T16:21:13.000Z</published>
    <updated>2017-05-16T16:22:40.134Z</updated>
    
    <content type="html"><![CDATA[<p>以前博客讲的大部分都是静态的自定义View的编写,其实无非就是“画画”画出一个好看的效果,而这篇博客写的是写一个动态的自定义控价,这里不仅需要”画”,还要各种事件和计算,废话不说现在就讲讲自定义数值滚动尺,这个用的还是满广的，例如京东金融的通过滚动尺选择金额等,而这次就是高仿京东金融的数值滚动尺。首先看看下效果图，如下<br><img src="http://upload-images.jianshu.io/upload_images/925576-d7ef373f4104a883.gif?imageMogr2/auto-orient/strip" alt="show.gif"></p>
<ul>
<li>首先先给你们各个变量的含义，以免在后面的讲解中不知变量的意思，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">//最小值</div><div class="line">private int minValue;</div><div class="line">//最大值</div><div class="line">private int maxValue;</div><div class="line">//当前值</div><div class="line">private int currentValue;</div><div class="line">//最小单位值</div><div class="line">private int minUnitValue;</div><div class="line">//最小当前值</div><div class="line">private int minCurrentValue;</div><div class="line">//字体大小</div><div class="line">private int textSize;</div><div class="line">//字体颜色</div><div class="line">private int textColor;</div><div class="line">//线颜色</div><div class="line">private int dividerColor;</div><div class="line">//指示线颜色</div><div class="line">private int indicatrixColor;</div><div class="line">//画线的画笔</div><div class="line">private Paint linePaint;</div><div class="line">//控价的宽度</div><div class="line">private int slideRulerWidth=0;</div><div class="line">//滑动的宽度</div><div class="line">private int rollingWidth;</div><div class="line">//屏幕的宽</div><div class="line">private int wrapcontentWidth;</div><div class="line">//屏幕的高</div><div class="line">private int wrapcontentHeight;</div><div class="line">//一屏显示Item</div><div class="line">private int showItemSize;</div><div class="line">//刻度和数值的间距</div><div class="line">private int marginCursorData;</div><div class="line">//长刻度的大小</div><div class="line">private int longCursor;</div><div class="line">//短刻度的大小</div><div class="line">private int shortCursor;</div><div class="line">//计算每个刻度的间距</div><div class="line">private int marginWidth=0;</div><div class="line">//数据回调接口</div><div class="line">private SlideRulerDataInterface slideRulerDataInterface;</div><div class="line">//正在滑动状态</div><div class="line">private int isScrollingState=1;</div><div class="line">//快速一滑</div><div class="line">private int fastScrollState=2;</div><div class="line">//结束滑动</div><div class="line">private int finishScrollState=3;</div><div class="line"></div><div class="line">private GestureDetector mDetector;</div><div class="line">private Display display =null;</div><div class="line">private Scroller scroller;</div><div class="line"></div><div class="line">public SlideRuler(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context,attrs,defStyleAttr);</div><div class="line">        display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();</div><div class="line">        //屏幕宽高</div><div class="line">        wrapcontentWidth=display.getWidth();</div><div class="line">        wrapcontentHeight=display.getHeight();</div><div class="line">        //初始化自定义的参数</div><div class="line">        TypedArray typedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.slideruler,defStyleAttr,0);</div><div class="line">        textSize = typedArray.getDimensionPixelSize(R.styleable.slideruler_textSize,(int) TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));</div><div class="line">        textColor=typedArray.getColor(R.styleable.slideruler_textColor,Color.DKGRAY);</div><div class="line">        dividerColor=typedArray.getColor(R.styleable.slideruler_dividerColor,Color.BLACK);</div><div class="line">        indicatrixColor=typedArray.getColor(R.styleable.slideruler_indicatrixColor,Color.BLACK);</div><div class="line">        minValue=typedArray.getInteger(R.styleable.slideruler_min_value,0);</div><div class="line">        maxValue=typedArray.getInteger(R.styleable.slideruler_max_value,199000);</div><div class="line">        currentValue=typedArray.getInteger(R.styleable.slideruler_current_value,10000);</div><div class="line">        minUnitValue=typedArray.getInteger(R.styleable.slideruler_min_unitValue,1000);</div><div class="line">        minCurrentValue=typedArray.getInteger(R.styleable.slideruler_min_currentValue,1000);</div><div class="line">        showItemSize=typedArray.getInteger(R.styleable.slideruler_show_itemSize,30);</div><div class="line">        marginCursorData=typedArray.getDimensionPixelSize(R.styleable.slideruler_margin_cursor_data,(int)TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,10,getResources().getDisplayMetrics()));</div><div class="line">        longCursor=typedArray.getDimensionPixelSize(R.styleable.slideruler_longCursor,(int)TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,25,getResources().getDisplayMetrics()));</div><div class="line">        shortCursor=typedArray.getDimensionPixelSize(R.styleable.slideruler_shortCursor,(int)TypedValue.applyDimension(</div><div class="line">                TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));</div><div class="line"></div><div class="line">        scroller=new Scroller(context);</div><div class="line">        mDetector=new GestureDetector(context,myGestureListener);</div><div class="line"></div><div class="line">        //初始化Paint</div><div class="line">        linePaint=new Paint();</div><div class="line">        linePaint.setAntiAlias(true);</div><div class="line">        linePaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">        linePaint.setStyle(Paint.Style.STROKE);</div><div class="line">        linePaint.setTextSize(textSize);</div><div class="line">        //检查当前值是不是正确值</div><div class="line">        checkCurrentValue();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>其次自定义View也好自定义控价也好<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heigh)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>也是蛮重要的所以照例也讲讲，用来确定控件的大小，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">       int widthModel=MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">       int heightModel=MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">       int widthSize=MeasureSpec.getSize(widthMeasureSpec);    </div><div class="line">       int heightSize=MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">       int width;</div><div class="line">       int height;</div><div class="line">       if(widthModel==MeasureSpec.EXACTLY)&#123;</div><div class="line">           width=widthSize;</div><div class="line">       &#125;else&#123;</div><div class="line">           width=wrapcontentWidth;</div><div class="line">       &#125;</div><div class="line">       if(heightModel==MeasureSpec.EXACTLY)&#123;</div><div class="line">           height=heightSize;</div><div class="line">       &#125;else&#123;</div><div class="line">           height=(getPaddingBottom()+getPaddingTop()+(wrapcontentHeight/4));</div><div class="line">       &#125;</div><div class="line">       setMeasuredDimension(width,height);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>代码的意思也很简单，当MeasureSpec里的specMode类型是EXACTLY时，即设置了明确的值或者是MATCH_PARENT时，就直接把MeasureSpec.getSize()的值赋进去，如果不是即为WARP_CONTENT时，就直接赋给屏幕的宽高。控件的宽高都是同一样的做法。</p>
<ul>
<li>当控件大小确定之后，我们再利用<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>进行一些变量的赋值，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">       //计算每个刻度的间距</div><div class="line">       marginWidth=getWidth()/showItemSize;</div><div class="line">       //开始时的距离</div><div class="line">       rollingWidth=(int)(marginWidth*cursorNum());</div><div class="line">       //整个控件的宽度</div><div class="line">       slideRulerWidth=(maxValue/minUnitValue)*marginWidth;</div><div class="line">       super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>到此我们就可以在onDraw(Canvas canvas)方法里画出初始的界面，而以后的动态只是通过不断的改变数值再进行绘画而已，代码如下:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas)&#123;</div><div class="line">    //画最基础的两条线</div><div class="line">    drawBaseView(canvas);</div><div class="line">    //画初始的界面</div><div class="line">    drawBaseLine(canvas);</div><div class="line">&#125;</div><div class="line">    </div><div class="line">//画最基础的两条线</div><div class="line">public void drawBaseLine(Canvas canvas)&#123;</div><div class="line">    //画中间的线</div><div class="line">    linePaint.setColor(indicatrixColor);</div><div class="line">    canvas.drawLine(getWidth()/2,0,getWidth()/2,getHeight(),linePaint);</div><div class="line">    //画底部的直线</div><div class="line">    linePaint.setColor(dividerColor);</div><div class="line">    canvas.drawLine(0,getHeight(),slideRulerWidth,getHeight(),linePaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//画初始的界面</div><div class="line">public void drawBaseView(Canvas canvas)&#123;</div><div class="line">    //整数刻度的个数</div><div class="line">    int integerWidth= (int)Math.rint((currentValue-minValue)/minUnitValue);</div><div class="line">    //剩余不整一个刻度的数值</div><div class="line">    int residueWidth=(currentValue-minValue)%minUnitValue;</div><div class="line">    //开始画图的X轴位置</div><div class="line">    int startCursor=(getWidth()/2)-(marginWidth*integerWidth)-(int)(marginWidth*(float)residueWidth/minUnitValue);</div><div class="line">        for(int i=0;i&lt;(maxValue/minUnitValue)+1;i++)&#123;</div><div class="line">            float xValue=startCursor+(marginWidth*i);</div><div class="line">            if(i%10==0)&#123;</div><div class="line">                //画长刻度</div><div class="line">                linePaint.setColor(textColor);</div><div class="line">                canvas.drawText((minCurrentValue*i)+&quot;&quot;,xValue,getHeight()-longCursor-marginCursorData,linePaint);</div><div class="line">                linePaint.setColor(dividerColor);</div><div class="line">                canvas.drawLine(xValue,getHeight(),xValue,getHeight()-longCursor,linePaint);</div><div class="line">            &#125;else&#123;</div><div class="line">                //画短刻度</div><div class="line">                canvas.drawLine(xValue,getHeight(),xValue,getHeight()-shortCursor,linePaint);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在drawBaseView()方法里，也很简单，就是在二分之一宽度，画一条直线，然后在控价的底部画出宽度为整个控件的宽度的底线。接着在drawBaseView(Canvas canvas)方法里</p>
<ol>
<li>首先用当前值(currentValue)-最小值(minValue)之后再除于最小单位值(minUnitValue)以获取整数刻度的个数</li>
<li>因为有余数的情况，我们再当前值(currentValue)-最小值(minValue)之后求余与最小单位值(minUnitValue)以获取余数</li>
<li>接着我们要获取我们画图的X轴开始的位置，因为最小值只能滑到中间，所以开始的位置为控件一半的宽度(getWidth()/2)<br>减去计算每个刻度的间距(marginWidth)乘以整数刻度的个数(integerWidth)即<figure class="highlight plain"><figcaption><span>```(int)(marginWidth*(float)residueWidth/minUnitValue)```</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">4. 再通过For循环刻度的个数，不同的进行刻度的绘画，当i%10==0时即为一个大的单位刻度否者为一个小的单位刻度，具体代码我上面已有注释，原理和画中间线一直就不在赘述。</div><div class="line"> </div><div class="line">到此我们就已经把自定义控价静态的部分写完了，效果如下：![img.PNG](http://upload-images.jianshu.io/upload_images/925576-4b829e7c35c2befc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)接着我们用GestureDetector绑定手势事件，根据回调手势事件的方法来改变数据和刷新页面，在GestureDetector里，我们只会回调```public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)```(手指在触摸屏上滑动)和</div></pre></td></tr></table></figure></li>
</ol>
<p>public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>private GestureDetector.SimpleOnGestureListener myGestureListener =new  GestureDetector.SimpleOnGestureListener(){<br>        @Override<br>        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {<br>            //滑动刷新UI<br>            updateView(rollingWidth+(int)distanceX,isScrollingState);<br>            return true;<br>        }<br>        @Override<br>        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {<br>            //快速滑动的动画<br>            scroller.fling(rollingWidth,0,(int)(-velocityX/1.5),0,0,(maxValue/minUnitValue)*marginWidth,0,0);<br>            return true;<br>        }<br>    };</p>
<p>//动态更新滑动View<br>public void updateView(int srcollWidth,int action){<br>    if(action==isScrollingState){<br>        //正在滑动状态(onScroll())<br>        rollingWidth=srcollWidth;<br>        float itemNum=(float)srcollWidth/marginWidth;<br>        currentValue=(int)(minUnitValue<em>itemNum);<br>    }else if(action==fastScrollState){<br>        //快速一滑(onFling())<br>        rollingWidth=srcollWidth;<br>        int itemNum=(int)Math.rint((float)rollingWidth/marginWidth);<br>        currentValue=(minUnitValue</em>itemNum);<br>    }else if(action==finishScrollState){<br>        //结束滑动(ACTION_UP)<br>        int itemNum=(int)Math.rint((float)rollingWidth/marginWidth);<br>        currentValue=minUnitValue<em>itemNum;<br>    }<br>    //判断是否在最小选择值<br>    if(currentValue&lt;=minCurrentValue){<br>        rollingWidth=(minCurrentValue/minUnitValue)</em>marginWidth;<br>        currentValue=minCurrentValue;<br>    }<br>    //判断是否在最大值<br>    if(currentValue&gt;=maxValue){<br>        rollingWidth=marginWidth*allCursorNum();<br>        currentValue=maxValue;<br>    }<br>    //回调数值<br>    if(slideRulerDataInterface!=null){<br>        slideRulerDataInterface.getText(currentValue+””);<br>    }<br>    invalidate();<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.当我们滑动我们的控件是，就会回调GestureDetector里的onScroll()方法，然后```rollingWidth+(int)distanceX```即当前滑动的宽度(rollingWidth)加上滑动产生的宽度(distanceX)为动态产生的宽度，再除于计算每个刻度的间距(marginWidth)从而得到刻度的数量，有了刻度的数量即可得到当前值```currentValue=(int)(minUnitValue*itemNum);```有了当前值调用invalidate();刷新onDraw()即可完成连续滑动时动态绘制。</div><div class="line"></div><div class="line">2.当我们快速一划时，就会回调GestureDetector里的onFling()方法，在方法里用</div></pre></td></tr></table></figure>
<p>scroller.fling(rollingWidth,0,(int)(-velocityX/1.5),0,0,(maxValue/minUnitValue)*marginWidth,0,0);<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">  @Override</div><div class="line">  public void computeScroll() &#123;</div><div class="line">    if(scroller.computeScrollOffset())&#123;</div><div class="line">        //快滑刷新UI</div><div class="line">        updateView(scroller.getCurrX(),fastScrollState);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>的scroller.computeScrollOffset()==true;而scroller.getCurrX()就相当于为动态产生的滑动宽度剩下的也是调用updateView()方法不断的刷新，当scroller.computeScrollOffset()==false就滑动动画结束了。</p>
<p>3.最后当我们滑动结束手指抬起时:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">   public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">       switch(event.getAction())&#123;</div><div class="line">           case MotionEvent.ACTION_UP:</div><div class="line">               updateView(0,finishScrollState);</div><div class="line">           default:</div><div class="line">               mDetector.onTouchEvent(event);</div><div class="line">               break;</div><div class="line">       &#125;</div><div class="line">       return true;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>我们也要掉updateView(),以保持滑动的最后结构都指在指针上。</p>
<p>最后大家要深入学习的话，请看<a href="https://github.com/jack921/SlideRuler" target="_blank" rel="external">https://github.com/jack921/SlideRuler</a></p>
]]></content>
    
    <summary type="html">
    
      以前博客讲的大部分都是静态的自定义View的编写,其实无非就是“画画”画出一个好看的效果,而这篇博客写的是写一个动态的自定义控价,这里不仅需要&quot;画&quot;,还要各种事件和计算,废话不说现在就讲讲自定义数值滚动尺,这个用的还是满广的，例如京东金融的通过滚动尺选择金额等,而这次就是高仿京东金融的数值滚动尺。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>教你实现最简单的QQ消息item侧滑菜单</title>
    <link href="http://jack921.win/2017/04/16/%E6%95%99%E4%BD%A0%E5%AE%9E%E7%8E%B0%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84QQ%E6%B6%88%E6%81%AFitem%E4%BE%A7%E6%BB%91%E8%8F%9C%E5%8D%95/"/>
    <id>http://jack921.win/2017/04/16/教你实现最简单的QQ消息item侧滑菜单/</id>
    <published>2017-04-16T15:22:00.000Z</published>
    <updated>2017-04-29T16:40:15.007Z</updated>
    
    <content type="html"><![CDATA[<p>这次跟大家介绍怎么简单的实现类似QQ消息Item的左右滑动菜单的实现。首先见效果图先:</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-09d6e9d464be1176.gif?imageMogr2/auto-orient/strip" alt="show.gif"><br>这就实现了ListView或RecyclerView加载的item的View实现侧滑菜单。至于这么实现，很简单就是通过继承HorizontalScrollView，再判断滑动的距离以滑到对应的View或菜单。具体如下:<br>首先，在item的界面布局方面如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;com.example.jack.listviewitemscroll.widget.ScrollListViewItem</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;50dp&quot;&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">        &lt;include layout=&quot;@layout/leftbutton&quot;/&gt;</div><div class="line">        &lt;include layout=&quot;@layout/context_view&quot;/&gt;</div><div class="line">        &lt;include layout=&quot;@layout/rightbutton&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/com.example.jack.listviewitemscroll.widget.ScrollListViewItem&gt;</div></pre></td></tr></table></figure></p>
<p>就是ScrollListViewItem包裹着LinearLayout里面的三个View,分别是左菜单，内容和右菜单对应的View。最为重点的就是ScrollListViewItem这个类，这就是我们继承HorizontalScrollView类所自定义的控制菜单滑动的类。<br>这个类的源码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">public class ScrollListViewItem extends HorizontalScrollView&#123;</div><div class="line"></div><div class="line">    private static int ScreenWidth=0;</div><div class="line">    private static int MenuWidth=0;</div><div class="line">    private static int HalfMenuWidth=0;</div><div class="line">    private boolean  operateLeft=false;</div><div class="line">    private boolean operateRight=false;</div><div class="line">    private boolean once;</div><div class="line"></div><div class="line">    ViewGroup left;</div><div class="line">    ViewGroup centre;</div><div class="line">    ViewGroup right;</div><div class="line"></div><div class="line">    public ScrollListViewItem(Context context) &#123;</div><div class="line">        this(context, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ScrollListViewItem(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs,0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ScrollListViewItem(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr,0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">       if(!once)&#123;</div><div class="line">           LinearLayout linearLayout=(LinearLayout)getChildAt(0);</div><div class="line">           left=(ViewGroup)linearLayout.getChildAt(0);</div><div class="line">           centre=(ViewGroup)linearLayout.getChildAt(1);</div><div class="line">           right=(ViewGroup)linearLayout.getChildAt(2);</div><div class="line"></div><div class="line">           ScreenWidth= ScreenUtils.getScreenWidth(getContext());</div><div class="line">           MenuWidth=ScreenWidth/4;</div><div class="line">           HalfMenuWidth=MenuWidth/2;</div><div class="line"></div><div class="line">           left.getLayoutParams().width=MenuWidth;</div><div class="line">           centre.getLayoutParams().width=ScreenWidth;</div><div class="line">           right.getLayoutParams().width=MenuWidth;</div><div class="line">       &#125;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        super.onLayout(changed, l, t, r, b);</div><div class="line">        if(changed)&#123;</div><div class="line">            this.scrollTo(MenuWidth,0);</div><div class="line">            once=true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent ev) &#123;</div><div class="line">        switch(ev.getAction())&#123;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                //在左侧</div><div class="line">                if(operateLeft)&#123;</div><div class="line">                    if(getScrollX()&lt;HalfMenuWidth)&#123;</div><div class="line">                        //滑到左最末尾</div><div class="line">                        this.scrollTo(0, 0);</div><div class="line">                    &#125;else if(getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth)&#123;</div><div class="line">                        //滑到中间</div><div class="line">                        this.scrollTo(MenuWidth, 0);</div><div class="line">                    &#125;else&#123;</div><div class="line">                        this.scrollTo(MenuWidth * 2, 0);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                //向右侧</div><div class="line">                if(operateRight)&#123;</div><div class="line">                    if(getScrollX()&gt;MenuWidth+HalfMenuWidth)&#123;</div><div class="line">                        //滑到最右</div><div class="line">                        this.scrollTo(MenuWidth + MenuWidth, 0);</div><div class="line">                    &#125;else if(getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth)&#123;</div><div class="line">                        //滑到中间</div><div class="line">                        this.scrollTo(MenuWidth, 0);</div><div class="line">                    &#125;else&#123;</div><div class="line">                        //滑到最左</div><div class="line">                        this.scrollTo(0, 0);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(ev);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onScrollChanged(int l, int t, int oldl, int oldt) &#123;</div><div class="line">        super.onScrollChanged(l, t, oldl, oldt);</div><div class="line">        if(l&gt;MenuWidth)&#123;</div><div class="line">            operateLeft=false;</div><div class="line">            operateRight=true;</div><div class="line">        &#125;else&#123;</div><div class="line">            operateLeft=true;</div><div class="line">            operateRight=false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在onMeasure()这个自定义View的测量方法里，我们首先拿到左菜单，内容，右菜单所对用的view,即left,centre,right这三个View,然后获取屏幕的宽度，动态设定菜单的宽度为屏幕宽度的四分之一，而内容的宽度就是整个屏幕的宽度，即<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">left.getLayoutParams().width=MenuWidth;</div><div class="line">centre.getLayoutParams().width=ScreenWidth;</div><div class="line">right.getLayoutParams().width=MenuWidth;</div></pre></td></tr></table></figure></p>
<p>然后我们在onLayout()方法里对这三个View进行定位，即让他滑到内容的那个View。</p>
<p>然后回调onScrollChanged(int l, int t, int oldl, int oldt)方法，当l大于菜单宽度时是右侧，当l小于菜单宽度时是右侧。(注:l是屏幕最右边到整个View最右边的距离)</p>
<p>其次就是最重要的onTouchEvent(MotionEvent ev)方法了。(注:是屏幕最右边到整个View最右边的距离).当operateLeft==true的时候,滑动在操作在左侧,当<code>getScrollX()&lt;HalfMenuWidth</code>,即在最左向右滑还不到菜单的二分之一宽度时，恢复原状，即<code>this.scrollTo(0, 0);</code>，当<code>getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth</code>,即最左向右滑大于菜单的二分之一宽度但却小于左菜单加右菜单一半的宽度，所以只能滑到内容区域，即<code>this.scrollTo(MenuWidth, 0);</code>，这两种情况除外都会滑到最后边的菜单，所以<code>this.scrollTo(MenuWidth * 2, 0)</code>;</p>
<p>同样的道理，当operateRight==true时，<code>getScrollX()&gt;MenuWidth+HalfMenuWidth</code>时，即在最右菜单但滑动的距离小于菜单宽度的一半，所以只能恢复原状即<code>this.scrollTo(MenuWidth + MenuWidth, 0);</code>,当<code>getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth</code>时，即滑动大于菜单一半但是却小于左菜单加右菜单一半的宽度，所以是内容区域，即滑动 this.scrollTo(MenuWidth, 0);，除这两种情况都是要滑到最左边的菜单，即 this.scrollTo(0, 0);。到此整个流程就讲完了。</p>
<p>最后奉上<a href="https://github.com/jack921/ListViewItemScroll" target="_blank" rel="external">源码</a></p>
]]></content>
    
    <summary type="html">
    
      这次跟大家介绍怎么简单的实现类似QQ消息Item的左右滑动菜单的实现。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="android自定义控件" scheme="http://jack921.win/tags/android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>android蓝牙4.0的知识要点</title>
    <link href="http://jack921.win/2017/03/13/android%E8%93%9D%E7%89%994-0%E7%9A%84%E7%9F%A5%E8%AF%86%E8%A6%81%E7%82%B9/"/>
    <id>http://jack921.win/2017/03/13/android蓝牙4-0的知识要点/</id>
    <published>2017-03-13T14:58:00.000Z</published>
    <updated>2017-04-29T16:40:28.774Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/925576-4e60f16439ab4a9d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="蓝牙4.0"></p>
<p>这次主要讲解蓝牙4.0的基本要点,作为自己的备忘录记录下来吧。首先普及一下蓝牙4.0基于Gatt协议来实现。而蓝牙4.0以下的是传统蓝牙，基于socket方式来实现。所以4.0以上的蓝牙具有传输速度更快，覆盖范围更广，安全性更高，延迟更短，耗电极低等等优点。</p>
<p> 一个BLE终端可以包含多个Service， 一个Service可以包含多个Characteristic，一个Characteristic包含一个value和多个Descriptor，一个Descriptor包含一个Value。Characteristic是比较重要的，是手机与BLE终端交换数据的关键，读取设置数据等操作都是操作Characteristic的相关属性。<br>接下来就是代码部分:<br>    1.首先是声明权限:<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;/&gt;</div></pre></td></tr></table></figure></p>
<p>如果你想声明你的应用程序只能在支持BLE的设备上运行，可以将下面声明包含进你的应用程序manifest文件中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;&gt;&lt;/uses-feature&gt;</div></pre></td></tr></table></figure></p>
<p>2.其次获取蓝牙适配器:<br> <figure class="highlight plain"><figcaption><span>mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();```也可以用</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line"> BluetoothManager  mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);</div><div class="line"> BluetoothAdapter  mBluetoothAdapter = mBluetoothManager.getAdapter();</div></pre></td></tr></table></figure></p>
<p>当mBluetoothAdapter==null的时候就说明手机没有开蓝牙，此时我们可以通过调用系统的蓝牙打开窗口打开蓝牙，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);</div><div class="line">startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT);</div></pre></td></tr></table></figure></p>
<p>再通过<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">    super.onActivityResult(requestCode, resultCode, data);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>回调看时候开启成功。<br>3.接着就是查找蓝牙了。查找蓝牙很简单，首先就是定义蓝牙查找获取设备的回调接口，如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() &#123;</div><div class="line">        @Override</div><div class="line">        public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) &#123;</div><div class="line">            //device.getName();获取蓝牙设备名字</div><div class="line">            //device.getAddress();获取蓝牙设备mac地址</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>然后使用<figure class="highlight plain"><figcaption><span>.startLeScan(mLeScanCallback);```开始搜索设备，每当有设备即通过回调onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord)方法来输出设备数据信息。当你不想再搜索是可以使用```mBluetoothAdapter.stopLeScan(mLeScanCallback);```来停止搜索。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4.有蓝牙设备信息了，下一步我们当然要连接蓝牙了，不然要这些信息也没用了。连接蓝牙也是很简单。建议蓝牙连接最好在后台service进行。假如你保存上面回调方法的BluetoothDevice对象，就直接可以运行```BluetoothGatt mBluetoothGatt= device.connectGatt(this, false, mGattCallback);```这代码进行连接，至于mGattCallback是什么下文会介绍。而BluetoothGatt这对象也很重要，后面发现服务读写设备等操作都是通过该对象。假如没有BluetoothDevice 对象只有蓝牙设备的mac地址也可以连接，这个可以先像上面那样首先获取BluetoothAdapter蓝牙适配对象，```BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(intent.getStringExtra(&quot;mac&quot;));```再通过getRemoteDevice()方法也可以BluetoothDevice 对象然后再像上面那样连接也可以。</div><div class="line">上面连接代码中出现的mGattCallback对象，这个是什么呢？它是蓝牙连接，读取设备，往设备里写数据及设备发出通知等都会回调该接口方法，具体如下:</div></pre></td></tr></table></figure></p>
<p>private final BluetoothGattCallback mGattCallback=new BluetoothGattCallback() {</p>
<pre><code>    //当连接上设备或者失去连接时会回调该函数
    @Override
    public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
        if(newState== BluetoothProfile.STATE_CONNECTED){
            Log.e(&quot;log_state&quot;,&quot;连接成功&quot;);
            mBluetoothGatt.discoverServices();
        }else if(newState==BluetoothProfile.STATE_DISCONNECTED){
            Log.e(&quot;log_state&quot;,&quot;连接失败&quot;);
        }
        super.onConnectionStateChange(gatt, status, newState);
    }

    //当设备是否找到服务时，会回调该函数
    @Override
    public void onServicesDiscovered(BluetoothGatt gatt, int status) {
        super.onServicesDiscovered(gatt, status);
        if (status == BluetoothGatt.GATT_SUCCESS) {   //找到服务了
            //在这里可以对服务进行解析，寻找到你需要的服务
        } 
    }

     //设备发出通知时会调用到该接口
    @Override
    public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
        super.onCharacteristicChanged(gatt, characteristic);
        Log.e(&quot;log_change&quot;,&quot;发送通知&quot;);
    }

   //当读取设备时会回调该函数
    @Override
    public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
        super.onCharacteristicRead(gatt, characteristic, status);
        if (status == BluetoothGatt.GATT_SUCCESS) {
            //读取成功
            Log.e(&quot;log_read&quot;,characteristic.getValue()[0]+&quot;&quot;);
        }else{
          //读取失败
        }

    }

  //当向Characteristic写数据时会回调该函数
    @Override
    public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
        super.onCharacteristicWrite(gatt, characteristic, status);
        if(status == BluetoothGatt.GATT_SUCCESS){
          //写入成功
        }else{
          //写入失败
        }
    }

  @Override //当向设备Descriptor中写数据时，会回调该函数
public void onDescriptorWrite(BluetoothGatt gatt,BluetoothGattDescriptor descriptor, int status) {
      super.onDescriptorRead(gatt, descriptor, status);
}

};<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这是整个蓝牙核心的回调方法，因为你所有的蓝牙操作都离不开这个方法。当我们调用connectGatt()方法进行连接，首先会回到onConnectionStateChange(BluetoothGatt gatt, int status, int newState);方法看是否已经连接成功，接入成功newState==BluetoothProfile.STATE_CONNECTED;此时我们就可以用 mBluetoothGatt.discoverServices();方法找出该设备中的服务了。当蓝牙设备服务查找完之后就会回调</div><div class="line">onServicesDiscovered(BluetoothGatt gatt, int status);方法此时你就可以遍历出蓝牙设备的所有服务，例如方法如下：</div></pre></td></tr></table></figure>
</code></pre><p>private void displayGattServices(List<bluetoothgattservice> gattServices) {<br>        if (gattServices == null)<br>            return;<br>        for (BluetoothGattService gattService : gattServices) {<br>           // 遍历出gattServices里面的所有服务<br>            List<bluetoothgattcharacteristic> gattCharacteristics = gattService.getCharacteristics();<br>            for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) {<br>            // 遍历每条服务里的所有Characteristic<br>               if (gattCharacteristic.getUuid().toString().equalsIgnoreCase(需要通信的UUID)) {<br>                    // 有哪些UUID，每个UUID有什么属性及作用，一般硬件工程师都会给相应的文档。我们程序也可以读取其属性判断其属性。<br>                    // 此处可以可根据UUID的类型对设备进行读操作，写操作，设置notification等操作<br>                    // BluetoothGattCharacteristic gattNoticCharacteristic 假设是可设置通知的Characteristic<br>                    // BluetoothGattCharacteristic gattWriteCharacteristic 假设是可读的Characteristic<br>                    // BluetoothGattCharacteristic gattReadCharacteristic  假设是可写的Characteristic<br>               }<br>            }<br>        }<br>    }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">到这一步，你就需要硬件工程师给你提供关于这个蓝牙设备的UUID文档，每个UUID的功能和操作都需要文档提供，不然你也不知道这些UUID具体代表什么功能和怎么用。当你知道UUID的意思,你就可以通过BluetoothGattCharacteristic 这个类进行各种读写操作。</div><div class="line"></div><div class="line">5.当你从文档看到遍历出来的UUID有接送通知的功能。这时你就可以设置可以接收通知。代码如下:</div></pre></td></tr></table></figure></bluetoothgattcharacteristic></bluetoothgattservice></p>
<p>public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enabled) {<br>        if (mBluetoothAdapter == null || mBluetoothGatt == null) {<br>            Log.w(TAG, “BluetoothAdapter not initialized”);<br>            return;<br>        }<br>        mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);<br>        BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(“00002902-0000-1000-8000-00805f9b34fb”));<br>        if (descriptor != null) {<br>            descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);<br>            mBluetoothGatt.writeDescriptor(descriptor);<br>        }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">通过拿到对应通知UUID的BluetoothGattCharacteristic，调用setCharacteristicNotification().其中00002902-0000-1000-8000-00805f9b34fb是系统提供接受通知自带的UUID，通过设置BluetoothGattDescriptor相当于设置BluetoothGattCharacteristic的Descriptor属性来实现通知，这样只要蓝牙设备发送通知信号，就会回调onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) 方法，这你就可以在这方法做相应的逻辑处理。</div><div class="line"></div><div class="line">6。还是当你遍历的UUID服务中关于写数据到设备已达到控制设备的UUID是，你可以保存对应的BluetoothGattCharacteristic对象。然后向BluetoothGattCharacteristic对象写入数据，在通过</div><div class="line">BluetoothGatt调用writeCharacteristic()方法即可向硬件写入数据，例如下代码:</div></pre></td></tr></table></figure></p>
<p>sendCharacteristic.setValue(new byte[] {0x00});<br>mBluetoothGatt.writeCharacteristic(sendCharacteristic);<br>```<br>其中一般硬件里读出写入的数据为二进制类型，所以要熟悉整型，字符串，二进制，十六进制等它们之间的转换。至于写什么数据看硬件工程师的文档。</p>
<p>7.有写就有读，从蓝牙设备读数据也不难。首先还是从遍历的UUID中找到关于读取蓝牙设备数据的UUID，具体哪个UUID还是要看硬件文档。然后还是保存对应的BluetoothGattCharacteristic对象。当要读取时直接用运行BluetoothGatt的readCharacteristic(BluetoothGattCharacteristic characteristic);参数里的characteristic就是你保存的BluetoothGattCharacteristic对象，如<code>mBluetoothGatt.readCharacteristic(getCharacteristic);</code>然后就会回调上面的onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status);方法，最后当status == BluetoothGatt.GATT_SUCCESS时，即可通过characteristic.getValue();方法获取蓝牙设备返回的数据，你拿到数据剩下就是你的逻辑处理了。</p>
<p>至此，蓝牙4.0的关键知识就写完了，你掌握这些就可以连接蓝牙设备做很多事了,当然前提是要有蓝牙的硬件文档，不然你也不知道那些UUID是什么意思要怎么用。如果对你有帮助就请给我给喜欢吧,谢谢。</p>
]]></content>
    
    <summary type="html">
    
      这次主要讲解蓝牙4.0的基本要点,作为自己的备忘录记录下来吧。首先普及一下蓝牙4.0基于Gatt协议来实现。而蓝牙4.0以下的是传统蓝牙，基于socket方式来实现。所以4.0以上的蓝牙具有传输速度更快，覆盖范围更广，安全性更高，延迟更短，耗电极低等等优点。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="android蓝牙4.0" scheme="http://jack921.win/tags/android%E8%93%9D%E7%89%994-0/"/>
    
  </entry>
  
  <entry>
    <title>基于豆瓣和妹子的api用React Native写的demo for android</title>
    <link href="http://jack921.win/2017/01/24/%E5%9F%BA%E4%BA%8E%E8%B1%86%E7%93%A3%E5%92%8C%E5%A6%B9%E5%AD%90%E7%9A%84api%E7%94%A8React%20Native%E5%86%99%E7%9A%84demo%20for%20android/"/>
    <id>http://jack921.win/2017/01/24/基于豆瓣和妹子的api用React Native写的demo for android/</id>
    <published>2017-01-24T02:53:00.000Z</published>
    <updated>2017-04-29T16:43:23.837Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在学React Naitve,可以说React Native的确有他自身强大的地方,不管是运行效率还是热更新都和一般的h5有的一比,当然因为面世的时间还不算太久,版本更新又十分的快,所以坑也多,对于一般的移动开发者来说学习成本也蛮大的, 个人觉得用React Naitve做混合开发，把一些需要经常变化的模块用react native开发还是一个不错的选择。</p>
<ol>
<li>demo就是已React Naitve的官方文档和学习过程中踩过的这种坑写出来仅供学习demo级东西，因为没有苹果电脑,只试运行android.</li>
<li>数据方面是用豆瓣的Gank的妹子api</li>
<li>所用到的第三方控件如下:</li>
</ol>
<ul>
<li>React-native-vector-icons(一个可以用的网上图标库,不用自己设计),</li>
<li>React-native-scrollable-tab-view(通用的Tab控制器),这上面两个的开源的结合可以参考<a href="http://www.jianshu.com/p/b0cfe7f11ee7" target="_blank" rel="external">http://www.jianshu.com/p/b0cfe7f11ee7</a>这篇博客,</li>
<li>React-native-tab-navigator(底部的tab控制器)</li>
</ul>
<p>剩下的用到的React Native的原生控件有:</p>
<ul>
<li>ScorllView</li>
<li>WebView</li>
<li>TouchableOpacity</li>
<li>Navigator</li>
<li>Text</li>
<li>Image</li>
<li>ListView</li>
<li>BackAndroid</li>
<li>Button</li>
<li>DrawerLayoutAndroid</li>
<li>ActivityIndicator</li>
<li>ToastAndroid</li>
<li>…</li>
</ul>
<p>效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a2ecb0e32ef034a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo_img1.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c441daf9615d0f6f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="
![demo_img2.jpg](http://upload-images.jianshu.io/upload_images/925576-f7bfb21db961d4dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)
"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-96cb8eab949aeed7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo_img3.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-6369f8477f0414c0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="demo_img4.jpg"></p>
<p>最后github地址<a href="https://github.com/jack921/JackBan-ReactNative" target="_blank" rel="external">https://github.com/jack921/JackBan-ReactNative</a></p>
]]></content>
    
    <summary type="html">
    
      最近一直在学React Naitve,可以说React Native的确有他自身强大的地方,不管是运行效率还是热更新都和一般的h5有的一比,当然因为面世的时间还不算太久,版本更新又十分的快,所以坑也多,对于一般的移动开发者来说学习成本也蛮大的, 个人觉得用React Naitve做混合开发，把一些需要经常变化的模块用react native开发还是一个不错的选择。
    
    </summary>
    
      <category term="React Native" scheme="http://jack921.win/categories/React-Native/"/>
    
    
      <category term="react native" scheme="http://jack921.win/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能</title>
    <link href="http://jack921.win/2016/12/23/%E4%B8%80%E4%B8%AA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%B9%B2%E8%B4%A7%E9%9B%86%E4%B8%AD%E8%90%A5%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%94%9F%E6%88%90%EF%BC%8C%E9%9B%86%E5%90%88%E4%BA%86%E5%B9%B2%E8%B4%A7api%E7%9A%84%E5%A4%A7%E9%83%A8%E5%88%86%E5%8A%9F%E8%83%BD/"/>
    <id>http://jack921.win/2016/12/23/一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能/</id>
    <published>2016-12-23T09:58:00.000Z</published>
    <updated>2017-04-29T16:44:57.837Z</updated>
    
    <content type="html"><![CDATA[<p>好像好久没有更新了,这次给大家带来的是自己完全用一个全新的方式练手开发的客户端，而后台接口用的是干货集中营的API，所以在这里要谢谢daimajia,因为他的贡献所以我们才可以有好的api进行练手。</p>
<p>这是一个漂亮的Gank客户端,里面的功能包含了干货集中营的api所提供的大部分功能。功能如下：</p>
<ul>
<li>可以查看每一天提供的Android,ios,休息视频等相关的技术干货，还有一张高清的妹子图在等着你哦</li>
<li>除此之外你还可以查看过往任何一天推荐的干货，让你真正的不会错过每天的干货集中营的推荐，并且支持发布自己的链接给代码家和根据关键字搜索自己想要的内容</li>
<li>同时可以按照不同的分类查看自己感兴趣的分类的干货如android,ios等，并且可以对分类进行排序，删除，再加入丰富的动画效果，体验效果棒棒的</li>
<li>对于男基友来说最最重要的当然是查看妹子啦，这也少不了，高清妹子图形成的瀑布流列表，支持转场动画，滑动浏览，放大图片，让你流连忘返</li>
<li>对于自己喜欢的干货数据不仅可以分享，还可以收藏，让你看了还可以再看，也可以让别人知道</li>
<li>最后支持app换肤，海量颜色总有一种颜色是你喜欢的，打造属于自己个性的Gank客户端</li>
</ul>
<p>功能就大概这样啦，以上功能也基本对接的干货集中营api的大部分功能，算是先对与其他客户端来说功能比较全面的。</p>
<h6 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h6><p>有人说现在这Gank的客户端已经很多了为什么还要做。本项目完全开源，用的是现在很多的MVP模式开发，并学习和整个Rxjava,Retrofit,EventBus,ButterKnife的各个优秀开源框架的优点而产生的东西，自己学一个完成客户端从开始的设计，调研，都后来的编码，还有一些看似简单其实还是有点麻烦的小细节的实现，整个流程一下来是可以学到很多东西的，和激发起自己的很多思考，这也是我觉得做这个最重要的地方。所以做这个东西还有蛮有意义的，特别是一些细节，所对分类的排序怎样过度好，点击图片的转场动画，沉浸式状态栏的，和android5.0的新控件的运用等等的这些细节都是看似简单其实还是要花点力气的。此外用新的东西练练手也是很重要的。</p>
<p>就说到这，项目的效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-c7f4f1d84658b6fe.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img1.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-e50a1f785c6e5a38.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.jpg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-ad3193f28e8ae2c2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.jpg"></p>
<p><a href="https://github.com/jack921/GankNew" target="_blank" rel="external">github源码</a><br>觉得有帮助的话就给个start吧</p>
<p><a href="http://fir.im/j8c3" target="_blank" rel="external">app下载</a></p>
]]></content>
    
    <summary type="html">
    
      这次给大家带来的是自己完全用一个全新的方式练手开发的客户端，而后台接口用的是干货集中营的API，所以在这里要谢谢daimajia,因为他的贡献所以我们才可以有好的api进行练手。
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="Gank Android 客户端" scheme="http://jack921.win/tags/Gank-Android-%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>高仿QQ运动的周报界面</title>
    <link href="http://jack921.win/2016/10/22/%E9%AB%98%E4%BB%BFQQ%E8%BF%90%E5%8A%A8%E7%9A%84%E5%91%A8%E6%8A%A5%E7%95%8C%E9%9D%A2/"/>
    <id>http://jack921.win/2016/10/22/高仿QQ运动的周报界面/</id>
    <published>2016-10-22T14:05:00.000Z</published>
    <updated>2017-05-16T16:22:37.334Z</updated>
    
    <content type="html"><![CDATA[<p>这次高仿的是QQ运动的周报界面的网图。这个控件刚开始的时候以为代码量不大，没想到一路下来界面代码在加上动画代码还是蛮多的。好了老规矩先上图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-08ae515a0f3bcd81.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"><br>效果还是和qq的才不多吧。 1. 首先我把各个变量都贴出来以便在后续中你们可以更好理解代码的意思：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line">//屏幕的宽度 </div><div class="line">private int mScreemWidth; </div><div class="line">//屏幕的高度 </div><div class="line">private int mScreemHight;</div><div class="line"> //圆的线 </div><div class="line">private Paint mCirclePaint; </div><div class="line">//圆区域的颜色 </div><div class="line">private Paint mCirclePaintColor; </div><div class="line">//虚线 </div><div class="line">private Paint mLineCircle;</div><div class="line"> //圆点 </div><div class="line">private Paint mCircleHoldPaint; </div><div class="line">//画字体 </div><div class="line">private Paint mCenterCircle; </div><div class="line">//最外的圆的透明度 </div><div class="line">private int mCircleAlpha1=0; </div><div class="line">//中间的圆的透明度 </div><div class="line">private int mCircleAlpha2=0; </div><div class="line">//最内的圆的透明度 </div><div class="line">private int mCircleAlpha3=0; </div><div class="line">//好友排名 </div><div class="line">private int mFriendDranking=0; </div><div class="line">//达标天数 </div><div class="line">private int mStandardDay=0; </div><div class="line">//平均步数 </div><div class="line">private int mAverageCount=0; </div><div class="line">//好友排名的X轴坐标 </div><div class="line">private float mFriendDrankingX=0; </div><div class="line">//好友排名的Y轴坐标 </div><div class="line">private float mFriendDrankingY=0; </div><div class="line">//平均步数的X轴坐标</div><div class="line">private float mStandardDayX=0; </div><div class="line">//平均步数的Y轴坐标 </div><div class="line">private float mStandardDayY=0;</div><div class="line"> //达标天数的X轴坐标 </div><div class="line">private float mAverageCountX=0; </div><div class="line">//达标天数的Y轴坐标 </div><div class="line">private float mAverageCountY=0; </div><div class="line">//临时的View的半径 </div><div class="line">private int tempCircleRadius=0; </div><div class="line">//View的半径 </div><div class="line">private int circleRadius=0; </div><div class="line">//每个圆圈的间隔 </div><div class="line">private float marginCircleSize=0; </div><div class="line">//圆的颜色 </div><div class="line">private int circleColor=0; </div><div class="line">//朋友区域的颜色 </div><div class="line">private int friendColor; </div><div class="line">//平均步数区域的颜色 </div><div class="line">private int averageColor; </div><div class="line">//达标天数区域的颜色 </div><div class="line">private int standardColor; </div><div class="line">//总步数 </div><div class="line">private String allStep; </div><div class="line">//好友排名</div><div class="line">private String firendDrank; </div><div class="line">//达标天数 </div><div class="line">private String standarDay; </div><div class="line">//平均步数 </div><div class="line">private String averageCount; </div><div class="line">//波浪动画的数值 </div><div class="line">private int waveData=-30; </div><div class="line">//中间文字翻转动画的数值 </div><div class="line">private float centerData=0; </div><div class="line">//画波浪的看门狗 </div><div class="line">private boolean waveWatchDag=false; </div><div class="line">//画虚线的看门狗 </div><div class="line">private boolean lineWatchDag=false; </div><div class="line">//各点解释的看门狗 </div><div class="line">private boolean expainWatchDag=false; </div><div class="line">//中心圆的内容的看门狗 </div><div class="line">private boolean centerWatchDag=false; </div><div class="line">//解释的字符串 </div><div class="line">private String averageCountTxt=&quot;平均步数&quot;; </div><div class="line">private String friendDrankTxt=&quot;好友排名&quot;; </div><div class="line">private String standarDayTxt=&quot;达标天数&quot;; </div><div class="line">private String theyCount=&quot;本周总步数&quot;; </div><div class="line">private String tip=&quot;步&quot;;</div></pre></td></tr></table></figure></p>
<p>2.有点多了，其次就是测量View的大小的onMeasure():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@Override protected void onMeasure(</div><div class="line">int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line"> int widthModel=MeasureSpec.getMode(widthMeasureSpec); </div><div class="line"> int heightModel=MeasureSpec.getMode(heightMeasureSpec); </div><div class="line"> int measureWidth=MeasureSpec.getSize(widthMeasureSpec); </div><div class="line"> int measureHeight=MeasureSpec.getSize(heightMeasureSpec); </div><div class="line"> int width; </div><div class="line"> int height; </div><div class="line">   if(widthModel==MeasureSpec.EXACTLY)&#123; </div><div class="line">     width=measureWidth; </div><div class="line">   &#125;else&#123; </div><div class="line">    width=getPaddingLeft()+getPaddingRight()+measureWidth;</div><div class="line">   &#125;</div><div class="line">   if(heightModel==MeasureSpec.EXACTLY)&#123; </div><div class="line">    height=measureHeight; </div><div class="line">   &#125;else&#123; </div><div class="line">    height=(getPaddingLeft()+getPaddingRight()+measureHeight)/2; </div><div class="line">  &#125; </div><div class="line">   setMeasuredDimension(width,height); </div><div class="line">  loadAnimator(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 3.这里当设置大小为wrap_content的时候，View的宽度的话是用屏幕的的宽，而View的高的话是屏幕的高度的一半。当View的大小生成之后会调用onSizeChange()方法，具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override </div><div class="line">protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; </div><div class="line">super.onSizeChanged(w, h, oldw, oldh); </div><div class="line">mScreemWidth=w; </div><div class="line">mScreemHight=h;</div><div class="line">  //得出最大的圆的半径 </div><div class="line">  if(mScreemWidth&gt;mScreemHight)&#123; </div><div class="line">     circleRadius=Float.valueOf((w/3.4)+&quot;&quot;).intValue(); </div><div class="line">  &#125;else&#123; </div><div class="line">    circleRadius=Float.valueOf((h/3.4)+&quot;&quot;).intValue(); </div><div class="line">  &#125; </div><div class="line"> if(tempCircleRadius!=0&amp;&amp;tempCircleRadius&lt;=circleRadius)&#123;          </div><div class="line">    circleRadius=tempCircleRadius; </div><div class="line"> &#125; </div><div class="line">   //得出每个圆的间隔 </div><div class="line">   marginCircleSize=circleRadius/6; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当View的宽度大于View的高度时，最外边的圆的半径就是w/3.4，反之当View的高度大于View的宽度时，最外边的圆的半径就是h/3.4,而每个圆的间隔就是圆半径的六分之一。4.接着就是最重要的onDraw()方法了，代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@Override protected void onDraw(Canvas canvas) &#123; </div><div class="line">canvas.translate(getWidth()/2,getHeight()/2-(circleRadius/6)); </div><div class="line">  canvas.save(); </div><div class="line">  //画出三条圆圈 </div><div class="line">  drawCircle(canvas);</div><div class="line">  //画出波浪图形 </div><div class="line">  drawWaves(canvas); </div><div class="line">  //画虚线 </div><div class="line">  drawDottedLine(canvas); </div><div class="line">  //画点 </div><div class="line">  drawCircleHold(canvas); </div><div class="line">  //画解释的内容 </div><div class="line">  drawExpain(canvas); </div><div class="line">  //画中心圆的内容 </div><div class="line">  centerCircleContent(canvas); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先把canvas的原点移到X轴为宽度的一半，Y轴为高度的一半再减去六分之一的半径，保存canvas的状态。接着就一个个说这里面的每一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">//画出三条圆圈 </div><div class="line">public void drawCircle(Canvas canvas)&#123; </div><div class="line">  //画出最大的圆 </div><div class="line">  mCirclePaint.setAlpha(mCircleAlpha1);</div><div class="line">  canvas.drawCircle(0,0,circleRadius,mCirclePaint); </div><div class="line">  //画出第二大的圆 </div><div class="line">  mCirclePaint.setAlpha(mCircleAlpha2); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize,mCirclePaint); </div><div class="line">  mCirclePaintColor.setColor(Color.parseColor(&quot;#F1FCFE&quot;)); </div><div class="line">  mCirclePaintColor.setAlpha(mCircleAlpha2); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize-2,mCirclePaintColor); </div><div class="line">  //画出第三大的圆 </div><div class="line">  mCirclePaint.setAlpha(mCircleAlpha3); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize*2,mCirclePaint); </div><div class="line">  mCirclePaintColor.setColor(Color.parseColor(&quot;#E7F9FE&quot;)); </div><div class="line">  mCirclePaintColor.setAlpha(mCircleAlpha3); </div><div class="line">  canvas.drawCircle(0,0,circleRadius-marginCircleSize*2-2,mCirclePaintColor); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法是比较简单的，就是画出三个圆圈，每个圆圈的间隔就是前面所初始化的marginCircleSize，圆圈的圆心就是canvas的原点，之前我们移动过原点了。第二和第三个圆圈里面还配有圆的背景，效果如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-8762fcd94edd4f08.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img1.PNG"><br>接着就是画出波浪图形的方法 drawWaves(canvas)代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"> //画出波浪图形 </div><div class="line">public void drawWaves(Canvas canvas)&#123;</div><div class="line"> if(!waveWatchDag)&#123;</div><div class="line">     return ;</div><div class="line"> &#125; </div><div class="line"></div><div class="line">canvas.rotate(waveData);</div><div class="line">float inCircleRadius=circleRadius-marginCircleSize*3; </div><div class="line">//算出最上面的点 </div><div class="line">float topPointX=0; </div><div class="line">float topPointY=-inCircleRadius; </div><div class="line">//算出左下角的点 </div><div class="line">float leftBottpmPointX=-(float)Math.sqrt(Math.pow(inCircleRadius,2)-Math.pow(inCircleRadius/2,2));</div><div class="line">float leftBottomPointY=inCircleRadius/2; </div><div class="line">//算出右小角的点 </div><div class="line">float rightBottomPointX=-leftBottpmPointX;</div><div class="line">float rightBottomPointY=inCircleRadius/2;</div><div class="line">//得到好友排名半径</div><div class="line">float mFriendDrankingData=circleValue(mFriendDranking); </div><div class="line">//得到达标天数半径 </div><div class="line">float mStandarDayData=circleValue(mStandardDay); </div><div class="line">//得到平均步数半径</div><div class="line">float mAverageCountData=circleValue(mAverageCount); </div><div class="line"></div><div class="line">/*画好友排名*/ </div><div class="line">//得出左上角的圆的坐标</div><div class="line">float[] mFriendDrankingPoint=calculatePoint(mFriendDrankingData); </div><div class="line">//好友排名的X轴坐标 </div><div class="line">mFriendDrankingX=-mFriendDrankingPoint[0]; </div><div class="line">//好友排名的Y轴坐标 </div><div class="line">mFriendDrankingY=-mFriendDrankingPoint[1]; </div><div class="line">//画出还有排名的波浪线 </div><div class="line">Path mFriendDrankingPath=new Path(); </div><div class="line">mFriendDrankingPath.moveTo(leftBottpmPointX,leftBottomPointY); </div><div class="line">mFriendDrankingPath.lineTo(mFriendDrankingX-6,mFriendDrankingY-6); </div><div class="line">mFriendDrankingPath.lineTo(topPointX,topPointY); </div><div class="line">mFriendDrankingPath.lineTo(topPointX+10,topPointY+10); </div><div class="line">mCirclePaintColor.setPathEffect(new CornerPathEffect(20)); </div><div class="line">mCirclePaintColor.setColor(friendColor); </div><div class="line">canvas.drawPath(mFriendDrankingPath,mCirclePaintColor);</div><div class="line"></div><div class="line"> /*画达标天数*/ </div><div class="line">//得出右上角的圆的坐标</div><div class="line"> float[] mStandarDayPoint=calculatePoint(mStandarDayData);</div><div class="line"> //达标天数的X轴坐标</div><div class="line"> mStandardDayX=mStandarDayPoint[0]; </div><div class="line">//达标天数的Y轴坐标 </div><div class="line">mStandardDayY=-mStandarDayPoint[1];</div><div class="line"> //画出还有达标天数的波浪线 </div><div class="line">Path mStandarDayPath=new Path();</div><div class="line"> mStandarDayPath.moveTo(topPointX,topPointY); </div><div class="line">mStandarDayPath.lineTo(mStandardDayX+6,mStandardDayY-6); </div><div class="line">mStandarDayPath.lineTo(rightBottomPointX,rightBottomPointY); </div><div class="line">mStandarDayPath.lineTo(rightBottomPointX-10,rightBottomPointY+10); </div><div class="line">mCirclePaintColor.setColor(standardColor); </div><div class="line">canvas.drawPath(mStandarDayPath,mCirclePaintColor); </div><div class="line"></div><div class="line">/*平均步数*/</div><div class="line">//平均步数的X轴坐标 </div><div class="line">mAverageCountX=0; </div><div class="line">//平均步数的Y轴坐标 </div><div class="line">mAverageCountY=mAverageCountData;</div><div class="line">//画出还有平均步数的波浪线 </div><div class="line">Path mAverageCountPath=new Path();</div><div class="line">mAverageCountPath.moveTo(rightBottomPointX,rightBottomPointY); </div><div class="line">mAverageCountPath.lineTo(topPointX,mAverageCountData+8); </div><div class="line">mAverageCountPath.lineTo(leftBottpmPointX,leftBottomPointY); </div><div class="line">mAverageCountPath.lineTo(leftBottpmPointX+10,leftBottomPointY+10); </div><div class="line">mCirclePaintColor.setColor(averageColor); </div><div class="line">canvas.drawPath(mAverageCountPath,mCirclePaintColor);</div><div class="line"> //最里面的圆 mCirclePaintColor.setColor(Color.WHITE); </div><div class="line">canvas.drawCircle(0,0,circleRadius-marginCircleSize*3,mCirclePaintColor); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这方法里最核心的就是数学计算了，整个View有3个波浪区域，各占一个圆的三分之一，所以第一步就是计算出这个圆的左下角,右小角和正上角的三个点，如图<br><img src="http://upload-images.jianshu.io/upload_images/925576-5c3e3e7c151a9cd8.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.PNG">的蓝色点所示。具体代码见注释。在通过circleValue算出波浪线的半径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> //算出弧线区域的半径 </div><div class="line">public float circleValue(int mDataDranking)&#123; </div><div class="line">if(mDataDranking==1)&#123; </div><div class="line">    return circleRadius-marginCircleSize*2; </div><div class="line">&#125;else if(mDataDranking==2)&#123; </div><div class="line">    return circleRadius-marginCircleSize; </div><div class="line">&#125;else if(mDataDranking==3)&#123; </div><div class="line">    return circleRadius; </div><div class="line">&#125;else&#123; </div><div class="line">    return circleRadius-marginCircleSize*2;</div><div class="line"> &#125; &#125;</div></pre></td></tr></table></figure></p>
<p>然后通过calculatePoint()方法来各个波浪区域对应的顶点，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//算出右上角或左上角的坐标 </div><div class="line">public float[] calculatePoint(float radius)&#123; </div><div class="line">   float[] result=new float[2]; </div><div class="line">   float pointY=radius/2; </div><div class="line">   float pointX=(float)Math.sqrt(Math.pow(radius,2)-Math.pow(pointY,2)); </div><div class="line">   result[0]=pointX; </div><div class="line">   result[1]=pointY; </div><div class="line">   return result; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后转化为形象的图就是:<br><img src="http://upload-images.jianshu.io/upload_images/925576-eb3181385fef577e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.PNG">接着用Path把各个区域的点连起来就是形成区域，不过现在还是尖角，要把它变成原角就要用mCirclePaintColor.setPathEffect(new CornerPathEffect(20));方法，这样各个边的连接处都可以转换成圆角，可是因为是圆角所以到不到圆圈的边，这时候你要对你的顶点进行微调，所以我再顶点都进行了减6或者加6的操作。至于我这个6是怎么得出来的,我用的等比例的数学方法来求出来的，到时有优化我可以把我的方法用代码表示出来。至此，重要的就说完了，剩下的只是用canvas和path和paint画出来就是了。效果如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-ce3162a552d959a9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img4.PNG"><br>接着就是画虚线的方法了drawDottedLine(canvas)代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"> //画圆点和虚线 </div><div class="line">public void drawDottedLine(Canvas canvas)&#123; </div><div class="line">    if(!lineWatchDag)&#123; </div><div class="line">       return; </div><div class="line">    &#125; </div><div class="line">   for(int i=0;i&lt;3;i++)&#123; </div><div class="line">      canvas.rotate(120); </div><div class="line">    if(i==0)&#123; </div><div class="line">    //画好友排名的虚线</div><div class="line">    mLineCircle.setTextSize(18); </div><div class="line">    mLineCircle.setColor(friendColor);     </div><div class="line">   drawDottedLine(canvas,judgeDotte(mFriendDranking)); </div><div class="line">    &#125;else if(i==1)&#123; </div><div class="line">   //画达标天数的虚线 </div><div class="line">   mLineCircle.setColor(standardColor); </div><div class="line">   drawDottedLine(canvas,judgeDotte(mStandardDay));</div><div class="line">   &#125;else if(i==2)&#123; </div><div class="line">   //画平均步数的虚线 </div><div class="line">  mLineCircle.setColor(averageColor); </div><div class="line">  drawDottedLine(canvas,judgeDotte(mAverageCount)); </div><div class="line">&#125; &#125; </div><div class="line">  canvas.restore(); </div><div class="line">&#125;  </div><div class="line"></div><div class="line">//判断虚线 </div><div class="line">public List&lt;Float&gt; judgeDotte(int value)&#123; List&lt;Float&gt; temp=new ArrayList&lt;&gt;(); </div><div class="line">     if(value==1)&#123; </div><div class="line">       //当为1时,波浪顶点到第三个圆  </div><div class="line">      temp.add(circleRadius-marginCircleSize*2); </div><div class="line">      temp.add((float)circleRadius); </div><div class="line">      temp.add(circleRadius-marginCircleSize*3); </div><div class="line">    &#125;else if(value==2)&#123; </div><div class="line">     //当为2时,波浪顶点到第二个圆 </div><div class="line">     temp.add(circleRadius-marginCircleSize); </div><div class="line">     temp.add((float)circleRadius); </div><div class="line">     temp.add(circleRadius-marginCircleSize*3); </div><div class="line">   &#125;else if(value==3)&#123; </div><div class="line">   //当为3时,波浪顶点到第一个圆</div><div class="line">    temp.add(circleRadius-marginCircleSize*3);</div><div class="line">    temp.add((float)circleRadius); </div><div class="line">  &#125; </div><div class="line">   return temp; </div><div class="line">&#125; </div><div class="line">//画虚线 </div><div class="line">public void drawDottedLine(Canvas canvas,List&lt;Float&gt; data)&#123; </div><div class="line">    if(data.size()==2)&#123;</div><div class="line">       /*当数值是最大的是时候也就是3*/</div><div class="line">      mLineCircle.setColor(Color.WHITE);</div><div class="line">      Path path=new Path(); </div><div class="line">     path.moveTo(0,data.get(0)); </div><div class="line">     path.lineTo(0,data.get(1));</div><div class="line">     canvas.drawPath(path,mLineCircle);</div><div class="line">     return ; </div><div class="line">&#125;else&#123; </div><div class="line">    /*当数值在1和2的时候*/ </div><div class="line">   //画出数值外的虚线 </div><div class="line">   Path pathOut=new Path(); </div><div class="line">   pathOut.moveTo(0,data.get(0));</div><div class="line">   pathOut.lineTo(0,data.get(1));</div><div class="line">   mLineCircle.setPathEffect(new DashPathEffect(new float[]&#123;7,5,7,5&#125;,5)); </div><div class="line">  canvas.drawPath(pathOut,mLineCircle); </div><div class="line">  //画出数值内的虚线 </div><div class="line">  Path pathIn=new Path(); </div><div class="line">  pathIn.moveTo(0,data.get(1)); </div><div class="line">  pathIn.lineTo(0,data.get(2)); </div><div class="line">  mLineCircle.setColor(Color.WHITE); </div><div class="line">  canvas.drawPath(pathIn,mLineCircle); </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先canvas通过每次旋转120度来画出每一条波浪线，通过judgeDotte()方法得出波浪线三个点对应的Y轴的坐标，假如judgeDotte返回的个数是两个的话那就是证明顶点在最外面的圆，假如是3个的话就画出顶点之外和顶点之内的线就可以了，代码注释已经很详细了，效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-323913dd364865f2.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img5.PNG"><br>接着是画虚线上的圆点，drawCircleHold(Canvas canvas)代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//画虚线上的圆点 </div><div class="line">public void drawCircleHold(Canvas canvas)&#123; </div><div class="line">  if(!lineWatchDag)&#123;</div><div class="line">     return;</div><div class="line">  &#125;</div><div class="line"> float[] yuan1=calculatePoint(circleRadius-marginCircleSize*2); </div><div class="line"> float[] yuan2=calculatePoint(circleRadius-marginCircleSize); </div><div class="line"> float[] yuan3=calculatePoint(circleRadius); </div><div class="line">//画好友排名的圆点 </div><div class="line">drawCircleHoldImpl(-yuan1[0],-yuan1[1],-yuan2[0],-yuan2[1], -yuan3[0],-yuan3[1],mFriendDranking,canvas,friendColor);</div><div class="line"> //画达标天数的圆点 </div><div class="line">drawCircleHoldImpl(yuan1[0],-yuan1[1],yuan2[0],-yuan2[1], yuan3[0],-yuan3[1],mStandardDay,canvas,standardColor);</div><div class="line"> //画平均步数的圆点 drawCircleHoldImpl(0,circleRadius-marginCircleSize*2,0,circleRadius-marginCircleSize, 0,circleRadius,mAverageCount,canvas,averageColor); </div><div class="line">expainWatchDag=true;</div><div class="line"> &#125; </div><div class="line">//画圆的具体的方法 </div><div class="line">public void drawCircleHoldImpl(float mCirlce1X,float mCircle1Y,float mCirlce2X,float mCircle2Y, float mCirlce3X,float mCircle3Y,int action,Canvas canvas,int color)&#123; </div><div class="line">mCircleHoldPaint.setColor(color); </div><div class="line">if(action==1)&#123; </div><div class="line">//当数值为3时画所有圆圈 canvas.drawCircle(mCirlce1X,mCircle1Y,8,mCircleHoldPaint); </div><div class="line">canvas.drawCircle(mCirlce2X,mCircle2Y,8,mCircleHoldPaint); </div><div class="line">&#125;else if(action==2)&#123;</div><div class="line"> //当数值为2时画中间的圆圈 </div><div class="line">canvas.drawCircle(mCirlce2X,mCircle2Y,8,mCircleHoldPaint);</div><div class="line"> &#125; </div><div class="line">//画一定要画的圆圈和圆点 </div><div class="line">canvas.drawCircle(mCirlce3X,mCircle3Y,8,mCircleHoldPaint); </div><div class="line">mCircleHoldPaint.setColor(Color.WHITE); </div><div class="line">canvas.drawCircle(mCirlce1X,mCircle1Y,6,mCircleHoldPaint); </div><div class="line">canvas.drawCircle(mCirlce2X,mCircle2Y,6,mCircleHoldPaint); </div><div class="line">canvas.drawCircle(mCirlce3X,mCircle3Y,6,mCircleHoldPaint); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里同样注释也是很详细的，整个思路就是通过calculatePoint()算出三个圆点的坐标，在通过传进去的数值来要画多少个圆圈，而原点是不管数值多少都要画的。效果图如下：<br><img src="http://upload-images.jianshu.io/upload_images/925576-8b9b623f2a29804e.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img6.PNG"><br>接着就是画解释的内容drawExpain(Canvas canvas)代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> //画解释的内容 </div><div class="line">public void drawExpain(Canvas canvas)&#123; </div><div class="line">    if(!expainWatchDag)&#123;</div><div class="line">        return ;</div><div class="line">    &#125; </div><div class="line">//间隔 int margin=circleRadius/5; </div><div class="line">//画平均步数和对应的数值 </div><div class="line">   Rect txtRect=new Rect(); </div><div class="line">   mCenterCircle.setColor(Color.BLACK); </div><div class="line">   mCenterCircle.setTextSize(circleRadius/6); </div><div class="line">   mCenterCircle.setTypeface(Typeface.SANS_SERIF); </div><div class="line">   canvas.drawText(averageCount,0,circleRadius+margin,mCenterCircle); </div><div class="line">   mCenterCircle.setColor(friendColor); mCenterCircle.setTextSize(circleRadius/10); </div><div class="line">  mCenterCircle.getTextBounds(averageCountTxt,0,averageCountTxt.length(),txtRect); </div><div class="line">  canvas.drawText(averageCountTxt,0,circleRadius+margin+(txtRect.bottom-   txtRect.top),mCenterCircle);</div><div class="line"> </div><div class="line">//画好友排名和对应的数值</div><div class="line">  mCenterCircle.setColor(Color.BLACK); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/6); </div><div class="line">  canvas.drawText(firendDrank,-circleRadius,-(circleRadius-  marginCircleSize),mCenterCircle); </div><div class="line">  mCenterCircle.setColor(friendColor); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/10); </div><div class="line">  mCenterCircle.getTextBounds(friendDrankTxt,0,friendDrankTxt.length(),txtRect); </div><div class="line">  canvas.drawText(friendDrankTxt,-circleRadius,-(circleRadius-marginCircleSize)+(txtRect.bottom-txtRect.top),mCenterCircle);</div><div class="line">  //画达标天数和对应的数值 </div><div class="line">  mCenterCircle.setColor(Color.BLACK); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/6); </div><div class="line">  canvas.drawText(standarDay,circleRadius,-(circleRadius-  marginCircleSize),mCenterCircle); </div><div class="line">  mCenterCircle.setColor(friendColor); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/10); </div><div class="line">  mCenterCircle.getTextBounds(friendDrankTxt,0,friendDrankTxt.length(),txtRect); </div><div class="line">  canvas.drawText(standarDayTxt,circleRadius,-(circleRadius-marginCircleSize)+(txtRect.bottom-txtRect.top),mCenterCircle); centerWatchDag=true; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来代码有点多，其实是最简单的，就是确定好友排名的坐标(-circleRadius,-(circleRadius-marginCircleSize)),int margin=circleRadius/5,平均步数的坐标(0,circleRadius+margin),达标天数的坐标(circleRadius,-(circleRadius-marginCircleSize))来进行drawText的操作而已，没什么可以说的，Rect是得出字体大小的，具体看上面代码。效果如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-9fa29418c9dd9e9c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img7.PNG"><br>最后就是画中心圆的内容的centerCircleContent(canvas)了，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//画中心圆的内容 </div><div class="line">public void centerCircleContent(Canvas canvas)&#123; </div><div class="line">if(!centerWatchDag)&#123; </div><div class="line">return ; </div><div class="line">&#125; </div><div class="line">//画出颜色渐变的圆圈 </div><div class="line">  canvas.rotate(140); </div><div class="line">  float centerSize=circleRadius-marginCircleSize*3-(circleRadius/20); </div><div class="line">  mCenterCircle.setShader(new SweepGradient(0,0,new int[]&#123;   friendColor,friendColor,standardColor,averageColor&#125;,null)); </div><div class="line">  canvas.drawCircle(0,0,centerSize,mCenterCircle); </div><div class="line">  canvas.rotate(-140); </div><div class="line">//画出运动的总步数 </div><div class="line">  mCenterCircle.setShader(null); </div><div class="line">  mCenterCircle.setColor(friendColor); </div><div class="line">  mCenterCircle.setTextSize(circleRadius/4);     </div><div class="line">  mCenterCircle.setTextAlign(Paint.Align.CENTER); </div><div class="line">  Rect numRect=new Rect();   </div><div class="line">  mCenterCircle.getTextBounds(allStep,0,allStep.length(),numRect); </div><div class="line">  Camera camera=new Camera(); camera.rotateY(centerData); </div><div class="line">  camera.applyToCanvas(canvas); </div><div class="line">  canvas.drawText(allStep,0,(numRect.bottom-numRect.top)/2,mCenterCircle); </div><div class="line">//画出总运动步数右边的字</div><div class="line">  Rect tipRect=new Rect(); </div><div class="line"> mCenterCircle.setTextSize(circleRadius/12); </div><div class="line"> mCenterCircle.getTextBounds(tip,0,tip.length(),tipRect); </div><div class="line"> canvas.drawText(tip,(numRect.right-numRect.left)/2+(tipRect.right-tipRect.left)/2+5 ,(numRect.bottom-numRect.top)/2-3,mCenterCircle); </div><div class="line">//画出总运动步数下面的提示 </div><div class="line"> Rect theyRect=new Rect(); </div><div class="line"> mCenterCircle.getTextBounds(theyCount,0,theyCount.length(),theyRect); </div><div class="line"> float marginBottom=circleRadius/12; </div><div class="line"> mCenterCircle.setTextSize(circleRadius/11); </div><div class="line"> canvas.drawText(theyCount,0,marginBottom+(numRect.bottom-numRect.top)/2 +(theyRect.bottom-theyRect.top)/2,mCenterCircle);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>中心圆的内容里实现的大概思路画解释的内容的思路都差不多，我觉得值得讲的就是这个Camera类了，这里的Camera类可不是相机里的Camera类，他可以实现Camera的旋转缩放的功能，是一个十分强大的类，而<code>camera.rotateY(centerData)</code>就是设置Y轴旋转的效果的关键代码。其次就是用<code>mCenterCircle.setShader(new SweepGradient(0,0,new int[]{ friendColor,friendColor,standardColor,averageColor},null));</code>来实现圆圈颜色的渐变功能的关键代码，里面还可以实现更多效果，这就需要小伙伴们用外的时间学了。最后效果如下:<br><img src="http://upload-images.jianshu.io/upload_images/925576-113243bf8482b852.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img8.PNG"><br>至此整个绘画就结束了，接着就是动画效果，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"> //启动动画的方法 </div><div class="line">public void loadAnimator()&#123;</div><div class="line"> final ValueAnimator alphaAmimator3=ValueAnimator.ofInt(0,225);</div><div class="line"> final ValueAnimator alphaAmimator2=ValueAnimator.ofInt(0,225); </div><div class="line"> final ValueAnimator wavesAminator=ValueAnimator.ofInt(-30,0); </div><div class="line"> final ValueAnimator centerAnimator=ValueAnimator.ofFloat(0,360); </div><div class="line"> ValueAnimator alphaAmimator1=ValueAnimator.ofInt(0,225); </div><div class="line"> centerAnimator.setDuration(1000);</div><div class="line"> centerAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;   </div><div class="line">  @Override </div><div class="line">  public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">     centerData=(float)animation.getAnimatedValue(); postInvalidate();</div><div class="line">   &#125; </div><div class="line">  &#125;);</div><div class="line">  wavesAminator.setDuration(1000); </div><div class="line">  wavesAminator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;    </div><div class="line">  @Override </div><div class="line">  public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">   waveData=(int)animation.getAnimatedValue(); </div><div class="line">   waveWatchDag=true; </div><div class="line">   if(waveData==0&amp;&amp;lineWatchDag==false)&#123; </div><div class="line">      lineWatchDag=true; centerAnimator.start(); </div><div class="line">   &#125; </div><div class="line">   postInvalidate(); </div><div class="line"> &#125; &#125;); </div><div class="line">alphaAmimator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override </div><div class="line">public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">   mCircleAlpha3=(int)animation.getAnimatedValue(); </div><div class="line">   postInvalidate(); </div><div class="line">   if(mCircleAlpha3==225)&#123; </div><div class="line">      wavesAminator.start(); </div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;);</div><div class="line"> alphaAmimator3.setDuration(250); </div><div class="line"> alphaAmimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override </div><div class="line">public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">   mCircleAlpha2=(int)animation.getAnimatedValue(); </div><div class="line">   postInvalidate();</div><div class="line">   if(mCircleAlpha2==225)&#123;</div><div class="line">       alphaAmimator3.start(); </div><div class="line">   &#125; </div><div class="line"> &#125; &#125;); </div><div class="line">alphaAmimator2.setDuration(250); </div><div class="line">alphaAmimator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override </div><div class="line">public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">    mCircleAlpha1=(int)animation.getAnimatedValue(); postInvalidate();    </div><div class="line">   if(mCircleAlpha1==225)&#123; </div><div class="line">       alphaAmimator2.start(); </div><div class="line">   &#125; </div><div class="line">&#125;</div><div class="line">&#125;); </div><div class="line">alphaAmimator1.setDuration(250); </div><div class="line">alphaAmimator1.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实就是通过ValueAnimator不断的生成状态量然后调用postInvalidate()不断的刷新View即可实现。最后要想更详细的了解整个流程请看源码吧。<br>奉上<strong><a href="https://github.com/jack921/WebChart" target="_blank" rel="external">源码</a></strong>。如果对你有帮助就请给我给星星或喜欢吧</p>
]]></content>
    
    <summary type="html">
    
      这次高仿的是QQ运动的周报界面的网图。这个控件刚开始的时候以为代码量不大，没想到一路下来界面代码在加上动画代码还是蛮多的。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>模仿企鹅FM播放主页面滑动动态改变各视图的大小</title>
    <link href="http://jack921.win/2016/10/05/%E6%A8%A1%E4%BB%BF%E4%BC%81%E9%B9%85FM%E6%92%AD%E6%94%BE%E4%B8%BB%E9%A1%B5%E9%9D%A2%E6%BB%91%E5%8A%A8%E5%8A%A8%E6%80%81%E6%94%B9%E5%8F%98%E5%90%84%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%A7%E5%B0%8F/"/>
    <id>http://jack921.win/2016/10/05/模仿企鹅FM播放主页面滑动动态改变各视图的大小/</id>
    <published>2016-10-05T06:12:00.000Z</published>
    <updated>2017-04-29T16:44:35.275Z</updated>
    
    <content type="html"><![CDATA[<p>国庆的一个任务就是把自己之前写的代码搬到博客。这次给各位带来的是通过滑动来动态改变各个View的大小进而达到企鹅FM播放页面的滑动效果(仅仅是滑动效果)，老规矩看图先:<br><img src="http://upload-images.jianshu.io/upload_images/925576-241a7390d47fb14c.gif?imageMogr2/auto-orient/strip" alt="fm.gif"><br>首先看看主界面的xml布局：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;@color/black&quot;&gt;</div><div class="line"></div><div class="line">   &lt;com.qqfm.jack.qqfmcontentview.util.ObservableScrollView</div><div class="line">       android:id=&quot;@+id/MenuMainScrollView&quot;</div><div class="line">       android:layout_width=&quot;match_parent&quot;</div><div class="line">       android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">       &lt;LinearLayout</div><div class="line">           android:id=&quot;@+id/contentshow&quot;</div><div class="line">           android:layout_width=&quot;match_parent&quot;</div><div class="line">           android:layout_height=&quot;match_parent&quot;</div><div class="line">           android:orientation=&quot;horizontal&quot;/&gt;</div><div class="line">   &lt;/com.qqfm.jack.qqfmcontentview.util.ObservableScrollView&gt;</div><div class="line">        </div><div class="line">    &lt;include</div><div class="line">        android:id=&quot;@+id/contentcontrolview&quot;</div><div class="line">        layout=&quot;@layout/contentcontrol&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_alignParentBottom=&quot;true&quot; /&gt;</div><div class="line">        </div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>在这布局里好包含着一个布局就是contentcontrol.xml文件，由于此文件有点多并且也简单所以就不列出来，详细到时可看源码，contentcontrol.xml的界面效果是<br><img src="http://upload-images.jianshu.io/upload_images/925576-c9a0313833a4e0e0.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="fm2.PNG"><br>这样主体的布局搭建完了。接着我们有一个自定义的类ObservableScrollView.java,而这个类也是很简单的，只是起到了一个接口监听滑动变量的作用，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class ObservableScrollView extends HorizontalScrollView &#123;</div><div class="line"></div><div class="line">    private ScrollViewListener scrollViewListener = null;</div><div class="line"></div><div class="line">    public ObservableScrollView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ObservableScrollView(Context context, AttributeSet attrs,</div><div class="line">                                int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ObservableScrollView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setScrollViewListener(ScrollViewListener scrollViewListener) &#123;</div><div class="line">        this.scrollViewListener = scrollViewListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onScrollChanged(int x, int y, int oldx, int oldy) &#123;</div><div class="line">        super.onScrollChanged(x, y, oldx, oldy);</div><div class="line">        if (scrollViewListener != null) &#123;</div><div class="line">            scrollViewListener.onScrollChanged(this, x, y, oldx, oldy);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如代码所示ObservableScrollView只是继承HorizontalScrollView ，定义接口监听onScrollChanged()方法的各个变量。<br>接下来就是最终要的MainActivity.java里面的代码，这是整个逻辑的核心代码都在这里，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener,ScrollViewListener &#123;</div><div class="line">    private ObservableScrollView mHorizontalScrollView;</div><div class="line">    private LinearLayout Contentshow;</div><div class="line"></div><div class="line">    private RelativeLayout contentcontrolshow=null;</div><div class="line">    private LinearLayout contentcontrolmenu=null;</div><div class="line">    private RelativeLayout contentcontrolbu=null;</div><div class="line">    //屏幕的宽</div><div class="line">    private int width=0;</div><div class="line">    //屏幕的高</div><div class="line">    private int height=0;</div><div class="line">    //信息view</div><div class="line">    private View info;</div><div class="line">    //菜单view</div><div class="line">    private View menu;</div><div class="line">    //控制按钮view</div><div class="line">    private View control;</div><div class="line">    //半个页面的距离</div><div class="line">    private int HalfMenuWidth=0;</div><div class="line">    private int ScrollX;</div><div class="line">    //显示信息百分比</div><div class="line">    private float InfoPercent=0;</div><div class="line">    //菜单百分比</div><div class="line">    private float MenuPercent=0;</div><div class="line">    //底部视图各部分的高度</div><div class="line">    private int ShowHeight;</div><div class="line">    private int MenuHeight;</div><div class="line">    private int ControlHeight;</div><div class="line">    //第一次滑动状态</div><div class="line">    private boolean FirstScoll=true;</div><div class="line">    private boolean InitFirstData=true;</div><div class="line"></div><div class="line">    private Float infoheight=0.0f;</div><div class="line">    private Float menuheight=0.0f;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //真正的View显示时onWindowFocusChanged()函数被执行</div><div class="line">    @Override</div><div class="line">    public void onWindowFocusChanged(boolean hasFocus) &#123;</div><div class="line">        super.onWindowFocusChanged(hasFocus);</div><div class="line">        if(InitFirstData)&#123;</div><div class="line">            width= ScreenUtils.getScreenWidth(this);</div><div class="line">            height=ScreenUtils.getViewHeight(this);</div><div class="line">            initScrollViewPlace();</div><div class="line">            initViewSize();</div><div class="line">            InitFirstData=false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //初始时移动到详细页面</div><div class="line">    public void initScrollViewPlace()&#123;</div><div class="line">        mHorizontalScrollView.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                //滑到显示信息的View</div><div class="line">                mHorizontalScrollView.smoothScrollTo(width,0);</div><div class="line">//              UpdateViewHeight(height/2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //初始化视图</div><div class="line">    public void initView()&#123;</div><div class="line">        try&#123;</div><div class="line">            //初始化HorizontalScrollView</div><div class="line">            mHorizontalScrollView=(ObservableScrollView)findViewById(R.id.MenuMainScrollView);</div><div class="line">            //设置监听</div><div class="line">            mHorizontalScrollView.setOnTouchListener(this);</div><div class="line">            mHorizontalScrollView.setScrollViewListener(this);</div><div class="line">            //初始化底部视图</div><div class="line">            Contentshow=(LinearLayout)findViewById(R.id.contentshow);</div><div class="line">            //初始化contentcontrol的各个部分</div><div class="line">            contentcontrolshow=(RelativeLayout)findViewById(R.id.contentcontrol_show);</div><div class="line">            contentcontrolmenu=(LinearLayout)findViewById(R.id.contentcontrol_menu);</div><div class="line">            contentcontrolbu=(RelativeLayout)findViewById(R.id.controlbutton);</div><div class="line">            //初始化滑动的三个视图</div><div class="line">            info= LayoutInflater.from(this).inflate(R.layout.contentinfo,null);</div><div class="line">            menu= LayoutInflater.from(this).inflate(R.layout.contentmenu, null);</div><div class="line">            control=findViewById(R.id.contentcontrolview);</div><div class="line">        &#125;catch(Exception e)&#123;&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void initViewSize()&#123;</div><div class="line">        //半个页面的距离</div><div class="line">        HalfMenuWidth=width/2;</div><div class="line">        //为info,menu和control赋值</div><div class="line">        LinearLayout.LayoutParams InfoLayoutParams=new LinearLayout.LayoutParams(width,height/2);</div><div class="line">        LinearLayout.LayoutParams MenuLayoutParams=new LinearLayout.LayoutParams(width,height);</div><div class="line">        //显示信息的View是屏幕高度的二分之一</div><div class="line">        info.setLayoutParams(InfoLayoutParams);</div><div class="line">        //显示菜单的View是屏幕的高度</div><div class="line">        menu.setLayoutParams(MenuLayoutParams);</div><div class="line">        //控制按钮的View是屏幕高度的二分之一</div><div class="line">        control.getLayoutParams().height=height/2;</div><div class="line">        //添加View</div><div class="line">        Contentshow.addView(menu);</div><div class="line">        Contentshow.addView(info);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        switch(event.getAction())&#123;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                Log.e(&quot;onScrollChanged&quot;,ScrollX+&quot;&quot;);</div><div class="line">                Log.e(&quot;onScrollChanged2&quot;,width+&quot;&quot;);</div><div class="line">                if(ScrollX&gt;HalfMenuWidth)&#123;</div><div class="line">                    mHorizontalScrollView.smoothScrollTo(width,0);</div><div class="line">                &#125;else&#123;</div><div class="line">                    mHorizontalScrollView.smoothScrollTo(0,0);</div><div class="line">                &#125;</div><div class="line">                return true;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void ChangeHeight(View view,int height)&#123;</div><div class="line">        ViewGroup.LayoutParams layoutParams=view.getLayoutParams();</div><div class="line">        layoutParams.height=height;</div><div class="line">        view.setLayoutParams(layoutParams);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void UpdateViewHeight(int height)&#123;</div><div class="line">        ViewGroup.LayoutParams layoutParams=control.getLayoutParams();</div><div class="line">        layoutParams.height=height;</div><div class="line">        control.setLayoutParams(layoutParams);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onScrollChanged(ObservableScrollView scrollView, int scrollX,</div><div class="line">                                int scrollY,int oldScrollX,int oldScrollY) &#123;</div><div class="line">        this.ScrollX=scrollX;</div><div class="line">        if(FirstScoll)&#123;</div><div class="line">            DecimalFormat df=new DecimalFormat(&quot;0.00&quot;);</div><div class="line">            ShowHeight=contentcontrolshow.getHeight();</div><div class="line">            MenuHeight=contentcontrolmenu.getHeight();</div><div class="line">            ControlHeight=contentcontrolbu.getHeight();</div><div class="line">            // info缩小对应的百分比</div><div class="line">            InfoPercent=Float.valueOf(df.format((float)width/ShowHeight));</div><div class="line">            // menu缩小对应的百分比</div><div class="line">            MenuPercent=Float.valueOf(df.format((float)width/MenuHeight));</div><div class="line">            FirstScoll=false;</div><div class="line">            //按钮保持原来的大小</div><div class="line">            ChangeHeight(contentcontrolbu,ControlHeight);</div><div class="line">            //保持原样</div><div class="line">            ChangeHeight(info,height/2);</div><div class="line">            ChangeHeight(menu,height-ControlHeight);</div><div class="line">        &#125;</div><div class="line">        infoheight=Float.valueOf(scrollX/InfoPercent);</div><div class="line">        menuheight=Float.valueOf(scrollX/MenuPercent);</div><div class="line">        //更新view的高度</div><div class="line">        UpdateViewHeight(infoheight.intValue()+menuheight.intValue()+ControlHeight);</div><div class="line">        //info缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolshow,infoheight.intValue());</div><div class="line">        //menu缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolmenu,menuheight.intValue());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码量还是有点多，不过一步一步来其实也就是几步而已。从OnCreate()开始在setContentView()加载完后，调用initView()方法对变量和子View进行初始化。对mHorizontalScrollView控件进行监听setOnTouchListener和setScrollViewListener，其中是自定义的接口，在监听自定义类ObservableScrollView。contentcontrolshow，contentcontrolmenu，contentcontrolbu分别对应着南海归墟，左中右，和底下五个按钮的View,如上图。info对应着写着contentinfo的View，menu对应着写着contentmenu的View.<br>      接着当Activity显示为可见的时候会回调onWindowFocusChanged()方法。而onWindowFocusChanged()方法里主要的操作是初始化各个子View的大小。有人会问为什么不在onCreate()方法里就初始化子View的大小？因为在onCreate()时此时整个Activity的界面还没有显示，所以等不到屏幕的整个View的大小的参数，所以在onWindowFocusChanged()里，首先把ObservableScrollView包含的info和menu这两个View移到info这个View里。然后动态设置各个子View的大小，核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//显示信息的View是屏幕高度的二分之一</div><div class="line">info.setLayoutParams(InfoLayoutParams);</div><div class="line">//显示菜单的View是屏幕的高度</div><div class="line">menu.setLayoutParams(MenuLayoutParams);</div><div class="line">//控制按钮的View是屏幕高度的二分之一</div><div class="line">control.getLayoutParams().height=height/2;</div></pre></td></tr></table></figure></p>
<p>当我们左右滑动界面是，会回调onScrollChanged()方法。因为Activity初始化完在没滑动的时候会回调onScrollChanged()方法，所以当第一次调用该方法时要计算出写着contentinfo的View和写着contentmenu的View缩小或放大对应的百分比，再设置control里面三个View大小。这样一开始的界面的初始化才能达到效果。<br>最后当滑动的时候我们只需要计算出滑动距离所要改变的大小，<br><code>infoheight=Float.valueOf(scrollX/InfoPercent);
 menuheight=Float.valueOf(scrollX/MenuPercent);</code><br> 再动态的设置各个View的高度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//更新control的高度      </div><div class="line">UpdateViewHeight(infoheight.intValue()+menuheight.intValue()+ControlHeight);</div><div class="line">        //contentcontrolshow缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolshow,infoheight.intValue());</div><div class="line">        //contentcontrolmenu缩小对应的百分比</div><div class="line">        ChangeHeight(contentcontrolmenu,menuheight.intValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 既可以实现滑动改变的效果。      </p>
<p>具体的细节请看<a href="https://github.com/jack921/QQfmContentView" target="_blank" rel="external">源码</a>吧，如果对你有帮助就请给我给星星或喜欢吧</p>
]]></content>
    
    <summary type="html">
    
      这次给各位带来的是通过滑动来动态改变各个View的大小进而达到企鹅FM播放页面的滑动效果(仅仅是滑动效果)
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="Android" scheme="http://jack921.win/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>自定义天气显示温度变化的LinearChart控件</title>
    <link href="http://jack921.win/2016/10/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%A9%E6%B0%94%E6%98%BE%E7%A4%BA%E6%B8%A9%E5%BA%A6%E5%8F%98%E5%8C%96%E7%9A%84LinearChart%E6%8E%A7%E4%BB%B6/"/>
    <id>http://jack921.win/2016/10/04/自定义天气显示温度变化的LinearChart控件/</id>
    <published>2016-10-04T14:15:00.000Z</published>
    <updated>2017-04-29T16:45:20.419Z</updated>
    
    <content type="html"><![CDATA[<p>这次发表的是前几个月搞定的一个自定义控件，那时自己在写一个小的查看天气的软件，在这过程中就涉及了显示天气变化的折线图，一开始想用一些画图框架来解决问题，不过考虑到就只用到LineChart折线图这一个控件就要导一个库有点太浪费了，所以就自己自定义简易版LineChart算了。好了不说闲话老规矩，先发张效果图先：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-4e07bc394473da0d.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img.PNG"><br>这就是这个自定义控件的最终效果，当然颜色你可以自己设置。<br>首先初始化自定义控件的各个变量，以便看得更清楚：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//圆点旁边字体的大小</div><div class="line">private int CircleTextSize;</div><div class="line">//字体颜色</div><div class="line">private int CircleTextColor;</div><div class="line">//高的温度的线的颜色</div><div class="line">private int MinLineColor;</div><div class="line">//低的温度的线的颜色</div><div class="line">private int MaxLineColor;</div><div class="line">//圆点的颜色</div><div class="line"> private int CircleColor;</div><div class="line">//画线的画笔</div><div class="line">private Paint LinePaint;</div><div class="line">//画圆点的画笔</div><div class="line">private Paint CirclePaint;</div><div class="line">//画字的画笔</div><div class="line">private Paint TextPaint;</div><div class="line">//存储Max轴的数据</div><div class="line">private List&lt;Float&gt; YValueMax=new ArrayList&lt;&gt;();</div><div class="line">//存储Min轴的数据</div><div class="line">private List&lt;Float&gt; YValueMin=new ArrayList&lt;&gt;();</div><div class="line">//控件的高度</div><div class="line">private int ChartHeight=0;</div><div class="line">//控件的长度</div><div class="line">private int ChartWidth=0;</div><div class="line">//缓存X轴的数据</div><div class="line">private List&lt;Float&gt; XValueWidth=new ArrayList&lt;&gt;();</div><div class="line">//画出Y轴最大值的数据</div><div class="line">private List&lt;Float&gt; mYAxisMax=new ArrayList&lt;&gt;();</div><div class="line">//画出Y轴最小值的数据</div><div class="line">private List&lt;Float&gt; mYAxisMin=new ArrayList&lt;&gt;();</div><div class="line">//设置透明度</div><div class="line">private int ChartAlpha=0;</div><div class="line">//圆点的半径</div><div class="line">private float mRadius=0;</div><div class="line">//折线的粗细</div><div class="line">private float StrokeWidth=0;</div><div class="line">//文字和上下的边的间隔</div><div class="line">private float marginHeigh=0;</div></pre></td></tr></table></figure>
<p>接着就是初始化各个自定义的变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">public WeatherLineChart(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        //初始化各参数</div><div class="line">        TypedArray typedArray=context.getTheme().obtainStyledAttributes(</div><div class="line">                attrs,R.styleable.WeatherLineChart,defStyleAttr,0);</div><div class="line">        int numCount=typedArray.getIndexCount();</div><div class="line">        for(int i=0;i&lt;numCount;i++)&#123;</div><div class="line">            int attr= typedArray.getIndex(i);</div><div class="line">            switch(attr)&#123;</div><div class="line">                case R.styleable.WeatherLineChart_MaxLineColor:</div><div class="line">                      MaxLineColor=typedArray.getColor(attr, Color.RED);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_MinLineColor:</div><div class="line">                      MinLineColor=typedArray.getColor(attr,Color.BLUE);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_CircleTextColor:</div><div class="line">                      CircleTextColor=typedArray.getColor(attr,Color.GRAY);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_CircleTextSize:</div><div class="line">                      CircleTextSize=typedArray.getDimensionPixelSize(attr,(int)TypedValue.applyDimension(</div><div class="line">                            TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_CircleColor:</div><div class="line">                      CircleColor=typedArray.getColor(attr,Color.BLACK);</div><div class="line">                    break;</div><div class="line">                case R.styleable.WeatherLineChart_ChartAlpha:</div><div class="line">                      ChartAlpha=typedArray.getInt(attr,220);</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        typedArray.recycle();</div><div class="line"></div><div class="line">        float density=getResources().getDisplayMetrics().density;</div><div class="line">        mRadius = 3 * density;</div><div class="line">        StrokeWidth=density*3;</div><div class="line">    marginHeigh=density*10;</div><div class="line"></div><div class="line">        display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();</div><div class="line">        WrapcontentWidth=display.getWidth();</div><div class="line">        WrapcontentHight=display.getHeight();</div><div class="line"></div><div class="line">        //初始化画线的画笔</div><div class="line">        LinePaint=new Paint();</div><div class="line">        LinePaint.setAntiAlias(true);</div><div class="line">        LinePaint.setStyle(Paint.Style.STROKE);</div><div class="line">        LinePaint.setStrokeWidth(StrokeWidth);</div><div class="line">        LinePaint.setAlpha(ChartAlpha);</div><div class="line"></div><div class="line">        //初始化画圆点的画笔</div><div class="line">        CirclePaint=new Paint();</div><div class="line">        CirclePaint.setAntiAlias(true);</div><div class="line">        CirclePaint.setColor(CircleColor);</div><div class="line">        CirclePaint.setAlpha(ChartAlpha);</div><div class="line"></div><div class="line">        //初始化画字的画笔</div><div class="line">        TextPaint=new Paint();</div><div class="line">        TextPaint.setAntiAlias(true);</div><div class="line">        TextPaint.setTextSize(CircleTextSize);</div><div class="line">        TextPaint.setColor(CircleTextColor);</div><div class="line">        TextPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">        TextPaint.setAlpha(ChartAlpha);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这的代码虽然有点多，不过都只是一些初始化的操作而已，所以看起来也不会很复杂。而最重要的代码段当然是绘制View的onDraw()方法。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        ChartHeight=getHeight();</div><div class="line">        ChartWidth=getWidth();</div><div class="line">        if(XValueWidth!=null&amp;&amp;mYAxisMax!=null&amp;&amp;mYAxisMin!=null)&#123;</div><div class="line">            XValueWidth.clear();</div><div class="line">            mYAxisMax.clear();</div><div class="line">            mYAxisMin.clear();</div><div class="line">        &#125;</div><div class="line">        //初始化X轴的值</div><div class="line">        initXValueData();</div><div class="line">        //初始化Y轴的值</div><div class="line">        initYValueData();</div><div class="line">        //画出最大值的线</div><div class="line">        DrawLine(canvas,XValueWidth,mYAxisMax,YValueMax,true);</div><div class="line">        //画出最小值得线</div><div class="line">        DrawLine(canvas,XValueWidth,mYAxisMin,YValueMin,false);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个onDraw()方法最重要的就是底下的四个方法。其中initXValueData()是算出各个点在这个控件的X轴的位置数据，initYValueData()是画出两条线的Y轴的位置数据。剩下的DrawLine()方法就是具体的画出每条折线。接下来，看看initXValueData()方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//初始化X轴的值</div><div class="line">public void initXValueData()&#123;</div><div class="line">     //得到数据的个数</div><div class="line">    int XNum=YValueMax.size();</div><div class="line">    //得到距离最左边的距离</div><div class="line">    float BaseWidth=ChartWidth/(XNum*2);</div><div class="line">    //得到各点之间的间隔</div><div class="line">    float tempWdith=BaseWidth*2;</div><div class="line">    for(int i=0;i&lt;XNum;i++)&#123;</div><div class="line">    //得到各点的具体X轴坐标</div><div class="line">        XValueWidth.add(BaseWidth);</div><div class="line">        BaseWidth+=tempWdith;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法我注释已经很清楚了，就是得到第一个点到最左边的距离(BaseWidth)。而各个点之间的距离是BaseWidth的两倍，进而就可以得到每个点的X轴的坐标数据。然后就是initYValueData(),代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">//初始化Y轴的值</div><div class="line">public void initYValueData()&#123;</div><div class="line">    //获取最大值</div><div class="line">    float tempMax=YValueMax.get(0);</div><div class="line">    //获取最小值</div><div class="line">    float tempMin=YValueMax.get(0);</div><div class="line"></div><div class="line">    //算出最高温度的最大值的最小值</div><div class="line">    for(int i=1;i&lt;YValueMax.size();i++)&#123;</div><div class="line">        if(tempMax&lt;YValueMax.get(i))&#123;</div><div class="line">            tempMax=YValueMax.get(i);</div><div class="line">        &#125;</div><div class="line">        if(tempMin&gt;YValueMax.get(i))&#123;</div><div class="line">            tempMin=YValueMax.get(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //和最高温度的最大值和最小值比较进而得到所有数据的最大值和最小值</div><div class="line">    for(int i=1;i&lt;YValueMin.size();i++)&#123;</div><div class="line">        if(tempMax&lt;YValueMin.get(i))&#123;</div><div class="line">            tempMax=YValueMin.get(i);</div><div class="line">        &#125;</div><div class="line">        if(tempMin&gt;YValueMin.get(i))&#123;</div><div class="line">            tempMin=YValueMin.get(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  //温差</div><div class="line">  float parts=tempMax-tempMin;</div><div class="line">  //y轴一端到控件一端的距离</div><div class="line">  float length = CircleTextSize+mRadius+marginHeigh;</div><div class="line">  //y轴高度</div><div class="line">  float yAxisHeight = ChartHeight-length*2;</div><div class="line"></div><div class="line">    if(parts==0)&#123;</div><div class="line">        //都为零没有温差</div><div class="line">        for(int i=0;i&lt;YValueMax.size();i++)&#123;</div><div class="line">            mYAxisMax.add((float) (ChartHeight/2));</div><div class="line">            mYAxisMin.add((float) (ChartHeight/2));</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        //有温差</div><div class="line">        float partVlaue=yAxisHeight/parts;</div><div class="line">        //最小高度值</div><div class="line">        for(int i=0;i&lt;YValueMax.size();i++)&#123;</div><div class="line">            //具体的Y轴坐标数据</div><div class="line">            mYAxisMax.add(ChartHeight-partVlaue*(YValueMax.get(i)-tempMin)-length);</div><div class="line">            mYAxisMin.add(ChartHeight-partVlaue*(YValueMin.get(i)-tempMin)-length);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初始化Y轴的坐标数据时略显复杂。总的思路就是首先的得到上下两个折线总的数据的最大值和最小值。即tempMax和tampMin分别是总数据的最大值和最小值。最大值和最小值的相减即可得到温差。因为两条折线的上下是有文字显示每个点的，所以实际的Y轴的高度是整个View的高度减去文字大小和原点半径和设置的间隔。即<code>//y轴一端到控件一端的距离
      float length = CircleTextSize+mRadius+marginHeigh;
      //y轴高度
      float yAxisHeight = ChartHeight-length*2;</code>这段代码的意思。当温差(parts)等于0时，即各点温度都是一样的时候，两条折线是显示在整个View的中间的。否则是有温差情况，高度除于温差得到最小的高度值<code>float partVlaue=yAxisHeight/parts;</code>，然后整个View的高度减去每个实际的温度数据减去最小值再乘以最小的高度值的值在减去底下的文字高度等(length),就是这一点具体的Y轴的高度。上下两条的折线的原理都是一样的，为此就可以得到具体的Y轴的位置数值。<br>    其实大部分代码都是在初始化数据，等数据初始化完之后就是画图的阶段了，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//画图</div><div class="line">  public void DrawLine(Canvas canvas,List&lt;Float&gt; XValue,List&lt;Float&gt; mYAxis,List&lt;Float&gt; YValue,boolean top)&#123;</div><div class="line">        for(int i=0;i&lt;XValue.size();i++)&#123;</div><div class="line">            if(top)&#123;</div><div class="line">                //画具体温度数据</div><div class="line">                LinePaint.setColor(MaxLineColor);</div><div class="line">                canvas.drawText(YValue.get(i)+&quot;&quot;,XValue.get(i),mYAxis.get(i)-mRadius,TextPaint);</div><div class="line">            &#125;else&#123;</div><div class="line">                LinePaint.setColor(MinLineColor);</div><div class="line">                //画具体温度数据</div><div class="line">                canvas.drawText(YValue.get(i)+&quot;&quot;,XValue.get(i),mYAxis.get(i)+CircleTextSize+mRadius,TextPaint);</div><div class="line">            &#125;</div><div class="line">            if(i!=XValue.size()-1)&#123;</div><div class="line">                </div><div class="line">                //画每两点之间的连线</div><div class="line">                canvas.drawLine(XValue.get(i),mYAxis.get(i),XValue.get(i+1),mYAxis.get(i+1),LinePaint);</div><div class="line">            &#125;</div><div class="line">            //画每一点的原点</div><div class="line">            canvas.drawCircle(XValue.get(i),mYAxis.get(i),mRadius,CirclePaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中top参数假如是true的话代表的是上面一条折线，false的画代表的是下面的一条折线图。其实只要得到上面的各个点的X,Y轴坐标的数据之后剩下的只是用Canvas进行画线，画点和画文字，具体的看代码注释，注释已经写得很清楚了。 </p>
<p>最后奉上<a href="https://github.com/jack921/WeatherLineChartView" target="_blank" rel="external">源码</a>。</p>
]]></content>
    
    <summary type="html">
    
      这次发表的是前几个月搞定的一个自定义控件，那时自己在写一个小的查看天气的软件，在这过程中就涉及了显示天气变化的折线图，一开始想用一些画图框架来解决问题，不过考虑到就只用到LineChart折线图这一个控件就要导一个库有点太浪费了，所以就自己自定义简易版LineChart算了。
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义控件" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>模仿QQ运动item的界面</title>
    <link href="http://jack921.win/2016/09/25/%E6%A8%A1%E4%BB%BFQQ%E8%BF%90%E5%8A%A8item%E7%9A%84%E7%95%8C%E9%9D%A2/"/>
    <id>http://jack921.win/2016/09/25/模仿QQ运动item的界面/</id>
    <published>2016-09-25T14:42:00.000Z</published>
    <updated>2017-04-29T16:44:07.347Z</updated>
    
    <content type="html"><![CDATA[<p>首先按照老规矩，无图无真相嘛，先看看先：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-2cbef50cefed2c44.gif?imageMogr2/auto-orient/strip" alt="效果图.gif"></p>
<a id="more"></a>
<p>是不是很像呢，那具体是实现是怎样的呢，即使概括的来说就是<br>1.计算各个变量的值(记得是会随整个View的大小变化而变化)。<br>2其次利用好canvas.translate()这个方法，计算好大小移动canvas的原点。<br>3最后就是调用api提供的各种方法画图就是了。这么说是不是太过于简略了呢，好，现在就来</p>
<p>看看那具体的吧。首先看看xml有什么参数吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;com.example.jack.besselcurve.BesselCurveView </div><div class="line">   android:id=&quot;@+id/besselCurveView&quot; </div><div class="line">   android:layout_width=&quot;match_parent&quot; </div><div class="line">   android:layout_height=&quot;match_parent&quot; </div><div class="line">   android:background=&quot;#ffffff&quot; </div><div class="line">   android:layout_centerHorizontal=&quot;true&quot; </div><div class="line">   app:besselColor=&quot;@color/besselColor&quot; </div><div class="line">   app:besselColorText=&quot;@color/besselColorText&quot; </div><div class="line">   app:friendAverageStep=&quot;6752&quot; </div><div class="line">   app:averageStep=&quot;2603&quot; </div><div class="line">   app:champion=&quot;Jack&quot; </div><div class="line">   app:allStep=&quot;8765&quot; </div><div class="line">   app:time=&quot;17:26&quot; </div><div class="line">   app:ranking=&quot;15&quot;&gt;</div><div class="line">&lt;/com.example.jack.besselcurve.BesselCurveView&gt;</div></pre></td></tr></table></figure></p>
<p>各参数对应的解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//时间 </div><div class="line">private String time; </div><div class="line">//所有步数 </div><div class="line">private int allStop; </div><div class="line">//还有平均步数 </div><div class="line">private int friendAverageStep; </div><div class="line">//平均步数 </div><div class="line">private int averageStep; </div><div class="line">//排名 </div><div class="line">private String ranking; </div><div class="line">//头像 </div><div class="line">private Bitmap champion_icon; </div><div class="line">//冠军名字 </div><div class="line">private String champion;</div></pre></td></tr></table></figure></p>
<p>接着代码段初始化所有参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">TypedArray mTypedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BesselCurveView,defStyleAttr,0); </div><div class="line">int numCount=mTypedArray.getIndexCount(); </div><div class="line">for(int i=0;i&lt;numCount;i++)&#123; </div><div class="line">int attr=mTypedArray.getIndex(i); </div><div class="line">switch(attr)&#123; </div><div class="line">     case R.styleable.BesselCurveView_allStep: </div><div class="line">     allStop=mTypedArray.getInt(attr,0); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_averageStep: </div><div class="line">     averageStep=mTypedArray.getInt(attr,0); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_friendAverageStep: </div><div class="line">     friendAverageStep = mTypedArray.getInt(attr,0); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_time: </div><div class="line">     time=mTypedArray.getString(attr); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_ranking: </div><div class="line">     ranking=mTypedArray.getString(attr); </div><div class="line">     break;</div><div class="line">case R.styleable.BesselCurveView_champion: </div><div class="line">     champion=mTypedArray.getString(attr); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_besselColor: </div><div class="line">     mBesselCurveColor=mTypedArray.getColor(attr,Color.BLUE); </div><div class="line">     break; </div><div class="line">case R.styleable.BesselCurveView_besselColorText:</div><div class="line">    besselColorText=mTypedArray.getColor(attr,Color.GRAY); break; </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是每个自定义都有的相当于模板，来初始化参数，都看的明白吧。接下来也很简单，就是初始化画笔等变量，以便于后面看画图更简单：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public void initValue()&#123; </div><div class="line">animSet=new AnimatorSet(); </div><div class="line">//外圆的画笔 </div><div class="line">mCirclePaint=new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">mCirclePaint.setStyle(Paint.Style.STROKE); </div><div class="line">mCirclePaint.setStrokeWidth(radius/10); </div><div class="line">mCirclePaint.setStrokeJoin(Paint.Join.ROUND);</div><div class="line">mCirclePaint.setStrokeCap(Paint.Cap.ROUND); </div><div class="line">mCirclePaint.setAntiAlias(true); </div><div class="line">//中间的文字的画笔 </div><div class="line">mCenterTextPaint=new Paint(); </div><div class="line">mCenterTextPaint.setColor(mBesselCurveColor); </div><div class="line">mCenterTextPaint.setTextSize(radius/5); </div><div class="line">mCenterTextPaint.setAntiAlias(true); </div><div class="line">//除中间之外的文字的画笔 </div><div class="line">mTextPaint=new Paint(); </div><div class="line">mTextPaint.setAntiAlias(true); </div><div class="line">//最低下的矩形 </div><div class="line">mBottomRectPaint=new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">mBottomRectPaint.setColor(mBesselCurveColor); </div><div class="line">mBottomRectPaint.setAntiAlias(true); </div><div class="line">//虚线的画笔 </div><div class="line">mDottedLinePaint = new Paint(); </div><div class="line">mDottedLinePaint.setAntiAlias(true); </div><div class="line">mDottedLinePaint.setStyle(Paint.Style.STROKE); </div><div class="line">mDottedLinePaint.setStrokeWidth(2); mDottedLinePaint.setColor(mBesselCurveColor); mDottedLinePaint.setPathEffect(new DashPathEffect(new float[]&#123;5,5&#125;,1)); //画波浪线画笔 WavylinesPaint=new Paint(); WavylinesPaint = new Paint(Paint.ANTI_ALIAS_FLAG); WavylinesPaint.setColor(wavyColor); WavylinesPaint.setStyle(Paint.Style.FILL_AND_STROKE); //虚线的画线 mDottedLinePath=new Path(); </div><div class="line">//画波浪线画线 </div><div class="line">WavyLinePath=new Path(); </div><div class="line">//底下更多的画线 </div><div class="line">morePath=new Path(); </div><div class="line">mWaveCount = (int) Math.round(widthView / mWaveLength + 1.5);</div><div class="line">marginBottomText=radius/4; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，最重要的初始化都差不多了，现在就来画图(画画)吧先贴出所有画的代码然后再逐一讲解吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123; </div><div class="line">super.onDraw(canvas); </div><div class="line">canvas.save(); </div><div class="line">canvas.translate(widthView/2,(heightView*((float)2/3))/2); </div><div class="line">//画内圆圈 </div><div class="line">   mCirclePaint.setColor(besselColorText); </div><div class="line">   RectF mCircleRectF=new RectF(-radius,-radius,radius,radius); </div><div class="line">   canvas.drawArc(mCircleRectF,120,300,false,mCirclePaint); </div><div class="line">//画外圆圈 </div><div class="line">   mCirclePaint.setColor(mBesselCurveColor); </div><div class="line">   canvas.drawArc(mCircleRectF,120,mCircleNum,false,mCirclePaint); </div><div class="line">//画中间的文字</div><div class="line">   Rect mCenterRect=new Rect(); String tempAllStop=mCenterNum+&quot;&quot;; </div><div class="line">   mCenterTextPaint.getTextBounds(tempAllStop,0,tempAllStop.length(),mCenterRect);</div><div class="line">   int halfWidthText=(mCenterRect.right-mCenterRect.left)/2; </div><div class="line">   int halfHeightText=(mCenterRect.bottom-mCenterRect.top)/2; </div><div class="line">   canvas.drawText(tempAllStop,-halfWidthText,halfHeightText,mCenterTextPaint); </div><div class="line">//画上边的文字 </div><div class="line">  mTextPaint.setColor(besselColorText); mTextPaint.setTextSize(radius/6); </div><div class="line">  String tempFriendAverageStep=stringTemplate(R.string.besselTime,time); </div><div class="line">  Rect mTopRect=new Rect();     mTextPaint.getTextBounds(tempFriendAverageStep,0,tempFriendAverageStep.length(),mTopRect); </div><div class="line">  int halfTopWidthText=(mTopRect.right-mTopRect.left)/2;    </div><div class="line">  canvas.drawText(tempFriendAverageStep,-halfTopWidthText,-(halfHeightText+marginText),mTextPaint); </div><div class="line">//画下边的文字 String     </div><div class="line">  tempAverageStep=stringTemplate(R.string.friendAverageStep,friendAverageStep+&quot;&quot;);   </div><div class="line">  Rect mBottomRect=new Rect(); </div><div class="line"> mTextPaint.getTextBounds(tempAverageStep,0,tempAverageStep.length(),mBottomRect);</div><div class="line">  int halfBottomWidthText=(mBottomRect.right-mBottomRect.left)/2; </div><div class="line">  int mBottomHeightText=(mBottomRect.bottom-mBottomRect.top);</div><div class="line">  canvas.drawText(tempAverageStep,-  halfBottomWidthText,mBottomHeightText+halfHeightText+marginText,mTextPaint); </div><div class="line">//画排名 Rect mNumRect=new Rect(); </div><div class="line">  mCenterTextPaint.getTextBounds(ranking,0,ranking.length(),mNumRect); </div><div class="line">  int halfNum=(mNumRect.right-mNumRect.left)/2; </div><div class="line">  mCenterTextPaint.setTextSize(40); canvas.drawText(ranking,-  halfNum,radius,mCenterTextPaint); </div><div class="line">  String rankingLeft=getContext().getResources().getString(R.string.ranking_left); </div><div class="line">  mTextPaint.getTextBounds(rankingLeft,0,rankingLeft.length(),mNumRect);</div><div class="line">  canvas.drawText(rankingLeft,-halfNum-(mNumRect.right-  mNumRect.left)/2-20,radius,mTextPaint);   </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.ranking_right),halfNum+10,radius,mTextPaint); </div><div class="line">canvas.restore(); </div><div class="line">//画最近七天和平均运动 </div><div class="line">  mTextPaint.setTextSize(radius/9); canvas.save(); canvas.translate(0,heightView*((float)2/3));   </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.nextSevenDay),marginLi neChart,0,mTextPaint); </div><div class="line">  Rect mPercentRect=new Rect(); </div><div class="line">  String mPercentText=stringTemplate(R.string.averageStep,averageStep+&quot;&quot;); </div><div class="line">  mTextPaint.getTextBounds(mPercentText,0,mPercentText.length(),mPercentRect);</div><div class="line">  canvas.drawText(mPercentText,widthView-marginLineChart-(mPercentRect.right-  mPercentRect.left),0,mTextPaint); </div><div class="line">//画虚线 </div><div class="line">  mDottedLinePath.moveTo(marginLineChart,marginBottomText); </div><div class="line">  mDottedLinePath.lineTo(widthView-marginLineChart,marginBottomText); </div><div class="line">  canvas.drawPath(mDottedLinePath,mDottedLinePaint); </div><div class="line">//画7天数据柱状图 mTextPaint.setTextSize(radius/9);</div><div class="line">   int lineWidth=(widthView-marginLineChart*2)/8; </div><div class="line">  mCalendar.setTime(new Date()); </div><div class="line">  RectF mRecf=null; </div><div class="line">  if(mListStep.size()&gt;0)&#123; </div><div class="line">  for(int i=mListStep.size();i&gt;=1;i--)&#123; </div><div class="line">  if(mListStep.get(i-1)!=0)&#123; </div><div class="line">  int startX=marginLineChart+lineWidth*i-radius/23; </div><div class="line">  int endX=marginLineChart+lineWidth*i+radius/23; </div><div class="line">  if(mListStep.get(i-1)&gt;mStandardStop)&#123; </div><div class="line">//达标 mTextPaint.setColor(mBesselCurveColor); </div><div class="line">  int exceed=mListStep.get(i-1)-mStandardStop; </div><div class="line">  float standard=(float)</div><div class="line">  (mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop))); </div><div class="line">  mRecf=new RectF(startX,marginBottomText-(standard&gt;mCircleRectHeight?mCircleRectHeight:standard) ,endX,marginBottomText+mCircleRectHeight);</div><div class="line">  canvas.drawRoundRect(mRecf,50,50,mTextPaint); </div><div class="line">&#125;else&#123; </div><div class="line">//不达标</div><div class="line">  mTextPaint.setColor(besselColorText); </div><div class="line">  float noStandard=(float)(mCircleRectHeight*Double.valueOf(mListStep.get(i-1)/Double.valueOf(mStandardStop))); </div><div class="line">  mRecf=new RectF(startX,marginBottomText,endX,marginBottomText+(   noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard)); </div><div class="line">  canvas.drawRoundRect(mRecf,50,50,mTextPaint);</div><div class="line"> &#125;</div><div class="line"> &#125; </div><div class="line">//画底下的日期 </div><div class="line">  mTextPaint.setColor(besselColorText); </div><div class="line">mCalendar.set(Calendar.DAY_OF_MONTH,mCalendar.get(Calendar.DAY_OF_MONTH)-1); </div><div class="line">  Rect rect =new Rect();</div><div class="line">  String number=stringTemplate(R.string.day,mCalendar.get(Calendar.DAY_OF_MONTH)+&quot;&quot;);</div><div class="line">   mTextPaint.getTextBounds(number,0,number.length(),rect); </div><div class="line">   canvas.drawText(number,(marginLineChart+lineWidth*i)-(rect.right-rect.left)/2,marginBottomText+70,mTextPaint); </div><div class="line">&#125; </div><div class="line">&#125; </div><div class="line">  canvas.restore();</div><div class="line"> //画波浪图形 </div><div class="line">  canvas.save(); </div><div class="line">  float mWavyHeight=heightView*((float)4/5)+50; </div><div class="line">  canvas.translate(0,mWavyHeight); </div><div class="line">  WavyLinePath.reset(); </div><div class="line">  WavyLinePath.moveTo(-mWaveLength+ mOffset,0); </div><div class="line">  int wHeight=radius/5; </div><div class="line">  for(int i=0;i&lt;mWaveCount;i++)&#123; </div><div class="line">    WavyLinePath.quadTo((-mWaveLength*3/4)+(i*mWaveLength)+mOffset,wHeight,(-mWaveLength/2)+(i*mWaveLength)+mOffset,0); </div><div class="line">    WavyLinePath.quadTo((-mWaveLength/4)+(i * mWaveLength)+mOffset,- wHeight,i*mWaveLength+mOffset,0); </div><div class="line">&#125; </div><div class="line">  WavyLinePath.lineTo(widthView,heightView-mWavyHeight); </div><div class="line">  WavyLinePath.lineTo(0,heightView-mWavyHeight);</div><div class="line">  WavyLinePath.close();</div><div class="line">  canvas.drawPath(WavyLinePath,WavylinesPaint); </div><div class="line">  canvas.restore(); </div><div class="line">//画最低的信息 </div><div class="line">  float removeHeight=mWavyHeight+(radius/5); </div><div class="line">  canvas.translate(0,removeHeight); </div><div class="line">  float rectHeight=heightView-removeHeight; </div><div class="line">//画底下的矩形 </div><div class="line">  RectF rect = new RectF(0,0,widthView,rectHeight); </div><div class="line">  canvas.drawRect(rect,mBottomRectPaint); </div><div class="line">//画头像 </div><div class="line">  int bitmap_icon_x=radius/5;</div><div class="line">  float centerHeight=rectHeight/2; </div><div class="line">  Bitmap bitmap_icon=getRoundCornerImage(champion_icon,50,radius/5,radius/5); </div><div class="line">  canvas.drawBitmap(bitmap_icon,bitmap_icon_x,centerHeight-  bitmap_icon.getHeight()/2,null);</div><div class="line">  mTextPaint.setColor(Color.WHITE); mTextPaint.setTextSize(radius/8);</div><div class="line"> //画冠军文字 </div><div class="line">  int champion_x=radius/2; Rect mNameRect=new Rect(); </div><div class="line">  String championMame=stringTemplate(R.string.champion,champion); </div><div class="line">  mTextPaint.getTextBounds(championMame,0,championMame.length(),mNameRect); </div><div class="line">  canvas.drawText(championMame,champion_x,(rectHeight+(mNameRect.bottom-mNameRect.top))/2,mTextPaint); </div><div class="line">//画查看 </div><div class="line">  String look=getContext().getResources().getString(R.string.check); </div><div class="line">  mTextPaint.getTextBounds(look,0,look.length(),mNameRect); </div><div class="line">  canvas.drawText(look,widthView-(radius*(float)2/3),(rectHeight+(mNameRect.bottom-mNameRect.top))/2,mTextPaint);</div><div class="line"> //画更多图像 </div><div class="line">  float morePoint=(radius*(float)2/3)/2; </div><div class="line">  canvas.drawLine(widthView-morePoint,centerHeight-(mNameRect.bottom-  mNameRect.top)/2, widthView-morePoint+15,centerHeight,mTextPaint);</div><div class="line">  canvas.drawLine(widthView-morePoint+15,centerHeight,widthView-morePoint,    centerHeight+(mNameRect.bottom-mNameRect.top)/2,mTextPaint);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>代码是不是有点多呢，没办法画的东西本身就有点多了。好了刚开始我说要移动canvas的原点是不是,你看刚开始就移动了吧：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">super.onDraw(canvas);</div><div class="line">canvas.save();</div><div class="line">canvas.translate(widthView/2,(heightView*((float)2/3))/2);</div></pre></td></tr></table></figure>
<p>1、移动原点到整个圆弧的中心，其中widthView是整个view的宽，heightView是整个view的高,如下图:<br><img src="http://upload-images.jianshu.io/upload_images/925576-581675ed6dc8269f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="center.PNG"></p>
<p>就在上图的蓝色点就是现在的原点。<br>然后在这原点里画圆弧呗，代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> //画内圆圈 </div><div class="line">mCirclePaint.setColor(besselColorText); </div><div class="line">RectF mCircleRectF=new RectF(-radius,-radius,radius,radius); </div><div class="line">canvas.drawArc(mCircleRectF,120,300,false,mCirclePaint);</div><div class="line"> //画外圆圈 </div><div class="line">mCirclePaint.setColor(mBesselCurveColor); </div><div class="line">canvas.drawArc(mCircleRectF,120,mCircleNum,false,mCirclePaint);</div></pre></td></tr></table></figure></p>
<p>mCircleNum是为了实现动画效果的，这后面会讲，这样圆弧就画完了。效果也是如上图。<br>2.在中心点再画今天的走的总路程，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> //画中间的文字 </div><div class="line">Rect mCenterRect=new Rect(); </div><div class="line">String tempAllStop=mCenterNum+&quot;&quot;; </div><div class="line">mCenterTextPaint.getTextBounds(tempAllStop,0,tempAllStop.length(),mCenterRect);</div><div class="line">int halfWidthText=(mCenterRect.right-mCenterRect.left)/2; </div><div class="line">int halfHeightText=(mCenterRect.bottom-mCenterRect.top)/2; </div><div class="line">canvas.drawText(tempAllStop,-halfWidthText,halfHeightText,mCenterTextPaint);</div></pre></td></tr></table></figure></p>
<p>基本的实现思路是用Rect在这个类计算出你要画文字的大小，然后在原点画，不过，记得这里的x,y点是在原点的左下，具体详解看<a href="http://www.jianshu.com/p/606ec69fb517" target="_blank" rel="external">这里写链接内容</a><br>接这就是画时间和好友平均步数，其实实现原理也是一样的，只不过在上面的高度是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(tempFriendAverageStep,-halfTopWidthText,-(halfHeightText+marginText),mTextPaint);</div></pre></td></tr></table></figure></p>
<p>是中心总步数高度的一半再加间隔，而下面的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(tempAverageStep,-halfBottomWidthText,mBottomHeightText+halfHeightText+marginText,mTextPaint);</div></pre></td></tr></table></figure></p>
<p>是下面文字总的高度再加上中心总步数高度的一半再加间隔。现在效果如下图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-ee3b9a808c966c4a.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img1.PNG"></p>
<p>接着就是画排名，首先还是套路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Rect mNumRect=new Rect(); </div><div class="line">mCenterTextPaint.getTextBounds(ranking,0,ranking.length(),mNumRect); </div><div class="line">int halfNum=(mNumRect.right-mNumRect.left)/2; </div><div class="line">mCenterTextPaint.setTextSize(40); </div><div class="line">canvas.drawText(ranking,-halfNum,radius,mCenterTextPaint);</div></pre></td></tr></table></figure></p>
<p>计算出排名文字的大小，然后在中心原点x轴为排名文字的一半，y轴问为半径画出排名，效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-0048bd3e09c9eddf.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img2.PNG"></p>
<p>接着就在排名的两端画文字就行了，带代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String rankingLeft=getContext().getResources().getString(R.string.ranking_left); </div><div class="line">mTextPaint.getTextBounds(rankingLeft,0,rankingLeft.length(),mNumRect); </div><div class="line">canvas.drawText(rankingLeft,-halfNum-(mNumRect.right-mNumRect.left)/2-20,radius,mTextPaint); </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.ranking_right),halfNum+10,radius,mTextPaint);</div></pre></td></tr></table></figure></p>
<p>思路还是一样，就不说了。此时效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-b1c508945bc405a9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img3.PNG"></p>
<p>画底下柱状图是，首先用canvas.restore();恢复原点到(0,0)的状态，再用canvas.translate(0,heightView*((float)2/3));把原点移动到圆弧的下面，接着又可以继续画,实现思路和前面一样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//画最近七天和平均运动 </div><div class="line">mTextPaint.setTextSize(radius/9); </div><div class="line">canvas.save(); canvas.translate(0,heightView*((float)2/3)); </div><div class="line">canvas.drawText(getContext().getResources().getString(R.string.nextSevenDay),marginLineChart,0,mTextPaint); </div><div class="line">Rect mPercentRect=new Rect();</div><div class="line"> String mPercentText=stringTemplate(R.string.averageStep,averageStep+&quot;&quot;); </div><div class="line">mTextPaint.getTextBounds(mPercentText,0,mPercentText.length(),mPercentRect); </div><div class="line">canvas.drawText(mPercentText,widthView-marginLineChart-(mPercentRect.right-mPercentRect.left),0,mTextPaint); </div><div class="line">//画虚线</div><div class="line"> mDottedLinePath.moveTo(marginLineChart,marginBottomText); </div><div class="line">mDottedLinePath.lineTo(widthView-marginLineChart,marginBottomText); </div><div class="line">canvas.drawPath(mDottedLinePath,mDottedLinePaint);</div></pre></td></tr></table></figure>
<p>此时效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-29ecb4e0d5ad9f08.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img4.PNG"><br>接下来画柱状图，首先<code>int lineWidth=(widthView-marginLineChart*2)/8;</code>计算出每个点之间的间隔</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-7252e4b4cc66a249.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img5.PNG"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">if(mListStep.size()&gt;0)&#123; </div><div class="line">  for(int i=mListStep.size();i&gt;=1;i--)&#123; </div><div class="line">    if(mListStep.get(i-1)!=0)&#123; </div><div class="line">    //计算出起始点X和终点X的值 </div><div class="line">     int startX=marginLineChart+lineWidth*i-radius/23; </div><div class="line">     int endX=marginLineChart+lineWidth*i+radius/23; </div><div class="line">    if(mListStep.get(i-1)&gt;mStandardStop)&#123; </div><div class="line">   //达标 mTextPaint.setColor(mBesselCurveColor); </div><div class="line">   //超出的部分  </div><div class="line">     int exceed=mListStep.get(i-1)-mStandardStop;</div><div class="line">  //算出柱体大小 float standard=(float)   (mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop))); </div><div class="line">    mRecf=new RectF(startX,marginBottomText-(standard&gt;mCircleRectHeight?mCircleRectHeight:standard) ,endX,marginBottomText+mCircleRectHeight); </div><div class="line">   canvas.drawRoundRect(mRecf,50,50,mTextPaint); </div><div class="line">&#125;else&#123; </div><div class="line">  //不达标 </div><div class="line">   mTextPaint.setColor(besselColorText); </div><div class="line"> //算出不达标柱体的大小 </div><div class="line">  float noStandard=(float)(mCircleRectHeight*Double.valueOf(mListStep.get(i-1)/Double.valueOf(mStandardStop))); </div><div class="line">   mRecf=new RectF(startX,marginBottomText,endX,marginBottomText+(   noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard)); </div><div class="line">   canvas.drawRoundRect(mRecf,50,50,mTextPaint); </div><div class="line">&#125;</div><div class="line">&#125; </div><div class="line"> //画底下的日期 </div><div class="line">   mTextPaint.setColor(besselColorText); </div><div class="line">mCalendar.set(Calendar.DAY_OF_MONTH,mCalendar.get(Calendar.DAY_OF_MONTH)-1); </div><div class="line">   Rect rect =new Rect(); </div><div class="line">   String number=stringTemplate(R.string.day,mCalendar.get(Calendar.DAY_OF_MONTH)+&quot;&quot;);</div><div class="line">   mTextPaint.getTextBounds(number,0,number.length(),rect); </div><div class="line">   canvas.drawText(number,(marginLineChart+lineWidth*i)-(rect.right-rect.left)/2,marginBottomText+70,mTextPaint); </div><div class="line">&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mStandardStop是达标的数据，当数据小于mStandardStop就是不达标，所以柱状图就要画在虚线的下面，mCircleRectHeight是柱状图一半的高<br><code>float standard=(float)(mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop)));</code>这句代码是计算出下面圆柱体的具体大小，<code>noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard</code>当，但柱状图大于mCircleRectHeight时就用mCircleRectHeight不然就根据计算的数值来。当数据大于mStandardStop时，<br><code>int exceed=mListStep.get(i-1)-mStandardStop;float standard=(float)(mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop)));</code>exceed是计算出超出的部分，再拿超出的部分算出具体的大小，剩下的和小于的一样，当standard大于最大的mCircleRectHeight是就用mCircleRectHeight否则就用standard。底下日期是用Calendar得到前7天的日期再循环的画上去，思路和上面一样不再赘述。此时效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a8549eda3d697386.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img6.PNG"></p>
<p>接下来是画波浪，画波浪是用了贝塞尔曲线的方法画的，如果不懂贝塞尔曲线请参考<a href="http://gold.xitu.io/post/57adbd9c79bc440058c9962d" target="_blank" rel="external">这里写链接内容</a>，这也是我学贝塞尔曲线参考的内容。首先我们又把canvas恢复到原点<code>canvas.restore();</code>再用<code>float mWavyHeight=heightView*((float)4/5)+50; canvas.translate(0,mWavyHeight);</code>移动这个位置，是为了适配。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">WavyLinePath.reset(); </div><div class="line">WavyLinePath.moveTo(-mWaveLength+ mOffset,0); </div><div class="line">int wHeight=radius/5; for(int i=0;i&lt;mWaveCount;i++)&#123; </div><div class="line">WavyLinePath.quadTo((-mWaveLength*3/4)+(i*mWaveLength)+mOffset,wHeight,(-mWaveLength/2)+(i*mWaveLength)+mOffset,0); </div><div class="line">WavyLinePath.quadTo((-mWaveLength/4)+(i * mWaveLength)+mOffset,-wHeight,i*mWaveLength+mOffset,0); </div><div class="line">&#125; </div><div class="line">WavyLinePath.lineTo(widthView,heightView-mWavyHeight); </div><div class="line">WavyLinePath.lineTo(0,heightView-mWavyHeight); </div><div class="line">WavyLinePath.close(); </div><div class="line">canvas.drawPath(WavyLinePath,WavylinesPaint);</div></pre></td></tr></table></figure>
<p>WavyLinePath.quadTo就是贝塞尔曲线调的方法，for循环几次使之形成波浪图形，记得一样要WavyLinePath.lineTo().不让会出现底下有些地方会画不到。原理是向上定一个控制点有向下定一个控制点使之形成一个sin函数图形。具体请学贝塞尔曲线。此时效果图:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-80458918daebe178.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="img7.PNG"></p>
<p>最后就是画底下的矩形和头像和文字了。最值得讲的是头像我一开始的设想的传Url的，不过这样子又要做网络方面的代码工作，这样子会破怀类的功能单一性原则，所以最后我实在外部传一个位图，在位图进行处理使其圆角。剩下的只是画文字而已，上面已经讲够多了，就不在讲了。<br>对了，最后还有一个刚开始的动画效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public void startAnimator()&#123; </div><div class="line">     ValueAnimator mCircleAminator=ValueAnimator.ofFloat(0f,300f); </div><div class="line">     mCircleAminator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">     mCircleNum=(float)animation.getAnimatedValue(); postInvalidate();</div><div class="line"> &#125; </div><div class="line">&#125;); </div><div class="line">   ValueAnimator mCenterText=ValueAnimator.ofInt(0,allStop); </div><div class="line">mCenterText.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">mCenterNum=(int)animation.getAnimatedValue(); postInvalidate(); </div><div class="line">&#125; &#125;); </div><div class="line">ValueAnimator mWavyAnimator = ValueAnimator.ofInt(0, mWaveLength); </div><div class="line">mWavyAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; </div><div class="line">mOffset = (int) animation.getAnimatedValue(); postInvalidate(); </div><div class="line">&#125; &#125;); </div><div class="line">animSet.setDuration(2000); </div><div class="line">animSet.playTogether(mCircleAminator,mCenterText,mWavyAnimator); </div><div class="line">animSet.start(); </div><div class="line">&#125;</div><div class="line"> //字符串拼接 </div><div class="line">public String stringTemplate(int template,String content)&#123; </div><div class="line">return String.format(getContext().getResources().getString(template),content);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>其实也简单通过设置ValueAnimator让它在规定的时间内产生数值的变化，再调用postInvalidate().对View的界面进行刷新即可实现动画效果。</p>
<p>最后给源码好好研究吧<a href="https://github.com/jack921/BesselCurve" target="_blank" rel="external">源码</a>只有好好看源码才能学到更多东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先按照老规矩，无图无真相嘛，先看看先：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/925576-2cbef50cefed2c44.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;效果图.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
  </entry>
  
  <entry>
    <title>高仿支付宝9.9.2版本生活模块界面来讲解CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout</title>
    <link href="http://jack921.win/2016/09/16/%E9%AB%98%E4%BB%BF%E6%94%AF%E4%BB%98%E5%AE%9D9-9-2%E7%89%88%E6%9C%AC%E7%94%9F%E6%B4%BB%E6%A8%A1%E5%9D%97%E7%95%8C%E9%9D%A2%E6%9D%A5%E8%AE%B2%E8%A7%A3CoordinatorLayout%EF%BC%8CAppBarLayout%EF%BC%8CCollapsingToolbarLayout/"/>
    <id>http://jack921.win/2016/09/16/高仿支付宝9-9-2版本生活模块界面来讲解CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout/</id>
    <published>2016-09-16T15:52:00.000Z</published>
    <updated>2017-04-29T16:43:07.300Z</updated>
    
    <content type="html"><![CDATA[<p>首先先看看仿制的效果先，如下图：<br><img src="http://upload-images.jianshu.io/upload_images/925576-df6ab23f4846afeb.gif?imageMogr2/auto-orient/strip" alt="fangzhifubao.gif"><br>是不是很像支付宝的效果呢，我们今天就要通过讲解android5.0新出的控件CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout来实现这个效果。</p>
<p>在讲解之前先看看界面布局文件，在一个一个讲讲怎么实现吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.CoordinatorLayout </div><div class="line">  xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; </div><div class="line">  xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; </div><div class="line">  xmlns:tools=&quot;http://schemas.android.com/tools&quot; </div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;match_parent&quot; </div><div class="line">  android:fitsSystemWindows=&quot;true&quot; </div><div class="line">tools:context=&quot;com.example.jack.coordinatorlayouttest.ScrollingActivity&quot;&gt; </div><div class="line">&lt;android.support.design.widget.AppBarLayout </div><div class="line">  android:id=&quot;@+id/app_bar&quot;</div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;wrap_content&quot; </div><div class="line">  android:fitsSystemWindows=&quot;true&quot; </div><div class="line">  android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&gt; &lt;android.support.design.widget.CollapsingToolbarLayout </div><div class="line">  android:id=&quot;@+id/toolbar_layout&quot; </div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;match_parent&quot; </div><div class="line">  android:fitsSystemWindows=&quot;true&quot; </div><div class="line">  app:contentScrim=&quot;@color/color1984D1&quot; </div><div class="line">  app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed|snap&quot; app:title=&quot; &quot;&gt; </div><div class="line">&lt;include layout=&quot;@layout/shenghuo_head1&quot; </div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;wrap_content&quot; </div><div class="line">  android:layout_marginTop=&quot;100dp&quot; </div><div class="line">  android:layout_marginBottom=&quot;25dp&quot; </div><div class="line">  app:layout_collapseMode=&quot;parallax&quot; </div><div class="line">  app:layout_collapseParallaxMultiplier=&quot;0.8&quot;/&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; </div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;?attr/actionBarSize&quot; </div><div class="line">  app:contentInsetLeft=&quot;0dp&quot; app:contentInsetStart=&quot;0dp&quot; </div><div class="line">  app:layout_collapseMode=&quot;pin&quot;&gt;</div><div class="line"> &lt;include android:id=&quot;@+id/toolbar1&quot; </div><div class="line">  layout=&quot;@layout/toolbar_head1&quot; </div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;match_parent&quot; /&gt; </div><div class="line">&lt;include android:id=&quot;@+id/toolbar2&quot; </div><div class="line">  layout=&quot;@layout/toolbar_head2&quot; </div><div class="line">  android:layout_width=&quot;match_parent&quot; </div><div class="line">  android:layout_height=&quot;match_parent&quot; android:visibility=&quot;gone&quot;/&gt; </div><div class="line">&lt;/android.support.v7.widget.Toolbar&gt; </div><div class="line">&lt;/android.support.design.widget.CollapsingToolbarLayout&gt;  </div><div class="line">&lt;/android.support.design.widget.AppBarLayout&gt;  &lt;include </div><div class="line">layout=&quot;@layout/content_scrolling&quot; /&gt;</div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div><div class="line">```  </div><div class="line">1.CoordinatorLayout</div><div class="line">-------------------</div><div class="line"></div><div class="line">这就是整个高仿支付宝界面的核心布局界面的，看看代码量也不多吧，只要就是用了</div><div class="line">CoordinatorLayout，AppBarLayout，CollapsingToolbarLayou，Toolbar这四个控件吧。</div><div class="line">在各个布局文件里，最外围的是CoordinatorLayout这个控件，这个有什么作用呢，就我的大白话来说就是协调子View之间动作的一个父View,通过Behavior来给子view实现交互的。这样好像还是有点说不通，没关系同学们通过看上面的布局文件，可以发现</div><div class="line"></div><div class="line">![img1.PNG](http://upload-images.jianshu.io/upload_images/925576-c0d4b0b05a2d78c4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line">这一个内容界面是的布局是`&lt;include layout=&quot;@layout/content_scrolling&quot; /&gt;`这一句的内容是：</div></pre></td></tr></table></figure></p>
<p>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<p><linearlayout xmlns:android="http://schemas.android.com/apk/res/android" xmlns:app="http://schemas.android.com/apk/res-auto" xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical" tools:showin="@layout/activity_scrolling" app:layout_behavior="@string/appbar_scrolling_view_behavior"><br> <android.support.v7.widget.recyclerview android:id="@+id/myRecyclerView" android:layout_width="match_parent" android:layout_height="match_parent"><br> </android.support.v7.widget.recyclerview><br></linearlayout><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">没错就是一个linearLayout包裹着RecyclerView组成他的内容界面，在这代码里有这一句`app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;`就是这句和CoordinatorLayout控件互动实现滑动，总结就是CoordinatorLayout控件和app:layout_behavior来进行互动，进而CoordinatorLayout的子控件和app:layout_behavior互动。当然`@string/appbar_scrolling_view_behavior`是系统自带的，本质是一个类，我们也可以自定义这个类实现其他效果，不过这不是我们这一章所讲的了，我们点到即止。</div><div class="line"></div><div class="line">2.AppBarLayout</div><div class="line">--------------</div><div class="line"></div><div class="line">其次就是AppBarLayout，去除官方解释，简单来说就是它可以让你定制当某个可滚动View的滚动手势发生变化时，其内部的子View实现何种动作。内部的子View通过在布局中加`app:layout_scrollFlags`设置执行的动作。而layout_srcollFlags的动作主要如下：</div><div class="line"> 1. scroll:值设为scroll的View会跟随滚动事件一起发生移动。 </div><div class="line">2. enterAlways:值设为enterAlways的View,当ScrollView往下滚动时，该View会直接往下滚动。而不用考虑ScrollView是否在滚动。 </div><div class="line">3. exitUntilCollapsed：值设为exitUntilCollapsed的View，当这个View要往上逐渐“消逝”时，会一直往上滑动，直到剩下的的高度达到它的最小高度后，再响应ScrollView的内部滑动事件。 </div><div class="line">4. enterAlwaysCollapsed：是enterAlways的附加选项，一般跟enterAlways一起使用，它是指，View在往下“出现”的时候，首先是enterAlways效果，当View的高度达到最小高度时，View就暂时不去往下滚动，直到ScrollView滑动到顶部不再滑动时，View再继续往下滑动，直到滑到View的顶部结束。</div><div class="line"></div><div class="line">这是layout_srcollFlags里可以设置的各个属性的解释，考虑文章的重点是模仿支付宝所以没有篇幅和每个属性都给个效果图，所以各属性你们有空还要自己试一试，这样子才能掌握更好。我们这里AppBarLayout关联的是CollapsingToolbarLayout，设置的属性是`app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed|snap&quot;`里面的scroll让</div><div class="line">![img2.PNG](http://upload-images.jianshu.io/upload_images/925576-6e3b6f5ce24552c7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line">这可以滑动，而exitUntilCollapsed实现的效果是</div><div class="line">![img4.PNG](http://upload-images.jianshu.io/upload_images/925576-0a588d76add2a59f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这一块当滑动到最顶的时候不会跟这个继续滑到最顶，而保留这一块。最后snap这是属性是子View不会存在局部显示的情况，滚动Child View的部分高度，当我们松开手指时，Child View要么向上全部滚出屏幕，要么向下全部滚进屏幕。</div><div class="line"></div><div class="line">3.CollapsingToolbarLayout</div><div class="line">-------------------------</div><div class="line">是用来对Toolbar进行再次包装的ViewGroup，主要是用于实现折叠的App Bar效果。CollapsingToolbarLayout只要有这方面：</div><div class="line">1.title展开时是最大的，然后随着收缩会越来越少，直到屏幕的顶部，通过app:title设置title,不然就默认。</div><div class="line">2.通过setContentScrim(Drawable)来设置达到某一个状态之后的出现的效果3.通过setStatusBarScrim(Drawable)来设置达到某一个状态之后的状态栏出现的效果</div><div class="line">4.当`app:layout_collapseMode设为parallax`子View可以选择在当前的布局当时是否以“视差”的方式来跟随滚动</div><div class="line">5.当`app:layout_collapseMode设为pin`Toolbar固定位置而不受移动的影响</div><div class="line">在我们实现这里，我们把`layout=&quot;@layout/shenghuo_head1&quot;`即</div><div class="line"></div><div class="line">![img4.PNG](http://upload-images.jianshu.io/upload_images/925576-9138e387abbc552c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</div><div class="line">设为`app:layout_collapseMode=&quot;parallax&quot;`让它以“视差”的方式来跟随滚动，而toolbar设为`app:layout_collapseMode=&quot;pin&quot;`以让他固定不动。</div><div class="line"></div><div class="line"></div><div class="line">4.Toolbar动态变化</div><div class="line">-------------</div><div class="line">在此整体布局就已经完成，不过还有一个效果就是向上移动是toolbar的的View是动态变化的，一开始我以为这些控件会有这个功能吧，没想到找了很久都没找到，没办法只能自己实现了。二话不说上代码：</div><div class="line"></div><div class="line">``` </div><div class="line">private AppBarLayout mAppBarLayout=null;</div><div class="line"> private View mToolbar1=null; </div><div class="line">private View mToolbar2=null; </div><div class="line">private ImageView mZhangdan=null;</div><div class="line">private TextView mZhangdan_txt=null; </div><div class="line">private ImageView mTongxunlu=null; </div><div class="line">private ImageView mJiahao=null; </div><div class="line">private ImageView mZhangdan2=null; </div><div class="line">private ImageView mShaoyishao=null; </div><div class="line">private ImageView mSearch=null; </div><div class="line">private ImageView mZhaoxiang=null; </div><div class="line">private RecyclerView myRecyclerView; </div><div class="line"></div><div class="line">@Override protected void onCreate(Bundle savedInstanceState) &#123; </div><div class="line">super.onCreate(savedInstanceState); setContentView(R.layout.activity_scrolling);</div><div class="line"></div><div class="line">myRecyclerView=(RecyclerView)findViewById(R.id.myRecyclerView);</div><div class="line">myRecyclerView.setLayoutManager(new LinearLayoutManager(this)); </div><div class="line">myRecyclerView.setAdapter(new ToolbarAdapter(this)); </div><div class="line">mAppBarLayout=(AppBarLayout)findViewById(R.id.app_bar); </div><div class="line"></div><div class="line">mToolbar1=(View)findViewById(R.id.toolbar1); </div><div class="line">mToolbar2=(View)findViewById(R.id.toolbar2);</div><div class="line"></div><div class="line">mZhangdan=(ImageView)findViewById(R.id.img_zhangdan); </div><div class="line">mZhangdan_txt=(TextView)findViewById(R.id.img_zhangdan_txt); </div><div class="line">mTongxunlu=(ImageView)findViewById(R.id.tongxunlu);</div><div class="line">mJiahao=(ImageView)findViewById(R.id.jiahao); </div><div class="line"></div><div class="line">mZhangdan2=(ImageView)findViewById(R.id.img_shaomiao); </div><div class="line">mShaoyishao=(ImageView)findViewById(R.id.img_fukuang); </div><div class="line">mSearch=(ImageView)findViewById(R.id.img_search); </div><div class="line">mZhaoxiang=(ImageView)findViewById(R.id.img_zhaoxiang); </div><div class="line"></div><div class="line">mAppBarLayout.addOnOffsetChangedListener(</div><div class="line">new AppBarLayout.OnOffsetChangedListener() &#123;</div><div class="line"> @Override public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) &#123; </div><div class="line">if (verticalOffset == 0)&#123;</div><div class="line"> //张开</div><div class="line">mToolbar1.setVisibility(View.VISIBLE);</div><div class="line">mToolbar2.setVisibility(View.GONE); </div><div class="line">setToolbar1Alpha(255); </div><div class="line">&#125; else if (Math.abs(verticalOffset)&gt;=appBarLayout.getTotalScrollRange()) &#123;</div><div class="line"> //收缩 </div><div class="line">mToolbar1.setVisibility(View.GONE); </div><div class="line">mToolbar2.setVisibility(View.VISIBLE); </div><div class="line">setToolbar2Alpha(255); </div><div class="line">&#125; else &#123;</div><div class="line"> int alpha=255-Math.abs(verticalOffset)-150; </div><div class="line">if(alpha&lt;=0)&#123; </div><div class="line">//收缩</div><div class="line">toolbar mToolbar1.setVisibility(View.GONE); </div><div class="line">mToolbar2.setVisibility(View.VISIBLE); </div><div class="line">setToolbar2Alpha(Math.abs(verticalOffset)); </div><div class="line">&#125;else&#123; </div><div class="line">//张开</div><div class="line">toolbar mToolbar1.setVisibility(View.VISIBLE); </div><div class="line">mToolbar2.setVisibility(View.GONE); setToolbar1Alpha(alpha); </div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;</div><div class="line"> &#125;);</div><div class="line"> &#125;</div><div class="line"> //设置展开时各控件的透明度 </div><div class="line">public void setToolbar1Alpha(int alpha)&#123;</div><div class="line">  mZhangdan.getDrawable().setAlpha(alpha); </div><div class="line">  mZhangdan_txt.setTextColor(Color.argb(alpha,255,255,255)); </div><div class="line">  mTongxunlu.getDrawable().setAlpha(alpha); </div><div class="line">  mJiahao.getDrawable().setAlpha(alpha); </div><div class="line">&#125; </div><div class="line">//设置闭合时各控件的透明度 </div><div class="line">public void setToolbar2Alpha(int alpha)&#123;</div><div class="line">  mZhangdan2.getDrawable().setAlpha(alpha); </div><div class="line">  mShaoyishao.getDrawable().setAlpha(alpha);</div><div class="line">  mSearch.getDrawable().setAlpha(alpha);     </div><div class="line">  mZhaoxiang.getDrawable().setAlpha(alpha); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码还是有点多了不过最核心就设置AppBarLayout 的监听器addOnOffsetChangedListener来进行效果的处理。当verticalOffset=0的时候即使整个展开的是时候要做的就是显示要显示的，隐藏要隐藏的设置，在设置透明度，同理当verticalOffset等于appBarLayout.getTotalScrollRange()即等于最大值的时候，就是关闭的时候，处理的展开相反。当他在中间值的时候，通过`int alpha=255-Math.abs(verticalOffset)-150;得到要设置的透明度，减去150是为了让效果更明显。当alpha小于0的时候是执行展开的toolbar的透明度效果，反之大于0的时候是闭合时toolbar的透明图效果。</p>
<p><strong>剩下的看<a href="https://github.com/jack921/CoordinatorLayoutTest" target="_blank" rel="external">源码</a>吧</strong></p>
]]></content>
    
    <summary type="html">
    
      我们今天就要通过讲解android5.0新出的控件CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout来实现这个支付宝9.9.2版本生活模块界面效果
    
    </summary>
    
      <category term="Android" scheme="http://jack921.win/categories/Android/"/>
    
    
      <category term="Android界面" scheme="http://jack921.win/tags/Android%E7%95%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义钟表</title>
    <link href="http://jack921.win/2016/09/11/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E9%92%9F%E8%A1%A8/"/>
    <id>http://jack921.win/2016/09/11/Android自定义钟表/</id>
    <published>2016-09-11T15:56:00.000Z</published>
    <updated>2017-04-29T16:41:25.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="android自定义钟表"><a href="#android自定义钟表" class="headerlink" title="android自定义钟表"></a>android自定义钟表</h1><p><strong>首先看看效果图先</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-f2c4c884c9d156fe.gif?imageMogr2/auto-orient/strip" alt="time.gif"></p>
<a id="more"></a>
<p>然后看看自定义的属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;    </div><div class="line">&lt;!--钟表整体颜色--&gt;    </div><div class="line">&lt;attr name=&quot;color&quot; format=&quot;color&quot;/&gt;    </div><div class="line">&lt;!--数字大小--&gt;   </div><div class="line"> &lt;attr name=&quot;numSize&quot; format=&quot;dimension&quot;/&gt;    </div><div class="line">&lt;!--中心外圆半径--&gt;    </div><div class="line">&lt;attr name=&quot;inCircle&quot; format=&quot;integer&quot;/&gt;    </div><div class="line">&lt;!--中心内圆半径--&gt;   </div><div class="line"> &lt;attr name=&quot;outCircle&quot; format=&quot;integer&quot;/&gt;   </div><div class="line"> &lt;declare-styleable name=&quot;ClockView&quot;&gt; </div><div class="line"> &lt;attr name=&quot;numSize&quot;/&gt;        </div><div class="line">&lt;attr name=&quot;color&quot;/&gt;       </div><div class="line"> &lt;attr name=&quot;inCircle&quot;/&gt;        </div><div class="line">&lt;attr name=&quot;outCircle&quot;/&gt;    </div><div class="line">&lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">在xml界面的编写</div><div class="line">&lt;resources&gt;</div><div class="line">&lt;com.example.jack.clock.widget.ClockView  </div><div class="line">    android:layout_width=&quot;match_parent&quot; </div><div class="line">    android:layout_height=&quot;wrap_content&quot;     </div><div class="line">    app:color=&quot;@color/colorPrimary&quot; </div><div class="line">    app:inCircle=&quot;15&quot; </div><div class="line">    app:outCircle=&quot;25&quot; </div><div class="line">    app:numSize=&quot;18dp&quot;/&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>自定义各参数的初始化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"> public ClockView(Context context) &#123;  </div><div class="line">  this(context,null);</div><div class="line">&#125;</div><div class="line">public ClockView(Context context, AttributeSet attrs) &#123; </div><div class="line">   this(context, attrs,0);</div><div class="line">&#125;</div><div class="line">public ClockView(Context context, AttributeSet attrs, int defStyleAttr)&#123;    </div><div class="line">super(context, attrs, defStyleAttr);    </div><div class="line">display((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();    screemWidth=display.getWidth();    screemHeight=display.getHeight();    </div><div class="line">float density=getResources().getDisplayMetrics().density;    marginLongPoint=(int)density*8;    </div><div class="line">maginShortPoint=(int)density*16;    </div><div class="line">maginRadius=(int)density*10;    </div><div class="line">maginText=(int)density*10;   </div><div class="line">hourMargin=(int)density*75;    </div><div class="line">minuteMargin=(int)density*40;    </div><div class="line">TypedArray typedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.ClockView,defStyleAttr,0);    </div><div class="line">int numCount=typedArray.getIndexCount();    </div><div class="line">for(int i=0;i&lt;numCount;i++)&#123;        </div><div class="line">int attr=typedArray.getIndex(i);        </div><div class="line">  switch(attr)&#123;            </div><div class="line">        case R.styleable.ClockView_numSize:                              numSize=typedArray.getDimensionPixelSize(attr,(int)TypedValue                        .applyDimension(TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics()));                </div><div class="line">break;            </div><div class="line">       case R.styleable.ClockView_color:                  color=typedArray.getColor(attr,Color.BLACK);                </div><div class="line">break;            </div><div class="line">case R.styleable.ClockView_inCircle:                </div><div class="line">inCircle=typedArray.getInt(attr,15);                </div><div class="line">break;            </div><div class="line">case R.styleable.ClockView_outCircle:                </div><div class="line">outCircle=typedArray.getInt(attr,25);                </div><div class="line">break;        </div><div class="line">&#125;    </div><div class="line">&#125;   </div><div class="line"> typedArray.recycle();    </div><div class="line">initCanvas();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来就是设定这个自定义View的大小，在没有大小自适应的时候，view的高度我这位整个手机屏幕高度的三分之一，宽度为整个屏幕的宽度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> if(widthModel==MeasureSpec.EXACTLY)&#123; width=widthSize; </div><div class="line">  &#125;else&#123; </div><div class="line">  width=screemWidth; </div><div class="line">&#125; if(heightModel==MeasureSpec.EXACTLY)&#123; </div><div class="line">  height=heightSize; </div><div class="line">&#125;else&#123;</div><div class="line">  height=screemHeight/3; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在onDraw()方法里我们就可以开始画图了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Override </div><div class="line">protected void onDraw(Canvas canvas) &#123; </div><div class="line">//得到圆的半径 if(getWidth()&gt;getHeight())&#123; </div><div class="line">radius=getHeight()/2-maginRadius; </div><div class="line">&#125;else&#123; </div><div class="line">radius=getWidth()/2-maginRadius; </div><div class="line">&#125; </div><div class="line">//获得View一半的宽度和高度 </div><div class="line">halfWidth=getWidth()/2; </div><div class="line">halfHeight=getHeight()/2; </div><div class="line">//保存状态 </div><div class="line">canvas.save();</div><div class="line"> //画大圆 </div><div class="line">canvas.drawCircle(halfWidth,halfHeight,radius,paint);</div><div class="line"> //画中间大圆 </div><div class="line">canvas.drawCircle(halfWidth,halfHeight,outCircle,inCirclePaint); </div><div class="line">//画中间小圆 </div><div class="line">canvas.drawCircle(halfWidth,halfHeight,inCircle,outCirclePaint);</div><div class="line"> //画60个刻度和时钟数字 </div><div class="line">drawClockScale(canvas); </div><div class="line">//绘制时间指针 </div><div class="line">refreshTime(canvas);</div><div class="line"> //返回状态 </div><div class="line">canvas.restore(); </div><div class="line">//每隔一秒刷新 postInvalidateDelayed(1000);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>首先我们画的是外部的圆圈和正中间的半透明的大圆和小圆 ，即得到整个view的中心点也就是一半的宽(halfWidth)和高(halfHeight)画半径为radius的圆</p>
<p>###代码如下:<br>//画大圆<br>canvas.drawCircle(halfWidth,halfHeight,radius,paint);<br>//画中间大圆<br>canvas.drawCircle(halfWidth,halfHeight,outCircle,inCirclePaint);<br> //画中间小圆<br>canvas.drawCircle(halfWidth,halfHeight,inCircle,outCirclePaint); </p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-d75ba331c4ff28d6.gif?imageMogr2/auto-orient/strip" alt="GIF1.gif"></p>
<p>接着就是要画60个刻度和时钟数字这是整个自定义的难点和重点，不说废话先贴代码：</p>
<p>###画60个刻度和时钟数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> //画60个刻度 </div><div class="line">public void drawClockScale(Canvas canvas)&#123; canvas.translate(halfWidth,halfHeight); canvas.save();</div><div class="line"> //长指针的长 </div><div class="line">LongCalibration=radius/marginLongPoint; </div><div class="line">//短指针的长 </div><div class="line">ShortCalibration=radius/maginShortPoint; </div><div class="line">for(int i=0;i&lt;pointNum;i++)&#123; </div><div class="line">      if(i%5==0)&#123; </div><div class="line">  //绘画文字 </div><div class="line">canvas.save();</div><div class="line"> Rect rect=new Rect(); </div><div class="line">int number=i==0?12:(i/5);</div><div class="line"> textPaint.getTextBounds((number+&quot;&quot;),0,(number+&quot;&quot;).length(),rect); canvas.translate(0,-radius+LongCalibration+((rect.bottom-rect.top)/2)+maginText); </div><div class="line">canvas.rotate(-6*i);</div><div class="line"> canvas.drawText(number+&quot;&quot;,0,(rect.bottom-rect.top)/2,textPaint); canvas.restore();</div><div class="line"> //画线 </div><div class="line">canvas.drawLine(0,-radius+LongCalibration,0,-radius,paint); </div><div class="line">&#125;else&#123; </div><div class="line">canvas.drawLine(0,-radius+ShortCalibration,0,-radius,paint); </div><div class="line">&#125; </div><div class="line">canvas.rotate(6); </div><div class="line">&#125; </div><div class="line">canvas.restore();</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>pointNum=60即60个指针刻度，我们先把canvas的坐标原点移动到整个View的中心即canvas.translate(halfWidth,halfHeight);接着这个圆是360度我们有60个刻度即每个刻度的旋转角度为6度，所以我们每一次循环都要把canvas旋转6度即canvas.rotate(6)。理解这个之后我们每次循环通过canvas.drawline画出刻度，其中LongCalibration是长刻度的长，而ShortCalibration就是短刻度的长，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawLine(0,-radius+LongCalibration,0,-radius,paint);</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-059d7be22533c11c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="git2.PNG"></p>
<p>即旋转画出X轴Y轴为(0,-radius+LongCalibration)和(0,-radius)这两点的直线。接着就是画文字了，首先Rect计算出显示的数字的大小，再把canvas的原点移动半径减去刻度的长度和数字一半大小，自定义的间隙之后的距离，此时原点的位置就是需要画出的数字的位置，canvas在旋转-6*i的距离才能使字体竖直，效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-a87616caf1c37573.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="time2.PNG"></p>
<p>###绘制时间指针<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//获取时间指针对应的角度 </div><div class="line">public void refreshTime(Canvas canvas)&#123; </div><div class="line">//获取获取当前的时间 </div><div class="line">Calendar mCalendar=Calendar.getInstance(); </div><div class="line">int tempHour=mCalendar.get(Calendar.HOUR); </div><div class="line">int tempMinute=mCalendar.get(Calendar.MINUTE); </div><div class="line">int tempSecond=mCalendar.get(Calendar.SECOND); </div><div class="line">int hourRotate=new Float(360*((float)tempHour/12)).intValue(); </div><div class="line">//计算出份指针的旋转的角度 </div><div class="line">int minuteRotate=new Float(360*((float)tempMinute/60)).intValue(); //计算出时指针旋转的角度，注(时的角度是当前小时的角度再加分钟所引起小时偏转的角度)</div><div class="line"> hourRotate+=new Float(30*((float)minuteRotate/360)).intValue();</div><div class="line"> //计算出秒指针旋转的角度 </div><div class="line">int secondRotate=new Float(360*((float)tempSecond/60)).intValue(); drawCircleLine(canvas,hourRotate,minuteRotate,secondRotate); </div><div class="line">&#125; </div><div class="line"> //时间指针 </div><div class="line">public void drawCircleLine(Canvas canvas,int hour,int minute,int second)&#123;</div><div class="line"> marginLong=radius-LongCalibration-minuteMargin;  marginShort=radius-LongCalibration-hourMargin; canvas.rotate(180); </div><div class="line">//画小时指针 </div><div class="line">RectF hourRectF=new RectF(-pointRadio,-pointRadio,pointRadio,marginShort); canvas.save(); canvas.rotate(hour); canvas.drawRoundRect(hourRectF,circular,circular,outCirclePaint); canvas.restore();</div><div class="line"> //画分钟指针 </div><div class="line">RectF minuteRectF=new RectF(-pointRadio,-pointRadio,pointRadio,marginLong); canvas.save(); canvas.rotate(minute); canvas.drawRoundRect(minuteRectF,circular,circular,outCirclePaint); canvas.restore(); </div><div class="line">//画秒指针 canvas.save(); canvas.rotate(second); canvas.drawLine(0,0,0,radius-10,secondPaint);</div><div class="line"> canvas.restore(); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里需要说的是<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RectF hourRectF=new RectF(-pointRadio,-pointRadio,pointRadio,marginShort);</div></pre></td></tr></table></figure></p>
<p>用来确定指针的位置，pointRadio代表的是这个矩形的半径，而    canvas.rotate(180);旋转180保证按我们正常的思路一样指针向上，设RectF的左上角为(-pointRadio,-pointRadio)是为了保持在中心点(注：此时canvas的原点是view的中心），剩下就是画指针了。效果图如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/925576-3160b849429705c9.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="time3.PNG"></p>
<p>不用这是静态图，最后调用<code>postInvalidateDelayed(1000);</code>保证每个一秒就调用onDraw()方法来重绘View来实现view的每个一秒的动态变化，这样就完成效果图的功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;android自定义钟表&quot;&gt;&lt;a href=&quot;#android自定义钟表&quot; class=&quot;headerlink&quot; title=&quot;android自定义钟表&quot;&gt;&lt;/a&gt;android自定义钟表&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;首先看看效果图先&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/925576-f2c4c884c9d156fe.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;time.gif&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android自定义" scheme="http://jack921.win/categories/Android%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    
    
      <category term="Android自定义控件" scheme="http://jack921.win/tags/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
  </entry>
  
</feed>
