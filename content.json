{"meta":{"title":"谢汉杰","subtitle":"保持愚蠢，保持饥饿","description":null,"author":"jack","url":"http://jack921.win"},"pages":[{"title":"关于我","date":"2017-04-30T08:44:25.000Z","updated":"2017-07-26T16:45:17.615Z","comments":true,"path":"about/index.html","permalink":"http://jack921.win/about/index.html","excerpt":"","text":"目前只是分享技术，将来也想分享点自己的想法 不断学习中,希望自己以后可以更强 自己的其他链接 Jack的简书:http://www.jianshu.com/u/077c44fa1dff Jack的csdn:http://blog.csdn.net/u011992900 https://github.com/jack921"}],"posts":[{"title":"NestedScrolling机制","slug":"NestedScrolling机制","date":"2018-09-25T13:01:58.000Z","updated":"2018-09-25T13:03:44.930Z","comments":true,"path":"2018/09/25/NestedScrolling机制/","link":"","permalink":"http://jack921.win/2018/09/25/NestedScrolling机制/","excerpt":"","text":"NestedScrolling机制现在在App的作用越来越重要，许多很漂亮的交互都是基于NestedScrolling机制进行完成的。 NestedScrolling机制主要是能够让父View和子View在滚动时互相协调配合。其中有两个重要的类，分别是： 1234567接口类NestedScrollingParent(最新:NestedScrollingParent2)NestedScrollingChild(最新:NestedScrollingChild2)帮助类NestedScrollingChildHelperNestedScrollingParentHelper 父类继承NestedScrollingParent接口，而子类继承NestedScrollingChild接口，同时让父类包含子类，而不是自接父子关系，就搭起了NestedScrollingParent机制的基本骨架。 其主要流程是： 子类滑动，把滑动产生的事件和参数传给父类 父类根据子类传过来的参数进行各种交互操作，如变大缩小之类的 而NestedScrollingChildHelper和NestedScrollingParentHelper是两个帮助类，在实现NestedScrollingChild和NestedScrollingParent接口时，使用这两个帮助类可以简化我们的工作。 NestedScrollingChild 接口类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public interface NestedScrollingChild &#123; /** * 设置嵌套滑动是否能用 */ @Override public void setNestedScrollingEnabled(boolean enabled); /** * 判断嵌套滑动是否可用 */ @Override public boolean isNestedScrollingEnabled(); /** * 开始嵌套滑动 * * @param axes 表示方向轴，有横向和竖向 */ @Override public boolean startNestedScroll(int axes); /** * 停止嵌套滑动 */ @Override public void stopNestedScroll(); /** * 判断是否有父View 支持嵌套滑动 */ @Override public boolean hasNestedScrollingParent() ; /** * 滑行时调用 * @param velocityX x 轴上的滑动速率 * @param velocityY y 轴上的滑动速率 * @param consumed 是否被消费 * @return true if the nested scrolling parent consumed or otherwise reacted to the fling */ @Override public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) ; /** * 进行滑行前调用 * @param velocityX x 轴上的滑动速率 * @param velocityY y 轴上的滑动速率 * @return true if a nested scrolling parent consumed the fling */ @Override public boolean dispatchNestedPreFling(float velocityX, float velocityY) ; /** * 子view处理scroll后调用 * @param dxConsumed x轴上被消费的距离（横向） * @param dyConsumed y轴上被消费的距离（竖向） * @param dxUnconsumed x轴上未被消费的距离 * @param dyUnconsumed y轴上未被消费的距离 * @param offsetInWindow 子View的窗体偏移量 * @return true if the event was dispatched, false if it could not be dispatched. */ @Override public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow) ; /** * 在子View的onInterceptTouchEvent或者onTouch中，调用该方法通知父View滑动的距离 * @param dx x轴上滑动的距离 * @param dy y轴上滑动的距离 * @param consumed 父view消费掉的scroll长度 * @param offsetInWindow 子View的窗体偏移量 * @return 支持的嵌套的父View 是否处理了 滑动事件 */ @Override public boolean dispatchNestedPreScroll(int dx, int dy, @Nullable int[] consumed, @Nullable int[] offsetInWindow);&#125; 上面这个方法方法和代表的意思我都已经贴出来， 然后是只是一个接口类上面的方法要怎么实现呢，这时候就要用到上面的帮助类NestedScrollingChildHelper，一个完整的实现模板如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class MyNestedScrollingChild extends LinearLayout implements NestedScrollingChild &#123; private NestedScrollingChildHelper mNestedScrollingChildHelper; public MyNestedScrollingChild(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); mNestedScrollingChildHelper = new NestedScrollingChildHelper(this); mNestedScrollingChildHelper.setNestedScrollingEnabled(true); &#125; @Override public void setNestedScrollingEnabled(boolean enabled) &#123; mNestedScrollingChildHelper.setNestedScrollingEnabled(enabled); &#125; @Override public boolean isNestedScrollingEnabled() &#123; return mNestedScrollingChildHelper.isNestedScrollingEnabled(); &#125; @Override public boolean startNestedScroll(int axes) &#123; return mNestedScrollingChildHelper.startNestedScroll(axes); &#125; @Override public void stopNestedScroll() &#123; mNestedScrollingChildHelper.stopNestedScroll(); &#125; @Override public boolean hasNestedScrollingParent() &#123; return mNestedScrollingChildHelper.hasNestedScrollingParent(); &#125; @Override public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) &#123; return mNestedScrollingChildHelper.dispatchNestedFling(velocityX,velocityY,consumed); &#125; @Override public boolean dispatchNestedPreFling(float velocityX, float velocityY) &#123; return mNestedScrollingChildHelper.dispatchNestedPreFling(velocityX,velocityY); &#125; @Override public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow) &#123; return mNestedScrollingChildHelper.dispatchNestedScroll(dxConsumed,dyConsumed,dxUnconsumed,dyUnconsumed,offsetInWindow); &#125; @Override public boolean dispatchNestedPreScroll(int dx, int dy, @Nullable int[] consumed, @Nullable int[] offsetInWindow) &#123; return dispatchNestedPreScroll(dx,dy,consumed,offsetInWindow); &#125;&#125; NestedScrollingParent 接口1234567891011121314151617181920212223242526public interface NestedScrollingParent &#123; @Override public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes); @Override public void onStopNestedScroll(View child); @Override public void onNestedScrollAccepted(View child, View target, int axes); @Override public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed); @Override public void onNestedPreScroll(View target, int dx, int dy, int[] consumed); @Override public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed); @Override public boolean onNestedPreFling(View target, float velocityX, float velocityY); @Override public int getNestedScrollAxes();&#125; 从上面的代码可以看出NestedScrollingChild的方法执行之后就会回调父View的各个方法，从方法名也知道作用和NestedScrollingChild的用作大同小异。当子View执行startNestedScroll时，就会回调父View的onStartNestedScroll、onNestedScrollAccepted方法，当子View执行dispatchNestedPreScroll方法时，就会回调父View的onNestedPreScroll，当子View执行dispatchNestedScroll方法时，就会回调父View的onNestedScroll方法，由此类推，dispatchNestedPreFling回调父View的onNestedPreFling方法，dispatchNestedFling回调父View的onNestedFling方法，等。 同时也有几个接口是需要帮助类进行实现的，模板代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class MyNestedScrollingParent extends LinearLayout implements NestedScrollingParent &#123; private NestedScrollingParentHelper mNestedScrollingParentHelper; public MyNestedScrollingParent(Context context, @Nullable AttributeSet attrs) &#123; super(context, attrs); mNestedScrollingParentHelper = new NestedScrollingParentHelper(this); &#125; @Override public boolean onStartNestedScroll(View child, View target, int nestedScrollAxes) &#123; return super.onStartNestedScroll(child, target, nestedScrollAxes); &#125; @Override public void onNestedScroll(View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) &#123; super.onNestedScroll(target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed); &#125; @Override public void onNestedPreScroll(View target, int dx, int dy, int[] consumed) &#123; super.onNestedPreScroll(target, dx, dy, consumed); &#125; @Override public boolean onNestedFling(View target, float velocityX, float velocityY, boolean consumed) &#123; return super.onNestedFling(target, velocityX, velocityY, consumed); &#125; @Override public boolean onNestedPreFling(View target, float velocityX, float velocityY) &#123; return super.onNestedPreFling(target, velocityX, velocityY); &#125; @Override public void onStopNestedScroll(View child) &#123; mNestedScrollingParentHelper.onStopNestedScroll(child); &#125; @Override public void onNestedScrollAccepted(View child, View target, int axes) &#123; mNestedScrollingParentHelper.onNestedScrollAccepted(child,target,axes); &#125; @Override public int getNestedScrollAxes() &#123; return mNestedScrollingParentHelper.getNestedScrollAxes(); &#125;&#125; 最后总结，子View通过startNestedScroll()发起嵌套滑动，同时父View也会回调自己的onStartNestedScroll()方法，接着子View每次在滚动前都会调用dispatchNestedPreScroll()方法,父View的onNestedPreScroll()也会操作，父View决定是否熬滑动，然后才是子View自己滑动，之后子View也可以调用上面的其它方法做相应的处理，最后调用stopNestedScroll()结束。 最后举一个实例吧 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158public class MyNestedScrollChild extends LinearLayout implements NestedScrollingChild2 &#123; private NestedScrollingChildHelper mNestedScrollingChildHelper; private int[] offset=new int[2]; private int[] consumed=new int[2]; private TextView scrollText; private int showHeight; private int lastY; private boolean srcollTop=false; public MyNestedScrollChild(Context context) &#123; super(context); &#125; public MyNestedScrollChild(Context context, AttributeSet attrs) &#123; super(context, attrs); setBackgroundColor(context.getResources().getColor(R.color.colorffffff)); &#125; @Override protected void onFinishInflate() &#123; super.onFinishInflate(); scrollText=(TextView)getChildAt(0); &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); showHeight = getMeasuredHeight(); heightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); super.onMeasure(widthMeasureSpec, heightMeasureSpec); &#125; public boolean canChildScrollUp() &#123; return srcollTop; &#125; @Override public boolean onTouchEvent(MotionEvent event) &#123; switch(event.getAction())&#123; case MotionEvent.ACTION_DOWN: lastY=(int)event.getRawY(); break; case MotionEvent.ACTION_MOVE: int y=(int)(event.getRawY()); int dy=y-lastY; lastY=y; if(startNestedScroll(ViewCompat.SCROLL_AXIS_VERTICAL) &amp;&amp;dispatchNestedPreScroll(0,dy,consumed,offset))&#123; int remain = dy - consumed[1]; if (remain != 0) &#123; scrollBy(0, -remain); &#125; &#125;else&#123; scrollBy(0, -dy); &#125; break; &#125; return true; &#125; //限制滚动范围 @Override public void scrollTo(int x, int y) &#123; int maxY = getMeasuredHeight()- showHeight; if (y &gt; maxY) &#123; y = maxY; srcollTop=false; &#125;else if (y &lt; 0) &#123; y = 0; srcollTop=true; &#125;else&#123; srcollTop=false; &#125; super.scrollTo(x, y); &#125; public NestedScrollingChildHelper getNestedScrollingChildHelper()&#123; if(mNestedScrollingChildHelper==null)&#123; mNestedScrollingChildHelper=new NestedScrollingChildHelper(this); mNestedScrollingChildHelper.setNestedScrollingEnabled(true); &#125; return mNestedScrollingChildHelper; &#125; @Override public boolean startNestedScroll(int axes, int type) &#123; return getNestedScrollingChildHelper().startNestedScroll(axes,type); &#125; @Override public void stopNestedScroll(int type) &#123; getNestedScrollingChildHelper().stopNestedScroll(type); &#125; @Override public boolean hasNestedScrollingParent(int type) &#123; return getNestedScrollingChildHelper().hasNestedScrollingParent(type); &#125; @Override public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow, int type) &#123; return getNestedScrollingChildHelper().dispatchNestedScroll(dxConsumed,dyConsumed, dxUnconsumed,dyUnconsumed,offsetInWindow,type); &#125; @Override public boolean dispatchNestedPreScroll(int dx, int dy, @Nullable int[] consumed, @Nullable int[] offsetInWindow, int type) &#123; return getNestedScrollingChildHelper().dispatchNestedPreScroll(dx,dy,consumed,offsetInWindow,type); &#125; @Override public void setNestedScrollingEnabled(boolean enabled) &#123; getNestedScrollingChildHelper().setNestedScrollingEnabled(enabled); &#125; @Override public boolean isNestedScrollingEnabled() &#123; return getNestedScrollingChildHelper().isNestedScrollingEnabled(); &#125; @Override public boolean startNestedScroll(int axes) &#123; return getNestedScrollingChildHelper().startNestedScroll(axes); &#125; @Override public void stopNestedScroll() &#123; getNestedScrollingChildHelper().stopNestedScroll(); &#125; @Override public boolean hasNestedScrollingParent() &#123; return getNestedScrollingChildHelper().hasNestedScrollingParent(); &#125; @Override public boolean dispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, @Nullable int[] offsetInWindow) &#123; return getNestedScrollingChildHelper().dispatchNestedScroll(dxConsumed,dyConsumed,dxUnconsumed,dyUnconsumed,offsetInWindow); &#125; @Override public boolean dispatchNestedPreScroll(int dx, int dy, @Nullable int[] consumed, @Nullable int[] offsetInWindow) &#123; return getNestedScrollingChildHelper().dispatchNestedPreScroll(dx,dy,consumed,offsetInWindow); &#125; @Override public boolean dispatchNestedFling(float velocityX, float velocityY, boolean consumed) &#123; return getNestedScrollingChildHelper().dispatchNestedFling(velocityX,velocityY,consumed); &#125; @Override public boolean dispatchNestedPreFling(float velocityX, float velocityY) &#123; return getNestedScrollingChildHelper().dispatchNestedPreFling(velocityX,velocityY); &#125;&#125; 首先给出NestedScrollingChild子View,重点看一下onTouchEvent()方法,当MotionEvent.ACTION_MOVE时,不断的调用startNestedScroll()和dispatchNestedPreScroll()向父View发送直接，然后滚动通过scrollBy()滚动触发事件的View,这就是最核心的代码了，接着看父View代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105public class MyNestedScrollParent extends LinearLayout implements NestedScrollingParent2 &#123; private NestedScrollingParentHelper mNestedScrollingParentHelper; private MyNestedScrollChild scrollChildView; private ImageView foodIV; private TextView titleTV; private int imageHeight; private int titleHeight; private int imageMargin; private int scrollY; public MyNestedScrollParent(Context context) &#123; this(context,null); &#125; public MyNestedScrollParent(Context context, AttributeSet attrs) &#123; super(context, attrs); mNestedScrollingParentHelper=new NestedScrollingParentHelper(this); &#125; @Override protected void onFinishInflate() &#123; super.onFinishInflate(); FrameLayout frameLayout=(FrameLayout) getChildAt(0); scrollChildView=(MyNestedScrollChild) getChildAt(1); foodIV=frameLayout.findViewById(R.id.foodIV); titleTV=frameLayout.findViewById(R.id.titleTV); foodIV.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; @Override public void onGlobalLayout() &#123; imageHeight=foodIV.getHeight(); &#125; &#125;); titleTV.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; @Override public void onGlobalLayout() &#123; titleHeight=titleTV.getHeight(); &#125; &#125;); &#125; @Override public boolean onStartNestedScroll(@NonNull View child, @NonNull View target, int axes, int type) &#123; if(target instanceof MyNestedScrollChild) &#123; return true; &#125; return false; &#125; @Override public void onNestedScrollAccepted(@NonNull View child, @NonNull View target, int axes, int type) &#123; mNestedScrollingParentHelper.onNestedScrollAccepted(child,target,axes,type); &#125; @Override public void onStopNestedScroll(@NonNull View target, int type) &#123; mNestedScrollingParentHelper.onStopNestedScroll(target,type); &#125; @Override public int getNestedScrollAxes() &#123; return mNestedScrollingParentHelper.getNestedScrollAxes(); &#125; @Override public void onStopNestedScroll(@NonNull View target) &#123; mNestedScrollingParentHelper.onStopNestedScroll(target); &#125; @Override public void onNestedScroll(@NonNull View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type) &#123; &#125; @Override public void onNestedPreScroll(@NonNull View target, int dx, int dy, @NonNull int[] consumed, int type) &#123; imageMargin=titleHeight-imageHeight; scrollY+=dy; if(scrollY&lt;=imageMargin)&#123; scrollY=imageMargin; scrollChildView.setTranslationY(scrollY); &#125;else&#123; if(dy&lt;0)&#123; //上滑 consumed[1]=dy; scrollChildView.setTranslationY(scrollY); &#125;else&#123; //下滑 if(!scrollChildView.canChildScrollUp())&#123; scrollY-=dy; &#125; if(scrollY&gt;=0)&#123; scrollY=0; &#125; scrollChildView.setTranslationY(scrollY); &#125; &#125; &#125; @Override public boolean onStartNestedScroll(@NonNull View child, @NonNull View target, int axes) &#123; return false; &#125;&#125; 前面的子View的dispatchNestedPreScroll()对应这个父View的onNestedScroll()如上面的代码，通过View.setTranslationY()来滑动整个子View，consumed[1]=dy;表示子View和滑动的View一起滑。最后看一下布局文件： 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;com.jack.meituangoodsdetails.view.MyNestedScrollParent xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;vertical&quot;&gt; &lt;FrameLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;170dp&quot;&gt; &lt;ImageView android:id=&quot;@+id/foodIV&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;170dp&quot; android:src=&quot;@mipmap/food_bg&quot; android:scaleType=&quot;fitXY&quot;/&gt; &lt;TextView android:id=&quot;@+id/titleTV&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;50dp&quot; android:gravity=&quot;center&quot; android:textColor=&quot;@android:color/white&quot; android:background=&quot;@color/color2e8b57&quot; android:text=&quot;MyTitle&quot;/&gt; &lt;/FrameLayout&gt; &lt;com.jack.meituangoodsdetails.view.MyNestedScrollChild android:id=&quot;@+id/scroll_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:orientation=&quot;vertical&quot;&gt; &lt;TextView android:id=&quot;@+id/scrollText&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:gravity=&quot;center&quot; android:text=&quot;123\\n456\\n789\\n111\\n222\\n333\\n444\\n555\\n666\\n777\\n888\\n999\\n14\\n12\\n13\\n44\\n55\\n66\\n77\\n88\\n99\\n11\\n22\\n33\\n44\\n55\\n66\\n77\\n88\\n99\\n77\\n88\\n88\\n8\\n88\\n88\\n&quot; /&gt; &lt;/com.jack.meituangoodsdetails.view.MyNestedScrollChild&gt;&lt;/com.jack.meituangoodsdetails.view.MyNestedScrollParent&gt; 父View包裹子View，以达成依赖关系。 讲了NestedScrolling,就有必要讲解CoordinatorLayout.Behavior，下回讲吧，最后奉上源码吧https://github.com/jack921/MeiTuanGoodsDetails","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/tags/Android自定义控件/"}]},{"title":"制作支持View,图片轮播的Banner","slug":"制作支持View-图片轮播的Banner","date":"2018-09-07T02:33:25.000Z","updated":"2018-09-23T14:43:53.256Z","comments":true,"path":"2018/09/07/制作支持View-图片轮播的Banner/","link":"","permalink":"http://jack921.win/2018/09/07/制作支持View-图片轮播的Banner/","excerpt":"","text":"之前有一个项目中有用到轮播，不过不是简单的轮播图片就完了，而是要轮播很多个View,一开始我的想法和大家一样在github在一个算了，哈哈，不过在试用了很多个项目之后都觉得不能完全满足我的需求，大部分还是针对于图片轮播的场景，所以是时候自己搞一个既支持图片，也支持各种自己定义的View,同时也可以选择不同实现方式的指示器或者干脆去掉，适应个各种需求场景。 这就是他的效果,下面先源码讲解先。 LoopViewPagerLoopViewPager是这个库的关键类，其内部最基本的实现类其实还是android自带的ViewPager,代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public void initViewPage(Context context)&#123; mHandler=new Handler(); this.viewPager=new ViewPager(context); this.viewPager.setOffscreenPageLimit(2); loopViewPagerScroller = new LoopViewPagerScroller(context); loopViewPagerScroller.setScrollDuration(2000); loopViewPagerScroller.initViewPagerScroll(viewPager); if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1) &#123; viewPager.setId(viewPager.hashCode()); &#125; else &#123; viewPager.setId(View.generateViewId()); &#125; loopRunnable=new Runnable() &#123; @Override public void run() &#123; viewPager.setCurrentItem(currentItem); currentItem++; mHandler.postDelayed(loopRunnable,delayTime); &#125; &#125;; viewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123; @Override public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123; if(onPageChangeListener!=null)&#123; onPageChangeListener.onPageScrolled(position,positionOffset,positionOffsetPixels); &#125; if(indicatorCanvasView!=null)&#123; indicatorCanvasView.onPageScrolled(position,positionOffset,positionOffsetPixels); &#125; &#125; @Override public void onPageSelected(int position) &#123; currentItem=position; if(onPageChangeListener!=null)&#123; onPageChangeListener.onPageSelected(position); &#125; if(indicatorView!=null)&#123; indicatorView.changeIndicator(position==viewNumber+1?0:(position-1)); &#125; &#125; @Override public void onPageScrollStateChanged(int state) &#123; final int position = viewPager.getCurrentItem(); if(onPageChangeListener!=null)&#123; onPageChangeListener.onPageScrollStateChanged(state); &#125; if(state==ViewPager.SCROLL_STATE_IDLE)&#123; if(position==0)&#123; loopViewPagerScroller.setSudden(true); viewPager.setCurrentItem(viewNumber,true); loopViewPagerScroller.setSudden(false); &#125;else if(position==(viewNumber+1))&#123; loopViewPagerScroller.setSudden(true); viewPager.setCurrentItem(1,true); loopViewPagerScroller.setSudden(false); &#125; &#125; &#125; &#125;); this.addView(this.viewPager);&#125; 在这里我们知道，LoopViewPager里面其实最主要就是包裹着ViewPage而已，至于指示器后面在讲。那么一个简单的ViewPage是怎么实现无限轮播的呢，关键setData()方法里，如下代码: 12345678public void setData(Context context, List&lt;T&gt; mData, CreateView mCreatView)&#123; viewNumber=mData.size(); initIndicator(getContext()); LoopViewPagerAdapter loopViewPagerAdapter= new LoopViewPagerAdapter(context,mData,mCreatView,onClickListener); viewPager.setAdapter(loopViewPagerAdapter); viewPager.setCurrentItem(1);&#125; 在上面的代码里有关键的类，是LoopViewPagerAdapter，实现的是View的无限轮播，有这个基础类，基本就可以为所欲为了 LoopViewPagerAdapter这是针对View其中包括ImageView的轮播的，代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public class LoopViewPagerAdapter&lt;T&gt; extends PagerAdapter &#123; private OnPageClickListener onClickListener; private CreateView mCreateView; private Context context; private List&lt;T&gt; mData; public LoopViewPagerAdapter(Context context, List&lt;T&gt; list, CreateView createView, OnPageClickListener onClickListener)&#123; this.onClickListener=onClickListener; this.mCreateView=createView; this.context=context; this.mData=list; &#125; @Override public Object instantiateItem(ViewGroup container, int position) &#123; position=getActualPosition(position); if(mCreateView==null)&#123; return new View(context); &#125; View view=mCreateView.createView(position); final int finalPosition = position; view.setOnClickListener(new View.OnClickListener() &#123; @Override public void onClick(View view) &#123; if(onClickListener!=null)&#123; onClickListener.onClick(view, finalPosition); &#125; &#125; &#125;); ViewParent vp = view.getParent(); if (vp != null) &#123; ViewGroup parent = (ViewGroup)vp; parent.removeView(view); &#125; mCreateView.updateView(view,position,mData.get(position)); container.addView(view); return view; &#125; @Override public void destroyItem(@NonNull ViewGroup container, int position, @NonNull Object object) &#123; container.removeView((View)object); mCreateView.deleteView(position); &#125; private int getActualPosition(int position) &#123; if (position == 0) &#123; return this.mData.size()-1; &#125; else if(position==mData.size()+1)&#123; return 0; &#125; else &#123; return position-1; &#125; &#125; @Override public int getCount() &#123; return mData!=null&amp;&amp;!mData.isEmpty()?mData.size()+2:0; &#125; @Override public boolean isViewFromObject(@NonNull View arg0, @NonNull Object arg1) &#123; return arg0==arg1; &#125;&#125; 这里在getCount()方法里返回mData.size()+2个数量，在getActualPosition()返回的是正确的position位置，当postion等于0的时候，返回的是最后一个View的位置，那个就会显示最后一个View，当position等于mData.size()+1时，返回的是第一个View,也就是说在第一个View左边加最后一个View,在最后一个View右边加第一个View,这样就可以做到首尾无缝连接，不过这样是不够的，在上面的initViewPage()方法里有如下代码：123456789101112if(state==ViewPager.SCROLL_STATE_IDLE)&#123; if(position==0)&#123; loopViewPagerScroller.setSudden(true); viewPager.setCurrentItem(viewNumber,true); loopViewPagerScroller.setSudden(false); &#125;else if(position==(viewNumber+1))&#123; loopViewPagerScroller.setSudden(true); viewPager.setCurrentItem(1,true); loopViewPagerScroller.setSudden(false); &#125;&#125; 在返回的postion==0是最后一个View然后用viewPager.setCurrentItem()调整到最后一个的真实位置，当viewNumber+1是第一个View,通过viewPager.setCurrentItem()调整到第一个View的真实位置。这样就做到无限循环。 有了上面这个类就可以实现View的循环轮播。 讲完轮播，接着就是指示器，指示器我也写了两个，一种是简单的IndicatorView，没什么动画，直接图片切换，一种是实现指示器滑动动画的IndicatiorCanvasView。 IndicatorView先讲简单的指示器，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class IndicatorView extends LinearLayout &#123; private Context context; private int loopNowIndicatorImg; private int loopIndicatorImg; private IndicatorAnimator indicatorAnimator; public IndicatorView(Context context, int loopNowIndicatorImg, int loopIndicatorImg, IndicatorAnimator indicatorAnimator) &#123; this(context,null); this.loopNowIndicatorImg=loopNowIndicatorImg; this.loopIndicatorImg=loopIndicatorImg; this.indicatorAnimator=indicatorAnimator; &#125; public IndicatorView(Context context, @Nullable AttributeSet attrs) &#123; this(context,attrs,0); &#125; public IndicatorView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); this.context=context; setOrientation(HORIZONTAL); &#125; public void initView(int viewSize)&#123; for(int i=0;i&lt;viewSize;i++)&#123; ImageView imageView=new ImageView(context); LayoutParams layoutParams=new LayoutParams( ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT); layoutParams.gravity= Gravity.CENTER; imageView.setLayoutParams(layoutParams); if(i==0)&#123; imageView.setImageResource(this.loopNowIndicatorImg); &#125;else&#123; imageView.setImageResource(this.loopIndicatorImg); &#125; addView(imageView); &#125; &#125; public void changeIndicator(int select)&#123; if(getChildCount()==0)&#123; return; &#125; for(int i=0;i&lt;getChildCount();i++)&#123; ((ImageView)getChildAt(i)).setImageResource(this.loopIndicatorImg); &#125; ImageView imageView=(ImageView)getChildAt(select); imageView.setImageResource(this.loopNowIndicatorImg); if(this.indicatorAnimator!=null)&#123; indicatorAnimator.indicatorView(imageView); &#125; &#125;&#125; 这是很简单的指示器，首先集成LinearLayout,在通过initView()遍历ImageView，再通过addView添加，这就完成了指示器界面初始化。当ViewPage每滑动一次都会调用changeIndicator()方法，这里先遍历把所有的View都设为未选择状态，再把选中的ImageView设为选中的图片就行了，每什么说的。 IndicatiorCanvasView1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768public class IndicatiorCanvasView extends LinearLayout &#123; private int select_origin; private float positionOffsetData; private Bitmap originBitmap; private ImageView firstView; private ImageView secondView; private Context context; private int numView; private int[] firstViewLocation=new int[2]; private int[] secondViewLocation=new int[2]; private int originMargin=0; public IndicatiorCanvasView(Context context,int origin,int select_origin) &#123; this(context,null); originBitmap=BitmapFactory.decodeResource(context.getResources(), origin); this.select_origin=select_origin; this.context=context; &#125; public IndicatiorCanvasView(Context context, @Nullable AttributeSet attrs) &#123; this(context, attrs,0); &#125; public IndicatiorCanvasView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; @Override public void onGlobalLayout() &#123; firstView.getLocationInWindow(firstViewLocation); secondView.getLocationInWindow(secondViewLocation); originMargin=secondViewLocation[0]-firstViewLocation[0]; &#125; &#125;); &#125; public void initView(int size)&#123; this.numView=size; for(int i=0;i&lt;size;i++)&#123; ImageView originView=new ImageView(context); LayoutParams layoutParams=new LayoutParams( ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT); layoutParams.gravity= Gravity.CENTER; originView.setLayoutParams(layoutParams); originView.setImageResource(select_origin); if(i==0)&#123; firstView=originView; &#125;else if(i==1)&#123; secondView=originView; &#125; addView(originView); &#125; &#125; @Override protected void dispatchDraw(Canvas canvas) &#123; super.dispatchDraw(canvas); canvas.translate(this.positionOffsetData,0); canvas.drawBitmap(originBitmap,0,0,new Paint()); &#125; public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels)&#123; int num=position%this.numView; this.positionOffsetData=(num*originMargin)+originMargin*positionOffset; invalidate(); &#125;&#125; 首先initView()方法还是和之前一样，遍历ImageView再addView();重头戏在于当ViewPage滑动时会回调onPageScrolled()方法，而positionOffset是他的滑动比例，originMargin是两个指示点的距离，而originMargin是怎么算的能，如下代码: 12345678getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123; @Override public void onGlobalLayout() &#123; firstView.getLocationInWindow(firstViewLocation); secondView.getLocationInWindow(secondViewLocation); originMargin=secondViewLocation[0]-firstViewLocation[0]; &#125;&#125;); 既拿到第一个指示点和第二个指示点的位置，然后相减，就是两点之间的间距。在通过(numoriginMargin)+originMarginpositionOffset拿到滑动的距离，调invalidate()方法刷新。刷新是会回调：dispatchDraw(Canvas canvas)方法。123456@Overrideprotected void dispatchDraw(Canvas canvas) &#123; super.dispatchDraw(canvas); canvas.translate(this.positionOffsetData,0); canvas.drawBitmap(originBitmap,0,0,new Paint());&#125; 计算出来的值通过canvas.translate()移动canvas原点，这你在我自定义的文章见多了吧，再通过canvas.drawBitmap()动态画出移动的点。这就实现了点的动画。 这基本就是整个循坏Banner的所有重点。这个Banner既支持普通的View,当然也有懒人专用的传个数组就可实现图片轮播,整个项目我已经生产一个库,具体的源码和用法,怎么引用请参见github. https://github.com/jack921/LoopViewPagers","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/tags/Android自定义控件/"}]},{"title":"自定义View之雷达图","slug":"自定义View之雷达图","date":"2018-08-09T05:51:54.000Z","updated":"2018-09-23T14:45:58.884Z","comments":true,"path":"2018/08/09/自定义View之雷达图/","link":"","permalink":"http://jack921.win/2018/08/09/自定义View之雷达图/","excerpt":"","text":"好久没有写过自定义的文章，这次重拾这方面的内容，从雷达图开始。首先看一下效果图：这就是大概的效果图了，下面我们就一一讲解吧。 首先为了看的懂，我会把所以变量贴出来，以防止看代码段的时候大家不知其意思： 123456789101112131415161718192021222324252627282930313233343536373839404142434445private Paint mBroadPaint = new Paint();//边private Paint mMarkEasePaint = new Paint();//数值面积private Paint mMarkPaint = new Paint();//数值边private Paint mCircleHoldPaint = new Paint();//各个数值点private Paint mDrawTextPaint = new Paint();//各个角文字private Paint mHoldTextPaint = new Paint();//数值点文字private Paint mIntervalTextPaint = new Paint();//区间点public static final double CIRCLE_ANGLE = 2 * Math.PI;private int broad_color = Color.parseColor(&quot;#585858&quot;);//边的颜色private int broad_color_text = Color.parseColor(&quot;#88001B&quot;);//角的字体颜色private int mark_color = Color.parseColor(&quot;#FDECA6&quot;);//数值区域颜色private int mark_broad_color = Color.parseColor(&quot;#FFCA18&quot;);//数值边的颜色private int corner_hold_color = Color.parseColor(&quot;#EC1C24&quot;);//数组提示字体的颜色private int circle_hold_color = Color.parseColor(&quot;#008B8B&quot;);//数值区域点的颜色private int interval_text_color = Color.parseColor(&quot;#2F4F4F&quot;);//区间点的颜色private float mBroadStrokeWidth = 1.5f;//边的粗细private float mMarkBroadStrokeWidth = 1.5f;//数值区域边的粗细private int corner_textSize;//边角的字体的大小private int circle_hold_textSize;//数组提示字体的大小private int mMarkEaseAlpha = 70;//数值区域的透明度private int mBroadAlpha = 225;//各个边的连线的透明度private int mIntervalTextSize;//区间点的大小private List&lt;String&gt; cornerName = new ArrayList&lt;&gt;();//角的名字的集合private List&lt;Float&gt; listData = new ArrayList&lt;&gt;();private int angleStatus = 0;//角的状态private float maxValue = 0f;//最大值private Float radius = 0f;//画图的半径private float[] listAngle;//所有角的集合private boolean drawText = false;//画不画数组提示private long duration = 3000;//动画时间private boolean openDuration = true;//是否开启动画private boolean openDataEasePoint = true;//是否开启区域数值提示private int marginNum = 4; //画多少个雷达图的边private float margin; //每个雷达图边的间隔private double mPerimeter;private float mFlingPoint;private GestureDetector mDetector;private Scroller scroller; 接着就是自定义确定整个View的大小，代码如下： 12345678910111213141516171819202122232425262728293031323334353637@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); int widthModel = MeasureSpec.getMode(widthMeasureSpec); int heightModel = MeasureSpec.getMode(heightMeasureSpec); int measureWidth = MeasureSpec.getSize(widthMeasureSpec); int measureHeight = MeasureSpec.getSize(heightMeasureSpec); int width; int height; if (widthModel == MeasureSpec.EXACTLY) &#123; width = measureWidth; &#125; else &#123; width = getPaddingLeft() + getPaddingRight() + measureWidth; &#125; if (heightModel == MeasureSpec.EXACTLY) &#123; height = measureHeight; &#125; else &#123; height = (getPaddingTop() + getPaddingBottom() + measureHeight) / 2; &#125; setMeasuredDimension(width, height);&#125;@Overrideprotected void onSizeChanged(int width, int height, int oldw, int oldh) &#123; super.onSizeChanged(width, height, oldw, oldh); radius = (float) Math.min(width, height) / 3; margin = radius / 4; mPerimeter = 2 * Math.PI * radius; float tempRedius = (float) 360 / listData.size(); listAngle = new float[listData.size()]; for (int i = 0; i &lt; listData.size(); i++) &#123; listAngle[i] = tempRedius * (i + 1); &#125; if (this.openDuration) &#123; loadStartAnimator(); &#125;&#125; 当MeasureSpec.getMode不等于 MeasureSpec.EXACTLY时即父控件没有指定大小时，该View的宽时这个屏幕的宽再加它的左右间隔，而高是该屏幕的高再加上下间隔再除于2，否侧就是用指定控件的大小。 而onSizeChanged当view的大小发生变化时触发再onDraw()之前触发，所以我在这里计算出雷达图的半径(radius),和根据传进来的值计算出各个角的角度数组(listAngle),和各个雷达边的间隔(margin),主要就是这些了。 接下来就是分析最重要的onDraw()方法，代码如下： 123456789101112131415161718192021222324@Overrideprotected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); if (listAngle.length == 0) &#123; return; &#125; canvas.translate(getWidth() / 2, getHeight() / 2); canvas.rotate(180); canvas.save(); //画雷达图各个边 for (int i = 1; i &lt;= marginNum; i++) &#123; drawRadarBroad(canvas, margin * i); &#125; //画雷达图各个边的连线 drawPointLine(canvas, radius); //画雷达图的角的文字 drawText(canvas, radius); //画出数值区域 drawData(canvas, radius); //画出各个点 circleHoldPaint(canvas, radius); //画各个区间数值提示 drawDataEasePoint(canvas);&#125; 在这里我们把Canvas的原点移到这个View的中心，旋转180度为了保持刚开始时第一个点在正上方，再保存此时Canvas的状态，接着我们就要“画画”了。 drawRadarBroad(Canvas canvas, float radius)12345678910111213141516171819202122public void drawRadarBroad(Canvas canvas, float radius) &#123; Path path = new Path(); for (int i = 0; i &lt; listAngle.length; i++) &#123; float[] temp = getAngle(radius, listAngle[i]); if (i == 0) &#123; path.moveTo(temp[0], temp[1]); &#125; else &#123; path.lineTo(temp[0], temp[1]); &#125; &#125; float[] lastPoint = getAngle(radius, listAngle[0]); path.lineTo(lastPoint[0], lastPoint[1]); mBroadPaint.setAlpha(mBroadAlpha); canvas.drawPath(path, mBroadPaint);&#125;public float[] getAngle(float radius, float angle) &#123; float[] param = new float[2]; param[0] = (float) Math.sin(Math.toRadians(angle)) * radius; param[1] = (float) Math.cos(Math.toRadians(angle)) * radius; return param;&#125; 我们通过margin * i计算出每个雷达边的外接圆的半径，在创建Path然后遍历各个角，通过getAngle()方法计算出各个点坐标，getAngle()里面的代码说白了只是三角计算公式而已。当它在第一个点的时候移动path即moveTo(),其后的点都是用lineTo()代表连接，然后最后一个点再和第一个点相连，形成一个闭环，最后调用Canvas.drawPath()画出这个雷达边，多次调用即画出多个边了。效果如下： drawPointLine(Canvas canvas, float radius)接下来要把上面的边连起来形成真正的雷达图，代码如下：12345678910public void drawPointLine(Canvas canvas, float radius) &#123; for (int i = 0; i &lt; listAngle.length; i++) &#123; Path path = new Path(); path.moveTo(0, 0); float[] temp = getAngle(radius, listAngle[i]); path.lineTo(temp[0], temp[1]); mBroadPaint.setAlpha(mBroadAlpha); canvas.drawPath(path, mBroadPaint); &#125;&#125; 这个很简单，拿到整个最大外接圆的半径，计算出各个角的坐标，然后用Path把他们画出原点到各个角的连线，效果图如下: 接着画出雷达图各个角的提示文字drawText(Canvas canvas, float radius)12345678910111213141516171819202122232425public void drawText(Canvas canvas, float radius) &#123; if (cornerName.size() == 0) &#123; return; &#125; for (int i = 0; i &lt; listAngle.length; i++) &#123; canvas.save(); float[] temp = getAngle(radius, listAngle[i]); canvas.translate(temp[0], temp[1]); canvas.rotate(-180); Rect mCenterRect=new Rect(); mIntervalTextPaint.getTextBounds(cornerName.get(i)+&quot;&quot;,0,cornerName.get(i).length(),mCenterRect); if (-0.6&lt;((int)temp[0])&amp;&amp;((int)temp[0])&lt;=0.6) &#123; canvas.drawText(cornerName.get(i),0, temp[1]&gt;0?-(mCenterRect.height()/2) :mCenterRect.height()*2,mDrawTextPaint); &#125; else &#123; canvas.drawText(cornerName.get(i), temp[0]&gt;0?-(mCenterRect.width()):(mCenterRect.width()), temp[1]&gt;0?-(mCenterRect.height()/2):mCenterRect.height(), mDrawTextPaint); &#125; canvas.restore(); &#125; &#125; 这个整体思路也很简单，遍历雷达图的所有角，通过getAngle()拿到所有的坐标，在通过canvas.drawText()画出角的提示，这里注意的是，mDrawTextPaint我是设置居中，因为后面还涉及手势滑动，所以当-0.6&lt;((int)temp[0])&amp;&amp;((int)temp[0])&lt;=0.6时，是上下两个点，所以X的偏移我这是为0,最上面一点偏移半个文字高度，而下面是两个。假如不是上下两个点则是正常点，X点的偏移是temp[0]&gt;0?-(mCenterRect.width()):(mCenterRect.width())，Y点的偏移是temp[1]&gt;0?-(mCenterRect.height()/2):mCenterRect.height()。效果图如下： drawData(Canvas canvas, float radius)接着就是画数值占雷达图的整个区域和边，代码如下： 123456789101112131415161718public void drawData(Canvas canvas, float radius) &#123; if (maxValue == 0) &#123; maxValue = Collections.max(listData); &#125; Path path = new Path(); for (int i = 0; i &lt; listAngle.length; i++) &#123; float tempRadius = (listData.get(i) / maxValue) * radius; float[] tempAngle = getAngle(tempRadius, listAngle[i]); if (i == 0) &#123; path.moveTo(tempAngle[0], tempAngle[1]); &#125; else &#123; path.lineTo(tempAngle[0], tempAngle[1]); &#125; &#125; path.close(); canvas.drawPath(path, mMarkEasePaint); canvas.drawPath(path, mMarkPaint);&#125; 通过(listData.get(i)/maxValue)*radius画出不同数值对应的半径，再通过getAngle()来获取角的坐标，然后依照画画雷达边画出用path.moveTo和path.lineTo画出整个路径，再通过canvas.drawPath(path,mMarkEasePaint)，canvas.drawPath(path, mMarkPaint)分别画出对应的区域和对应的边。效果图如下： circleHoldPaint(Canvas canvas, float radius)接着画出数值点和其每个点代表的数值，代码如下： 12345678910111213141516171819public void circleHoldPaint(Canvas canvas, float radius) &#123; if (maxValue == 0) &#123; maxValue = Collections.max(listData); &#125; for (int i = 0; i &lt; listAngle.length; i++) &#123; float tempRadius = (listData.get(i) / maxValue) * radius; float[] tempAngle = getAngle(tempRadius, listAngle[i]); if (drawText) &#123; canvas.save(); canvas.translate(tempAngle[0], tempAngle[1]); Rect mCenterRect=new Rect(); mHoldTextPaint.getTextBounds(cornerName.get(i)+&quot;&quot;,0,cornerName.get(i).length(),mCenterRect); canvas.rotate(-180); canvas.drawText(listData.get(i)+&quot;&quot;,tempAngle[0]&gt;0?-mCenterRect.width()/2:mCenterRect.width()/2,tempAngle[1]&gt;0?-mCenterRect.height()/2:mCenterRect.height()/2,mHoldTextPaint); canvas.restore(); &#125; canvas.drawCircle(tempAngle[0], tempAngle[1], 5, mCircleHoldPaint); &#125; &#125; 首先还是遍历所有的角度的集合，和上面一样通过(listData.get(i) / maxValue) * radius拿到半径，再通过getAngle()拿到每个角度和半径对应的坐标。通过canvas.save()保存当前状态，再通过canvas.translate()把原点移动到对应的坐标，通过canvas.drawText()画出对应的数值，在canvas.restore()来恢复原先的状态。最后通过canvas.drawCircle()画出每个数值点的中心。效果图如下： drawDataEasePoint(Canvas canvas)最后就是画各个区间的数值提示，代码如下: 1234567891011121314151617public void drawDataEasePoint(Canvas canvas) &#123; if (!openDataEasePoint &amp;&amp; listAngle.length != 0) &#123; return; &#125; float marginData = maxValue / marginNum; for (int i = 1; i &lt;= marginNum; i++) &#123; float[] temp = getAngle(margin * i, listAngle[0]); canvas.save(); canvas.translate(temp[0], temp[1]); canvas.rotate(-180); float data = marginData * i; Rect mCenterRect=new Rect(); mIntervalTextPaint.getTextBounds(data+&quot;&quot;,0,(data+&quot;&quot;).length(),mCenterRect); canvas.drawText(data+&quot;&quot;,0, temp[1]&gt;0?mCenterRect.height():-mCenterRect.height(), mIntervalTextPaint); canvas.restore(); &#125;&#125; 首先通过maxValue/marginNum计算出每个区间真是数值之间的间隔，在遍历marginNum，通过marginData*i获取每个区间的半径，再通过getAngle()获取对应的坐标，剩下的操作思路和上面的都大同小异，保存状态，计算字体大小，再通过canvas.drawText()画出字体，然后canvas.restore()还原。最终的效果图就都出来了，如下: 上面虽然画出了雷达图的全部样子，可是都是静态的不能手指操作。要怎么实现呢，也很简单，重写onTouch(MotionEvent event)方法，代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182scroller = new Scroller(getContext());mDetector = new GestureDetector(getContext(), mGestureListener);@Overridepublic boolean onTouchEvent(MotionEvent event) &#123; mDetector.onTouchEvent(event); return true;&#125;private GestureDetector.SimpleOnGestureListener mGestureListener = new GestureDetector.SimpleOnGestureListener() &#123; @Override public boolean onDown(MotionEvent e) &#123; if (!scroller.isFinished()) &#123; scroller.forceFinished(true); &#125; return true; &#125; @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123; calculationAngle(e1.getX(), e1.getY(), e2.getX(), e2.getY(), distanceX / 5, distanceY / 5); postInvalidate(); return super.onScroll(e1, e2, distanceX, distanceY); &#125; @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123; if (Math.abs(velocityX) &gt; Math.abs(velocityY)) &#123; mFlingPoint = e2.getX(); scroller.fling((int) e2.getX(), 0, (int) (velocityX), 0,(int) (-50 + e2.getX()),(int) (50 + e2.getX()), 0, 0); &#125; else if (Math.abs(velocityX) &lt; Math.abs(velocityY)) &#123; mFlingPoint = e2.getX(); scroller.fling(0, (int) e2.getY(), 0, (int) (velocityY), 0, 0, (int) -(50 + e2.getY()), (int) (50 + e2.getY())); &#125; return super.onFling(e1, e2, velocityX, velocityY); &#125;&#125;; public void calculationAngle(float startX, float startY, float endX, float endY, float distanceX, float distanceY) &#123; float tempRadius = 0; int action = detectDicr(startX, startY, endX, endY); if (action == 1 || action == 2) &#123;//上下 if (startX &gt; (getWidth() / 2)) &#123; tempRadius = distanceY; //右 &#125; else &#123; tempRadius = -distanceY;//左 &#125; &#125; else if (action == 3 || action == 4) &#123;//左右 if (startY &gt; (getHeight() / 2)) &#123; tempRadius = -distanceX;//下 &#125; else &#123; tempRadius = distanceX;//上 &#125; &#125; if (tempRadius &gt; 0) &#123; angleStatus = 0; &#125; else &#123; angleStatus = 1; &#125; for (int i = 0; i &lt; listAngle.length; i++) &#123; listAngle[i] += (tempRadius); &#125;&#125; //通过手势来移动方块：1,2,3,4对应上下左右private int detectDicr(float start_x, float start_y, float end_x, float end_y) &#123; boolean isLeftOrRight = Math.abs(start_x - end_x) &gt; Math.abs(start_y - end_y) ? true : false; if (isLeftOrRight) &#123; if (start_x - end_x &gt; 0) &#123; return 3; &#125; else if (start_x - end_x &lt; 0) &#123; return 4; &#125; &#125; else &#123; if (start_y - end_y &gt; 0) &#123; return 1; &#125; else if (start_y - end_y &lt; 0) &#123; return 2; &#125; &#125; return 0;&#125; 当我们手指在这个View滑动时，就是回调onScroll()方法，然后调用calculationAngle()方法，在这方法里detectDicr()方法是用来判断方向的，当它在上下滑石，我们用onScroll()回调的distanceY，左右就用distanceX方法，然后在根据它在哪个象限来判断正负值。再通过遍历所有角度来修改所有角度值，最后通过postInvalidate()不断刷新界面。 当我们手指快速一滑时，会回调onFling()方法，当Math.abs(velocityX) &gt; Math.abs(velocityY)是左右快速滑动，否则是上下快速滑动，然后在调用scroller.fling()方法让它实现平顺的滑动一段距离，然后待会回调如下方法： 12345678910111213141516171819@Overridepublic void computeScroll() &#123; if (scroller.computeScrollOffset()) &#123; int x = scroller.getCurrX(); int y = scroller.getCurrY(); double tempRadius = 0; int max = Math.max(Math.abs(x), Math.abs(y)); double rotateDis = CIRCLE_ANGLE * (Math.abs(max - mFlingPoint) / mPerimeter); if (angleStatus == 0) &#123; tempRadius = rotateDis; &#125; else if (angleStatus == 1) &#123; tempRadius = -rotateDis; &#125; for (int i = 0; i &lt; listAngle.length; i++) &#123; listAngle[i] += (tempRadius); &#125; postInvalidate(); &#125;&#125; 获取当前X值和Y值，比较拿到最大值，再通过Math.abs(max - mFlingPoint)/radius算出大概的角度值，angleStatus是用来判断方向的，最后还是遍历所有角，来改变所有的角度，通过postInvalidate()不断的刷新界面。这就实现了快速一滑的效果的。 最后就是刚加载的动画了，代码如下： 1234567891011121314151617181920212223242526272829303132public void loadStartAnimator() &#123; ValueAnimator alphaAnimator = ValueAnimator.ofInt(0, 225); alphaAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator valueAnimator) &#123; mBroadAlpha = (int) valueAnimator.getAnimatedValue(); postInvalidate(); &#125; &#125;); final ValueAnimator radiusAnimator = ValueAnimator.ofFloat(0, radius); radiusAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator valueAnimator) &#123; radius = (Float) valueAnimator.getAnimatedValue(); postInvalidate(); &#125; &#125;); final ValueAnimator marginAnimator = ValueAnimator.ofFloat(0, margin); marginAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator valueAnimator) &#123; margin = (Float) valueAnimator.getAnimatedValue(); postInvalidate(); &#125; &#125;); alphaAnimator.setDuration(duration); radiusAnimator.setDuration(duration); marginAnimator.setDuration(duration); alphaAnimator.start(); radiusAnimator.start(); marginAnimator.start();&#125; 通过ValueAnimator根据动画持续的总时间内产生多个时间因子，即mBroadAlpha(透明度)，radius(半径)，margin(雷达边的间距)在一段时间内不同改变，再通过postInvalidate()不断刷新界面，从而产生动画效果。 最后奉上源码，大家有什么不懂可以看源码https://github.com/jack921/RadarView 我的博客即将搬运同步至腾讯云+社区，邀请大家一同入驻：https://cloud.tencent.com/developer/support-plan?invite_code=c1gcqall6knk","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/tags/Android自定义控件/"}]},{"title":"刨解OkHttp之缓存机制","slug":"刨解OkHttp之缓存机制","date":"2018-07-13T07:09:35.000Z","updated":"2018-09-23T14:39:32.706Z","comments":true,"path":"2018/07/13/刨解OkHttp之缓存机制/","link":"","permalink":"http://jack921.win/2018/07/13/刨解OkHttp之缓存机制/","excerpt":"","text":"时间一晃而过，今天想给大家带来OkHttp的zuihou最后一篇文章，主要讲一下OkHttp的缓存机制。OkHttp的责任链中有一个拦截器就是专门应对OkHttp的缓存的，那就是CacheInterceptor拦截器。 CacheInterceptor其对应的方法如下，我们就从这个方法讲起：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109public Response intercept(Chain chain) throws IOException &#123; //假如有缓存，会得到拿到缓存，否则为null Response cacheCandidate = cache != null ? cache.get(chain.request()) : null; long now = System.currentTimeMillis(); //获取缓存策略 CacheStrategy strategy = new CacheStrategy.Factory(now, chain.request(), cacheCandidate).get(); //缓存策略请求 Request networkRequest = strategy.networkRequest; //缓存策略响应 Response cacheResponse = strategy.cacheResponse; //缓存非空判断 if (cache != null) &#123; cache.trackResponse(strategy); &#125; //本地缓存不为空并且缓存策略响应为空 if (cacheCandidate != null &amp;&amp; cacheResponse == null) &#123; closeQuietly(cacheCandidate.body()); // The cache candidate wasn&apos;t applicable. Close it. &#125; //缓存策略请求和缓存策略响应为空,禁止使用网络直接返回 // If we&apos;re forbidden from using the network and the cache is insufficient, fail. if (networkRequest == null &amp;&amp; cacheResponse == null) &#123; return new Response.Builder() .request(chain.request()) .protocol(Protocol.HTTP_1_1) .code(504) .message(&quot;Unsatisfiable Request (only-if-cached)&quot;) .body(Util.EMPTY_RESPONSE) .sentRequestAtMillis(-1L) .receivedResponseAtMillis(System.currentTimeMillis()) .build(); &#125; //缓存策略请求为空，即缓存有效则直接使用缓存不使用网络 // If we don&apos;t need the network, we&apos;re done. if (networkRequest == null) &#123; return cacheResponse.newBuilder() .cacheResponse(stripBody(cacheResponse)) .build(); &#125; //缓存无效，则执行下一个拦截器以获取请求 Response networkResponse = null; try &#123; networkResponse = chain.proceed(networkRequest); &#125; finally &#123; // If we&apos;re crashing on I/O or otherwise, don&apos;t leak the cache body. if (networkResponse == null &amp;&amp; cacheCandidate != null) &#123; closeQuietly(cacheCandidate.body()); &#125; &#125; //假如本地也有缓存，则根据条件选择使用哪个响应 // If we have a cache response too, then we&apos;re doing a conditional get. if (cacheResponse != null) &#123; if (networkResponse.code() == HTTP_NOT_MODIFIED) &#123; Response response = cacheResponse.newBuilder() .headers(combine(cacheResponse.headers(), networkResponse.headers())) .sentRequestAtMillis(networkResponse.sentRequestAtMillis()) .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis()) .cacheResponse(stripBody(cacheResponse)) .networkResponse(stripBody(networkResponse)) .build(); networkResponse.body().close(); // Update the cache after combining headers but before stripping the // Content-Encoding header (as performed by initContentStream()). cache.trackConditionalCacheHit(); //更新缓存 cache.update(cacheResponse, response); return response; &#125; else &#123; closeQuietly(cacheResponse.body()); &#125; &#125; //没有缓存，则直接使用网络响应 Response response = networkResponse.newBuilder() .cacheResponse(stripBody(cacheResponse)) .networkResponse(stripBody(networkResponse)) .build(); if (cache != null) &#123; //缓存到本地 if (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) &#123; // Offer this request to the cache. CacheRequest cacheRequest = cache.put(response); return cacheWritingResponse(cacheRequest, response); &#125; if (HttpMethod.invalidatesCache(networkRequest.method())) &#123; try &#123; cache.remove(networkRequest); &#125; catch (IOException ignored) &#123; // The cache cannot be written. &#125; &#125; &#125; return response; &#125; 这就是整个缓存拦截器的主要方法，首先会从cache去拿缓存，没有则返回null,然后通过CacheStrategy来获取缓存策略，CacheStrategy根据之前缓存的结果与当前将要发送Request的header进行策略，并得出是否进行请求的结果。由于篇幅关系，这一块不细讲因为涉及网络协议，最终他的得出的规则如下如:因为我把注释流程都写在代码了，大家可以看上面方法代码理解，其整体缓存流程如下： 如果有缓存，则取出缓存否则为null 根据CacheStrategy拿到它的缓存策略请求和响应 缓存策略请求和缓存策略响应为空,禁止使用网络直接返回 缓存策略请求为空，即缓存有效则直接使用缓存不使用网络 缓存无效，则执行下一个拦截器以获取请求 假如本地也有缓存，则根据条件选择使用哪个响应，更新缓存 没有缓存，则直接使用网络响应 添加缓存 到这里我们可以看到，缓存的“增删改查”都是cache(Cache)类来进行操作的。下面让我们来看一下这个类吧。 ###CacheCache的“增删改查”其实都是基于DiskLruCache，下面我们会继续讲，先来看一下“增删改查”的各个方法吧 添加缓存 123456789101112131415161718192021222324252627282930313233343536CacheRequest put(Response response) &#123; String requestMethod = response.request().method(); //如果请求是&quot;POST&quot;,&quot;PUT&quot;,&quot;PATCH&quot;,&quot;PROPPATCH&quot;,&quot;REPORT&quot;则移除这些缓存 if (HttpMethod.invalidatesCache(response.request().method())) &#123; try &#123; remove(response.request()); &#125; catch (IOException ignored) &#123; &#125; return null; &#125; //仅支持GET的请求缓存，其他请求不缓存 if (!requestMethod.equals(&quot;GET&quot;)) &#123; return null; &#125; //判断请求中的http数据包中headers是否有符号&quot;*&quot;的通配符，有则不缓存 if (HttpHeaders.hasVaryAll(response)) &#123; return null; &#125; //把response构建成一个Entry对象 Entry entry = new Entry(response); DiskLruCache.Editor editor = null; try &#123; //生成DiskLruCache.Editor对象 editor = cache.edit(key(response.request().url())); if (editor == null) &#123; return null; &#125; //对缓存进行写入 entry.writeTo(editor); //构建一个CacheRequestImpl类，包含Ok.io的Sink对象 return new CacheRequestImpl(editor); &#125; catch (IOException e) &#123; abortQuietly(editor); return null; &#125; &#125; 得到缓存 123456789101112131415161718192021222324252627282930Response get(Request request) &#123; //获取url转换过来的key String key = key(request.url()); DiskLruCache.Snapshot snapshot; Entry entry; try &#123; //根据key获取对应的snapshot snapshot = cache.get(key); if (snapshot == null) &#123; return null; &#125; &#125; catch (IOException e) &#123; return null; &#125; try &#123; //创建一个Entry对象,并由snapshot.getSource()获取Sink entry = new Entry(snapshot.getSource(ENTRY_METADATA)); &#125; catch (IOException e) &#123; Util.closeQuietly(snapshot); return null; &#125; //通过entry和response生成respson，通过Okio.buffer获取请求体，然后封装各种请求信息 Response response = entry.response(snapshot); if (!entry.matches(request, response)) &#123; //对request和Response进行比配检查，成功则返回该Response。 Util.closeQuietly(response.body()); return null; &#125; return response; &#125; 更新缓存 123456789101112131415161718void update(Response cached, Response network) &#123; //用Respon构建一个Entry Entry entry = new Entry(network); //从缓存中获取DiskLruCache.Snapshot DiskLruCache.Snapshot snapshot = ((CacheResponseBody) cached.body()).snapshot; DiskLruCache.Editor editor = null; try &#123; //获取DiskLruCache.Snapshot.edit对象 editor = snapshot.edit(); // Returns null if snapshot is not current. if (editor != null) &#123; //将entry写入editor中 entry.writeTo(editor); editor.commit(); &#125; &#125; catch (IOException e) &#123; abortQuietly(editor); &#125; &#125; 删除缓存 1234void remove(Request request) throws IOException &#123; //通过url转化成的key去删除缓存 cache.remove(key(request.url())); &#125; Cache的”增删改查”大体通过注释代码的方式给出，Cache还有一个更重要的缓存处理类就是DiskLruCache。 DiskLruCache不仔细看还以为这个类和JakeWharton写的DiskLruCache:[https://link.jianshu.com/t=https://github.com/JakeWharton/DiskLruCache(https://link.jianshu.com/t=https://github.com/JakeWharton/DiskLruCache)是一样的，其实主体架构差不多，只不过OkHttp的DiskLruCache结合了Ok.io，用Ok.io处理数据文件的储存.我们可以看到上面的DiskLruCache有shang三个内部类，分别是Entry，Snapshot，Editor。 ###Entry12345678910111213141516171819202122232425262728293031323334353637final String key; /** Lengths of this entry&apos;s files. */ final long[] lengths; final File[] cleanFiles; final File[] dirtyFiles; /** True if this entry has ever been published. */ boolean readable; /** The ongoing edit or null if this entry is not being edited. */ Editor currentEditor; /** The sequence number of the most recently committed edit to this entry. */ long sequenceNumber; Entry(String key) &#123; this.key = key; lengths = new long[valueCount]; cleanFiles = new File[valueCount]; dirtyFiles = new File[valueCount]; // The names are repetitive so re-use the same builder to avoid allocations. StringBuilder fileBuilder = new StringBuilder(key).append(&apos;.&apos;); int truncateTo = fileBuilder.length(); for (int i = 0; i &lt; valueCount; i++) &#123; fileBuilder.append(i); cleanFiles[i] = new File(directory, fileBuilder.toString()); fileBuilder.append(&quot;.tmp&quot;); dirtyFiles[i] = new File(directory, fileBuilder.toString()); fileBuilder.setLength(truncateTo); &#125; &#125; //省略 ...... 实际上只是用于存储缓存数据的实体类，一个url对应一个实体,在Entry还有Snapshot对象，代码如下:12345678910111213141516171819202122232425262728Snapshot snapshot() &#123; if (!Thread.holdsLock(DiskLruCache.this)) throw new AssertionError(); Source[] sources = new Source[valueCount]; long[] lengths = this.lengths.clone(); // Defensive copy since these can be zeroed out. try &#123; for (int i = 0; i &lt; valueCount; i++) &#123; sources[i] = fileSystem.source(cleanFiles[i]); &#125; return new Snapshot(key, sequenceNumber, sources, lengths); &#125; catch (FileNotFoundException e) &#123; // A file must have been deleted manually! for (int i = 0; i &lt; valueCount; i++) &#123; if (sources[i] != null) &#123; Util.closeQuietly(sources[i]); &#125; else &#123; break; &#125; &#125; // Since the entry is no longer valid, remove it so the metadata is accurate (i.e. the cache // size.) try &#123; removeEntry(this); &#125; catch (IOException ignored) &#123; &#125; return null; &#125; &#125; 即一个Entry对应着一个Snapshot对象，在看一下Snapshot的内部代码：1234567891011121314151617181920212223242526272829303132333435363738394041public final class Snapshot implements Closeable &#123; private final String key; private final long sequenceNumber; private final Source[] sources; private final long[] lengths; Snapshot(String key, long sequenceNumber, Source[] sources, long[] lengths) &#123; this.key = key; this.sequenceNumber = sequenceNumber; this.sources = sources; this.lengths = lengths; &#125; public String key() &#123; return key; &#125; /** * Returns an editor for this snapshot&apos;s entry, or null if either the entry has changed since * this snapshot was created or if another edit is in progress. */ public @Nullable Editor edit() throws IOException &#123; return DiskLruCache.this.edit(key, sequenceNumber); &#125; /** Returns the unbuffered stream with the value for &#123;@code index&#125;. */ public Source getSource(int index) &#123; return sources[index]; &#125; /** Returns the byte length of the value for &#123;@code index&#125;. */ public long getLength(int index) &#123; return lengths[index]; &#125; public void close() &#123; for (Source in : sources) &#123; Util.closeQuietly(in); &#125; &#125; &#125; 初始化的Snapshot仅仅只是存储了一些变量而已。 ###Editor在Editor的初始化中要传入Editor，其实Editor就是编辑entry的类。源码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107public final class Editor &#123; final Entry entry; final boolean[] written; private boolean done; Editor(Entry entry) &#123; this.entry = entry; this.written = (entry.readable) ? null : new boolean[valueCount]; &#125; void detach() &#123; if (entry.currentEditor == this) &#123; for (int i = 0; i &lt; valueCount; i++) &#123; try &#123; fileSystem.delete(entry.dirtyFiles[i]); &#125; catch (IOException e) &#123; // This file is potentially leaked. Not much we can do about that. &#125; &#125; entry.currentEditor = null; &#125; &#125; //返回指定index的cleanFile的读入流 public Source newSource(int index) &#123; synchronized (DiskLruCache.this) &#123; if (done) &#123; throw new IllegalStateException(); &#125; if (!entry.readable || entry.currentEditor != this) &#123; return null; &#125; try &#123; return fileSystem.source(entry.cleanFiles[index]); &#125; catch (FileNotFoundException e) &#123; return null; &#125; &#125; &#125; //向指定index的dirtyFiles文件写入数据 public Sink newSink(int index) &#123; synchronized (DiskLruCache.this) &#123; if (done) &#123; throw new IllegalStateException(); &#125; if (entry.currentEditor != this) &#123; return Okio.blackhole(); &#125; if (!entry.readable) &#123; written[index] = true; &#125; File dirtyFile = entry.dirtyFiles[index]; Sink sink; try &#123; sink = fileSystem.sink(dirtyFile); &#125; catch (FileNotFoundException e) &#123; return Okio.blackhole(); &#125; return new FaultHidingSink(sink) &#123; @Override protected void onException(IOException e) &#123; synchronized (DiskLruCache.this) &#123; detach(); &#125; &#125; &#125;; &#125; &#125; //这里执行的工作是提交数据，并释放锁，最后通知DiskLruCache刷新相关数据 public void commit() throws IOException &#123; synchronized (DiskLruCache.this) &#123; if (done) &#123; throw new IllegalStateException(); &#125; if (entry.currentEditor == this) &#123; completeEdit(this, true); &#125; done = true; &#125; &#125; //终止编辑，并释放锁 public void abort() throws IOException &#123; synchronized (DiskLruCache.this) &#123; if (done) &#123; throw new IllegalStateException(); &#125; if (entry.currentEditor == this) &#123; completeEdit(this, false); &#125; done = true; &#125; &#125; //除非正在编辑，否则终止 public void abortUnlessCommitted() &#123; synchronized (DiskLruCache.this) &#123; if (!done &amp;&amp; entry.currentEditor == this) &#123; try &#123; completeEdit(this, false); &#125; catch (IOException ignored) &#123; &#125; &#125; &#125; &#125; &#125; 各个方法对应作用如下： Source newSource(int index)：返回指定index的cleanFile的读入流 Sink newSink(int index)：向指定index的dirtyFiles文件写入数据 commit()：这里执行的工作是提交数据，并释放锁，最后通知DiskLruCache刷新相关数据 abort()：终止编辑，并释放锁 abortUnlessCommitted()：除非正在编辑，否则终止 剩下关键来了，还记得上面我们讲Cache添加有一行代码entry.writeTo(editor);，里面操作如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445public void writeTo(DiskLruCache.Editor editor) throws IOException &#123; BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA)); sink.writeUtf8(url) .writeByte(&apos;\\n&apos;); sink.writeUtf8(requestMethod) .writeByte(&apos;\\n&apos;); sink.writeDecimalLong(varyHeaders.size()) .writeByte(&apos;\\n&apos;); for (int i = 0, size = varyHeaders.size(); i &lt; size; i++) &#123; sink.writeUtf8(varyHeaders.name(i)) .writeUtf8(&quot;: &quot;) .writeUtf8(varyHeaders.value(i)) .writeByte(&apos;\\n&apos;); &#125; sink.writeUtf8(new StatusLine(protocol, code, message).toString()) .writeByte(&apos;\\n&apos;); sink.writeDecimalLong(responseHeaders.size() + 2) .writeByte(&apos;\\n&apos;); for (int i = 0, size = responseHeaders.size(); i &lt; size; i++) &#123; sink.writeUtf8(responseHeaders.name(i)) .writeUtf8(&quot;: &quot;) .writeUtf8(responseHeaders.value(i)) .writeByte(&apos;\\n&apos;); &#125; sink.writeUtf8(SENT_MILLIS) .writeUtf8(&quot;: &quot;) .writeDecimalLong(sentRequestMillis) .writeByte(&apos;\\n&apos;); sink.writeUtf8(RECEIVED_MILLIS) .writeUtf8(&quot;: &quot;) .writeDecimalLong(receivedResponseMillis) .writeByte(&apos;\\n&apos;); if (isHttps()) &#123; sink.writeByte(&apos;\\n&apos;); sink.writeUtf8(handshake.cipherSuite().javaName()) .writeByte(&apos;\\n&apos;); writeCertList(sink, handshake.peerCertificates()); writeCertList(sink, handshake.localCertificates()); sink.writeUtf8(handshake.tlsVersion().javaName()).writeByte(&apos;\\n&apos;); &#125; sink.close(); &#125; 上面的都是Ok.io的操作了，不懂OK.io的可以去看一下相关知识。BufferedSink sink = Okio.buffer(editor.newSink(ENTRY_METADATA));editor.newSink拿到ok.io版的OutputStream(Sink)生成Ok.io的输入类，剩下的就是把数据用ok.io写入文件，然后关闭输出类。 同理我看们可以一下上面Cache获取缓存的代码 Response response = entry.response(snapshot);，在response方法里又有一个方法：CacheResponseBody()就是获取缓存的方法，代码如下：12345678910111213CacheResponseBody(final DiskLruCache.Snapshot snapshot,String contentType, String contentLength) &#123; this.snapshot = snapshot; this.contentType = contentType; this.contentLength = contentLength; Source source = snapshot.getSource(ENTRY_BODY); bodySource = Okio.buffer(new ForwardingSource(source) &#123; @Override public void close() throws IOException &#123; snapshot.close(); super.close(); &#125; &#125;); &#125; new ForwardingSource(source)相当于传入ok.io版的InputStream(Source)生成Ok.io的读取类，剩下的都是读取缓存数据然后生成Response. 而上面Cache的Update()方法，其写入过程也和上面的添加是一样的，不同的只不过先构造成一个就得Entry然后再把新的缓存写上去更新而已，因为涉及我重要的Ok.io是一样的，所以不细讲。 剩下就是删除了，在Cache的delete方法里，在removeEntry就是执行删除操作，代码如下：12345678910boolean removeEntry(Entry entry) throws IOException &#123; //省略 journalWriter.writeUtf8(REMOVE).writeByte(&apos; &apos;).writeUtf8(entry.key).writeByte(&apos;\\n&apos;); lruEntries.remove(entry.key); //省略 return true; &#125; 上面这两句代码就是删除的关键， journalWriter.writeUtf8表示在DiskLruCache的本地缓存清单列表里删除，lruEntries.remove表示在缓存内存里删除。 到此增删给查的流程基本结束，其实DiskLruCache还有很多可以讲，但是我的重心是OKhttp的缓存底层是用Ok.io,为此在这里点到为止。 内容有点多，如有错误请多多指出","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://jack921.win/tags/android/"}]},{"title":"刨解OkHttp之访问连接","slug":"刨解OkHttp之访问连接","date":"2018-05-23T11:42:45.000Z","updated":"2018-09-23T14:38:18.379Z","comments":true,"path":"2018/05/23/刨解OkHttp之访问连接/","link":"","permalink":"http://jack921.win/2018/05/23/刨解OkHttp之访问连接/","excerpt":"","text":"因为OkHttp能讲的东西太多了，上一篇文章只是讲到了他的设计架构即责任链模式和异步多线程网络访问，这对于OkHttp只是冰山一角，对于一个网络请求框架，最重要的就是网络访问了，为此我们来说一下Okttp网络访问的一些细节。 这个访问分为两个部分，一个部分是与服务器形成连接，另一个部分是与服务器进行交互。与服务器连接的是ConnectInterceptor拦截器，而与服务器交互的是CallServerInterceptor拦截器。我们就来讲一下这两个拦截器吧。 ConnectInterceptor先看源码: 12345678910111213141516171819public final class ConnectInterceptor implements Interceptor &#123; public final OkHttpClient client; public ConnectInterceptor(OkHttpClient client) &#123; this.client = client; &#125; @Override public Response intercept(Chain chain) throws IOException &#123; RealInterceptorChain realChain = (RealInterceptorChain) chain; Request request = realChain.request(); StreamAllocation streamAllocation = realChain.streamAllocation(); boolean doExtensiveHealthChecks = !request.method().equals(&quot;GET&quot;); HttpCodec httpCodec = streamAllocation.newStream(client, doExtensiveHealthChecks); RealConnection connection = streamAllocation.connection(); return realChain.proceed(request, streamAllocation, httpCodec, connection); &#125;&#125; 这里看起来很简单，就是给首先StreamAllocation赋值，然后调用newStream()方法，那streamAllocation是什么东西呢？它是整个连接的中心,协调着几个重要的类。后面都会说。我们看一下newStream()方法:12345678910111213141516171819public HttpCodec newStream(OkHttpClient client, boolean doExtensiveHealthChecks) &#123; int connectTimeout = client.connectTimeoutMillis(); int readTimeout = client.readTimeoutMillis(); int writeTimeout = client.writeTimeoutMillis(); boolean connectionRetryEnabled = client.retryOnConnectionFailure(); try &#123; RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled, doExtensiveHealthChecks); HttpCodec resultCodec = resultConnection.newCodec(client, this); synchronized (connectionPool) &#123; codec = resultCodec; return resultCodec; &#125; &#125; catch (IOException e) &#123; throw new RouteException(e); &#125;&#125; 通过看代码我们有追溯findHealthyConnection()方法,源码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778private RealConnection findHealthyConnection(int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled, boolean doExtensiveHealthChecks) throws IOException &#123; while (true) &#123; RealConnection candidate = findConnection(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled); synchronized (connectionPool) &#123; if (candidate.successCount == 0) &#123; return candidate; &#125; &#125; if (!candidate.isHealthy(doExtensiveHealthChecks)) &#123; noNewStreams(); continue; &#125; return candidate; &#125;&#125; private RealConnection findConnection(int connectTimeout, int readTimeout, int writeTimeout,boolean connectionRetryEnabled) throws IOException &#123; Route selectedRoute; synchronized (connectionPool) &#123; if (released) throw new IllegalStateException(&quot;released&quot;); if (codec != null) throw new IllegalStateException(&quot;codec != null&quot;); if (canceled) throw new IOException(&quot;Canceled&quot;); RealConnection allocatedConnection = this.connection; if (allocatedConnection != null &amp;&amp; !allocatedConnection.noNewStreams) &#123; return allocatedConnection; &#125; Internal.instance.get(connectionPool, address, this, null); if (connection != null) &#123; return connection; &#125; selectedRoute = route; &#125; if (selectedRoute == null) &#123; selectedRoute = routeSelector.next(); &#125; RealConnection result; synchronized (connectionPool) &#123; if (canceled) throw new IOException(&quot;Canceled&quot;); Internal.instance.get(connectionPool, address, this, selectedRoute); if (connection != null) &#123; route = selectedRoute; return connection; &#125; route = selectedRoute; refusedStreamCount = 0; result = new RealConnection(connectionPool, selectedRoute); acquire(result); &#125; result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled); routeDatabase().connected(result.route()); Socket socket = null; synchronized (connectionPool) &#123; Internal.instance.put(connectionPool, result); if (result.isMultiplexed()) &#123; socket = Internal.instance.deduplicate(connectionPool, address, this); result = connection; &#125; &#125; closeQuietly(socket); return result;&#125; 在findHealthyConnection()里通过while(true)不断调用findConnection()去获取健康可用的RealConnection。RealConnection是与服务器连接的一个socket的连接，有和这个就可以进行三次握手的tcp连接，所以上面的result.connect(connectTimeout, readTimeout, writeTimeout, connectionRetryEnabled);这一行很关键，就是socket连接服务器的关键代码，具体里面的代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293public void connect( int connectTimeout, int readTimeout, int writeTimeout, boolean connectionRetryEnabled) &#123; //省略代码 while (true) &#123; try &#123; if (route.requiresTunnel()) &#123; connectTunnel(connectTimeout, readTimeout, writeTimeout); &#125; else &#123; connectSocket(connectTimeout, readTimeout); &#125; establishProtocol(connectionSpecSelector); break; &#125; catch (IOException e) &#123; //省略代码 &#125; &#125; if (http2Connection != null) &#123; synchronized (connectionPool) &#123; allocationLimit = http2Connection.maxConcurrentStreams(); &#125; &#125; &#125;private void connectTunnel(int connectTimeout, int readTimeout, int writeTimeout) throws IOException &#123; Request tunnelRequest = createTunnelRequest(); HttpUrl url = tunnelRequest.url(); int attemptedConnections = 0; int maxAttempts = 21; while (true) &#123; if (++attemptedConnections &gt; maxAttempts) &#123; throw new ProtocolException(&quot;Too many tunnel connections attempted: &quot; + maxAttempts); &#125; connectSocket(connectTimeout, readTimeout); tunnelRequest = createTunnel(readTimeout, writeTimeout, tunnelRequest, url); if (tunnelRequest == null) break; closeQuietly(rawSocket); rawSocket = null; sink = null; source = null; &#125; &#125;private void connectSocket(int connectTimeout, int readTimeout) throws IOException &#123; Proxy proxy = route.proxy(); Address address = route.address(); rawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP ? address.socketFactory().createSocket() : new Socket(proxy); rawSocket.setSoTimeout(readTimeout); try &#123; Platform.get().connectSocket(rawSocket, route.socketAddress(), connectTimeout); &#125; catch (ConnectException e) &#123; ConnectException ce = new ConnectException(&quot;Failed to connect to &quot; + route.socketAddress()); ce.initCause(e); throw ce; &#125; try &#123; source = Okio.buffer(Okio.source(rawSocket)); sink = Okio.buffer(Okio.sink(rawSocket)); &#125; catch (NullPointerException npe) &#123; if (NPE_THROW_WITH_NULL.equals(npe.getMessage())) &#123; throw new IOException(npe); &#125; &#125;&#125; private void establishProtocol(ConnectionSpecSelector connectionSpecSelector) throws IOException &#123; if (route.address().sslSocketFactory() == null) &#123; protocol = Protocol.HTTP_1_1; socket = rawSocket; return; &#125; connectTls(connectionSpecSelector); if (protocol == Protocol.HTTP_2) &#123; socket.setSoTimeout(0); // HTTP/2 connection timeouts are set per-stream. http2Connection = new Http2Connection.Builder(true) .socket(socket, route.address().url().host(), source, sink) .listener(this) .build(); http2Connection.start(); &#125;&#125; 不管是直接调用connectSocket()还是connectTunnel(),最终都会调connectSocket()方法然后通过 Platform.get().connectSocket()(rawSocket, route.socketAddress(), connectTimeout);进行Socket连接。Platform.get().connectSocket()对应代码如下: 1234public void connectSocket(Socket socket, InetSocketAddress address, int connectTimeout) throws IOException &#123; socket.connect(address, connectTimeout); &#125; 然后有调用了establishProtocol(),起始最主要的就是初始化Http2Connection对象.接着返回StreamAllocation，下一步就是HttpCodec resultCodec = resultConnection.newCodec(client, this);newCodec()源码如下： 12345678910public HttpCodec newCodec(OkHttpClient client, StreamAllocation streamAllocation) throws SocketException &#123; if (http2Connection != null) &#123; return new Http2Codec(client, streamAllocation, http2Connection); &#125; else &#123; socket.setSoTimeout(client.readTimeoutMillis()); source.timeout().timeout(client.readTimeoutMillis(), MILLISECONDS); sink.timeout().timeout(client.writeTimeoutMillis(), MILLISECONDS); return new Http1Codec(client, streamAllocation, source, sink); &#125;&#125; 其实没什么，也就是初始化Http1Codec或Http2Codec对象，这两个类都集成接口类HttpCodec，典型的面向接口编程，我们看一下接口类是什么： 1234567891011121314151617public interface HttpCodec &#123; int DISCARD_STREAM_TIMEOUT_MILLIS = 100; //写入请求体 Sink createRequestBody(Request request, long contentLength); //写入请求头 void writeRequestHeaders(Request request) throws IOException; //相当于flush,把请求刷入底层socket void flushRequest() throws IOException; //相当于flush，把请求输入底层socket并不在发出请求 void finishRequest() throws IOException; //读取响应头 Response.Builder readResponseHeaders(boolean expectContinue) throws IOException; //读取响应体 ResponseBody openResponseBody(Response response) throws IOException; //取消请求 void cancel();&#125; 有方法知道HttpCodec是网络读写的管理类，而Http1Codec和Http2Codec分别对应Http1和Http2,在后面的CallServerInterceptor就主要用这个类进行操作。最后ConnectInterceptor的RealConnection connection = streamAllocation.connection();只是获取了前面生成的RealConnection，然后通过前一篇介绍的责任链模式传给CallServerInterceptor。 CallServerInterceptor前面的ConnectInterceptor只是socket连接了服务器,而连接后怎么操作就是CallServerInterceptor了,接着我们看一下其实现方法: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960@Override public Response intercept(Chain chain) throws IOException &#123; //省略代码。。。 //写入请求头 httpCodec.writeRequestHeaders(request); Response.Builder responseBuilder = null; if (HttpMethod.permitsRequestBody(request.method()) &amp;&amp; request.body() != null) &#123; if (&quot;100-continue&quot;.equalsIgnoreCase(request.header(&quot;Expect&quot;))) &#123; httpCodec.flushRequest(); responseBuilder = httpCodec.readResponseHeaders(true); &#125; //写入请求体 if (responseBuilder == null) &#123; Sink requestBodyOut = httpCodec.createRequestBody(request, request.body().contentLength()); BufferedSink bufferedRequestBody = Okio.buffer(requestBodyOut); request.body().writeTo(bufferedRequestBody); bufferedRequestBody.close(); &#125; else if (!connection.isMultiplexed()) &#123; streamAllocation.noNewStreams(); &#125; &#125; httpCodec.finishRequest(); //读取响应头 if (responseBuilder == null) &#123; responseBuilder = httpCodec.readResponseHeaders(false); &#125; Response response = responseBuilder .request(request) .handshake(streamAllocation.connection().handshake()) .sentRequestAtMillis(sentRequestMillis) .receivedResponseAtMillis(System.currentTimeMillis()) .build(); //读取响应体 int code = response.code(); if (forWebSocket &amp;&amp; code == 101) &#123; response = response.newBuilder() .body(Util.EMPTY_RESPONSE) .build(); &#125; else &#123; response = response.newBuilder() .body(httpCodec.openResponseBody(response)) .build(); &#125; if (&quot;close&quot;.equalsIgnoreCase(response.request().header(&quot;Connection&quot;)) || &quot;close&quot;.equalsIgnoreCase(response.header(&quot;Connection&quot;))) &#123; streamAllocation.noNewStreams(); &#125; if ((code == 204 || code == 205) &amp;&amp; response.body().contentLength() &gt; 0) &#123; throw new ProtocolException( &quot;HTTP &quot; + code + &quot; had non-zero Content-Length: &quot; + response.body().contentLength()); &#125; return response;&#125; 这里有一个东西需要讲，就是Socket连接了服务器之后，是通过Okio向服务器发送请求的。再次列取writeRequestHeaders()方法，源码如下： 12345678910111213141516171819@Overridepublic void writeRequestHeaders(Request request) throws IOException &#123; String requestLine = RequestLine.get( request, streamAllocation.connection().route().proxy().type()); writeRequest(request.headers(), requestLine);&#125;public void writeRequest(Headers headers, String requestLine) throws IOException &#123; if (state != STATE_IDLE) throw new IllegalStateException(&quot;state: &quot; + state); sink.writeUtf8(requestLine).writeUtf8(&quot;\\r\\n&quot;); for (int i = 0, size = headers.size(); i &lt; size; i++) &#123; sink.writeUtf8(headers.name(i)) .writeUtf8(&quot;: &quot;) .writeUtf8(headers.value(i)) .writeUtf8(&quot;\\r\\n&quot;); &#125; sink.writeUtf8(&quot;\\r\\n&quot;); state = STATE_OPEN_REQUEST_BODY;&#125; 而sink就是在ConnectInterceptor已经初始化完成了，就在上面的connectSocket()连接服务器的方法里12source = Okio.buffer(Okio.source(rawSocket));sink = Okio.buffer(Okio.sink(rawSocket)); 其中sink是向服务器写数据，而source是获取服务器数据，rawSocket就是我们与服务器保持连接socker,okio我只会点到为止，不然又要开新的一篇讲解了。createRequestBody()的原理和writeRequestHeaders()是一样的。接着就是接收数据了，读取响应头readResponseHeaders()和上面原理一样的，值得讲的是读取响应体httpCodec.openResponseBody(response)，里面的源码如下： 12345678910111213141516171819202122@Override public ResponseBody openResponseBody(Response response) throws IOException &#123; Source source = getTransferStream(response); return new RealResponseBody(response.headers(), Okio.buffer(source));&#125;private Source getTransferStream(Response response) throws IOException &#123; if (!HttpHeaders.hasBody(response)) &#123; return newFixedLengthSource(0); &#125; if (&quot;chunked&quot;.equalsIgnoreCase(response.header(&quot;Transfer-Encoding&quot;))) &#123; return newChunkedSource(response.request().url()); &#125; long contentLength = HttpHeaders.contentLength(response); if (contentLength != -1) &#123; return newFixedLengthSource(contentLength); &#125; return newUnknownLengthSource();&#125; 其实没有做任何的读取操作，只是ResponseBody封装了headers()获取响应头和Source对象，而Source就可以获取响应体，只是没有马上获取而是封装好传递给上一个拦截器。最后在哪里获取响应体呢，回到上一篇刚开始最简单的访问网络demo 123Request request = new Request.Builder().url(url).build();Response response = client.newCall(request).execute();return response.body().string(); 我们看一下body().toString()这个方法 12345678910111213public @Nullable ResponseBody body() &#123; return body;&#125;public final String string() throws IOException &#123; BufferedSource source = source(); try &#123; Charset charset = Util.bomAwareCharset(source, charset()); return source.readString(charset); &#125; finally &#123; Util.closeQuietly(source); &#125;&#125; source就是Okio的读对象对应上面的source = Okio.buffer(Okio.source(rawSocket));,bomAwareCharset是获取字符类型，默认utf-8,调用source.readString(charset);就可以获取他的请求体了，也就是请求内容字符串。closeQuietly()最终这个读对象，整个访问流程也基本结束了。 内容有点多，自身感觉讲解的也仅讲了最主要的部分，很多东西还可以扩展却因为篇幅没说，请见谅。","categories":[],"tags":[{"name":"android","slug":"android","permalink":"http://jack921.win/tags/android/"}]},{"title":"刨解OkHttp框架","slug":"刨解OkHttp框架","date":"2018-05-22T07:14:15.000Z","updated":"2018-09-23T14:13:22.198Z","comments":true,"path":"2018/05/22/刨解OkHttp框架/","link":"","permalink":"http://jack921.win/2018/05/22/刨解OkHttp框架/","excerpt":"","text":"继AsyncTask,又把手术刀指向OkHttp,有时候解析源码会上瘾。因为源码里包含的东西仿佛就是组成计算机世界的砖头，水分，只要有这些东西，就可以保罗万物，无招胜有招。又说多了，开始吧 首先okhttp的依赖是: 1compile &apos;com.squareup.okhttp3:okhttp:3.8.1&apos; 我就是根据这里的源码进行解析的。 再来也很简单，就是最简单的OkHttp的同步和异步网络访问： 123456789101112131415161718192021OkHttpClient client = new OkHttpClient(); //同步网络访问public String Synch(String url) throws IOException &#123; Request request = new Request.Builder().url(url).build(); Response response = client.newCall(request).execute(); return response.body().string();&#125;//异步网络访问public void Async(String url) throws IOException &#123; Request request = new Request.Builder().url(url).build(); client.newCall(request).enqueue(new Callback() &#123; @Override public void onFailure(Call call, IOException e) &#123;&#125; @Override public void onResponse(Call call, Response response) throws IOException &#123; Log.e(&quot;response&quot;,response.body().string()); &#125; &#125;);&#125; OkHttpClient我们首先是定义OkHttpClient，通过看源码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101public OkHttpClient() &#123; this(new Builder());&#125; public static final class Builder &#123; Dispatcher dispatcher; @Nullable Proxy proxy; List&lt;Protocol&gt; protocols; List&lt;ConnectionSpec&gt; connectionSpecs; final List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;(); final List&lt;Interceptor&gt; networkInterceptors = new ArrayList&lt;&gt;(); EventListener.Factory eventListenerFactory; ProxySelector proxySelector; CookieJar cookieJar; @Nullable Cache cache; @Nullable InternalCache internalCache; SocketFactory socketFactory; @Nullable SSLSocketFactory sslSocketFactory; @Nullable CertificateChainCleaner certificateChainCleaner; HostnameVerifier hostnameVerifier; CertificatePinner certificatePinner; Authenticator proxyAuthenticator; Authenticator authenticator; ConnectionPool connectionPool; Dns dns; boolean followSslRedirects; boolean followRedirects; boolean retryOnConnectionFailure; int connectTimeout; int readTimeout; int writeTimeout; int pingInterval; public Builder() &#123; dispatcher = new Dispatcher(); protocols = DEFAULT_PROTOCOLS; connectionSpecs = DEFAULT_CONNECTION_SPECS; eventListenerFactory = EventListener.factory(EventListener.NONE); proxySelector = ProxySelector.getDefault(); cookieJar = CookieJar.NO_COOKIES; socketFactory = SocketFactory.getDefault(); hostnameVerifier = OkHostnameVerifier.INSTANCE; certificatePinner = CertificatePinner.DEFAULT; proxyAuthenticator = Authenticator.NONE; authenticator = Authenticator.NONE; connectionPool = new ConnectionPool(); dns = Dns.SYSTEM; followSslRedirects = true; followRedirects = true; retryOnConnectionFailure = true; connectTimeout = 10_000; readTimeout = 10_000; writeTimeout = 10_000; pingInterval = 0; &#125; &#125;OkHttpClient(Builder builder) &#123; this.dispatcher = builder.dispatcher; this.proxy = builder.proxy; this.protocols = builder.protocols; this.connectionSpecs = builder.connectionSpecs; this.interceptors = Util.immutableList(builder.interceptors); this.networkInterceptors = Util.immutableList(builder.networkInterceptors); this.eventListenerFactory = builder.eventListenerFactory; this.proxySelector = builder.proxySelector; this.cookieJar = builder.cookieJar; this.cache = builder.cache; this.internalCache = builder.internalCache; this.socketFactory = builder.socketFactory; boolean isTLS = false; for (ConnectionSpec spec : connectionSpecs) &#123; isTLS = isTLS || spec.isTls(); &#125; if (builder.sslSocketFactory != null || !isTLS) &#123; this.sslSocketFactory = builder.sslSocketFactory; this.certificateChainCleaner = builder.certificateChainCleaner; &#125; else &#123; X509TrustManager trustManager = systemDefaultTrustManager(); this.sslSocketFactory = systemDefaultSslSocketFactory(trustManager); this.certificateChainCleaner = CertificateChainCleaner.get(trustManager); &#125; this.hostnameVerifier = builder.hostnameVerifier; this.certificatePinner = builder.certificatePinner.withCertificateChainCleaner( certificateChainCleaner); this.proxyAuthenticator = builder.proxyAuthenticator; this.authenticator = builder.authenticator; this.connectionPool = builder.connectionPool; this.dns = builder.dns; this.followSslRedirects = builder.followSslRedirects; this.followRedirects = builder.followRedirects; this.retryOnConnectionFailure = builder.retryOnConnectionFailure; this.connectTimeout = builder.connectTimeout; this.readTimeout = builder.readTimeout; this.writeTimeout = builder.writeTimeout; this.pingInterval = builder.pingInterval;&#125; 看出OkHttpClient主要是进行各种参数的初始化，通过builder对象进行初始化再赋值给OkHttpClient。第二种也可以用建造者模式，初始化OkHttpClient，如下： 1OkHttpClient okHttpClient=new OkHttpClient.Builder().build(); 注意事项：OkHttpClient强烈建议全局单例使用，因为每一个OkHttpClient都有自己单独的连接池和线程池，复用连接池和线程池能够减少延迟、节省内存。 Request每一个HTTP请求包含一个URL、一个方法（GET或POST或其他）、一些HTTP头。请求还可能包含一个特定内容类型的数据类的主体部分。而 1Request request = new Request.Builder().url(url).build(); 和OkHttpClient一样,只是做这些东西的初始化。因为很简单，所以这就不像上面列源码细讲了。 同步网络访问123Request request = new Request.Builder().url(url).build();Response response = client.newCall(request).execute();response.body().string(); 接着我们拿同步网络进行下去,OkHttpClient调用了newCall();代码如下：123@Override public Call newCall(Request request) &#123; return new RealCall(this, request, false /* for web socket */);&#125; 然后调用了RealCall的execute()方法，方法源码如下: 12345678910111213141516@Override public Response execute() throws IOException &#123; synchronized (this) &#123; if (executed) throw new IllegalStateException(&quot;Already Executed&quot;); executed= = true; &#125; captureCallStackTrace(); try &#123; client.dispatcher().executed(this); Response result = getResponseWithInterceptorChain(); if (result == null) throw new IOException(&quot;Canceled&quot;); return result; &#125; finally &#123; client.dispatcher().finished(this); &#125;&#125; 首先executed=ture,确保每一个call对象只能使用一次原则，然后就调用了captureCallStackTrace()，源码如下： 1234567891011121314151617private void captureCallStackTrace() &#123; Object callStackTrace = Platform.get().getStackTraceForCloseable(&quot;response.body().close()&quot;); retryAndFollowUpInterceptor.setCallStackTrace(callStackTrace);&#125;public Object getStackTraceForCloseable(String closer) &#123; if (logger.isLoggable(Level.FINE)) &#123; return new Throwable(closer); // These are expensive to allocate. &#125; return null;&#125;public final class RetryAndFollowUpInterceptor implements Interceptor &#123; public void setCallStackTrace(Object callStackTrace) &#123; this.callStackTrace = callStackTrace; &#125;&#125; 可以看出captureCallStackTrace什么也没有做，只是把一个对象传进retryAndFollowUpInterceptor，其中他这个的作用就像他名字一样，就是一个堆栈跟踪，捕获了这个请求的StackTrace。 接着 client.dispatcher().executed(this); 对应的源码如下：123456public final class Dispatcher &#123; private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;(); synchronized void executed(RealCall call) &#123; runningSyncCalls.add(call); &#125;&#125; 他这也是把请求放在一个双向队列里。也没做什么操作。然后就是重点了，可以说整个网络请求获取数据都是靠 Response result = getResponseWithInterceptorChain();这句代码，Response装载了所有的访问数据，而getResponseWithInterceptorChain()做了什么？ 源码如下： 12345678910111213141516171819202122232425Response getResponseWithInterceptorChain() throws IOException &#123; // Build a full stack of interceptors. List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;(); //添加开发者应用层自定义的Interceptor interceptors.addAll(client.interceptors()); //这个Interceptor是处理请求失败的重试，重定向 interceptors.add(retryAndFollowUpInterceptor); //这个Interceptor工作是添加一些请求的头部或其他信息 //并对返回的Response做一些友好的处理（有一些信息你可能并不需要） interceptors.add(new BridgeInterceptor(client.cookieJar())); //这个Interceptor的职责是判断缓存是否存在，读取缓存，更新缓存等等 interceptors.add(new CacheInterceptor(client.internalCache())); //这个Interceptor的职责是建立客户端和服务器的连接 interceptors.add(new ConnectInterceptor(client)); if (!forWebSocket) &#123; //添加开发者自定义的网络层拦截器 interceptors.addAll(client.networkInterceptors()); &#125; interceptors.add(new CallServerInterceptor(forWebSocket)); //一个包裹这request的chain Interceptor.Chain chain = new RealInterceptorChain( interceptors, null, null, null, 0, originalRequest); //把chain传递到第一个Interceptor手中 return chain.proceed(originalRequest);&#125; 看上面的代码，不断的添加各种拦截器，最后就创建RealInterceptorChain然后调用proceed(),先看一下RealInterceptorChain类， 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677public final class RealInterceptorChain implements Interceptor.Chain &#123; private final List&lt;Interceptor&gt; interceptors; private final StreamAllocation streamAllocation; private final HttpCodec httpCodec; private final RealConnection connection; private final int index; private final Request request; private int calls; public RealInterceptorChain(List&lt;Interceptor&gt; interceptors, StreamAllocation streamAllocation, HttpCodec httpCodec, RealConnection connection, int index, Request request) &#123; this.interceptors = interceptors; this.connection = connection; this.streamAllocation = streamAllocation; this.httpCodec = httpCodec; this.index = index; this.request = request; &#125; @Override public Connection connection() &#123; return connection; &#125; public StreamAllocation streamAllocation() &#123; return streamAllocation; &#125; public HttpCodec httpStream() &#123; return httpCodec; &#125; @Override public Request request() &#123; return request; &#125; @Override public Response proceed(Request request) throws IOException &#123; return proceed(request, streamAllocation, httpCodec, connection); &#125; public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec, RealConnection connection) throws IOException &#123; if (index &gt;= interceptors.size()) throw new AssertionError(); calls++; // If we already have a stream, confirm that the incoming request will use it. if (this.httpCodec != null &amp;&amp; !this.connection.supportsUrl(request.url())) &#123; throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1) + &quot; must retain the same host and port&quot;); &#125; // If we already have a stream, confirm that this is the only call to chain.proceed(). if (this.httpCodec != null &amp;&amp; calls &gt; 1) &#123; throw new IllegalStateException(&quot;network interceptor &quot; + interceptors.get(index - 1) + &quot; must call proceed() exactly once&quot;); &#125; // Call the next interceptor in the chain. RealInterceptorChain next = new RealInterceptorChain( interceptors, streamAllocation, httpCodec, connection, index + 1, request); Interceptor interceptor = interceptors.get(index); Response response = interceptor.intercept(next); // Confirm that the next interceptor made its required call to chain.proceed(). if (httpCodec != null &amp;&amp; index + 1 &lt; interceptors.size() &amp;&amp; next.calls != 1) &#123; throw new IllegalStateException(&quot;network interceptor &quot; + interceptor + &quot; must call proceed() exactly once&quot;); &#125; // Confirm that the intercepted response isn&apos;t null. if (response == null) &#123; throw new NullPointerException(&quot;interceptor &quot; + interceptor + &quot; returned null&quot;); &#125; return response; &#125;&#125; 从proceed()看创建RealInterceptorChain对象时候httpCodec直接赋予了null,所以略过判断,然后调用了这个interceptor.intercept(next);方法,就是执行前面添加的拦截器的intercept()方法; 而每一个拦截器的intercept()又会调用下一个拦截器的proceed(),下一个拦截器的proceed()又调用这个拦截器的intercept()，由此类推一个一个往下调。最后一个返回结果，在一层一层向上返回. 如下面的关键代码,每个拦截器都有对应的代码一步步的调下一个拦截器。 1234567891011public interface Interceptor &#123; Response intercept(Chain chain) throws IOException; interface Chain &#123; Request request(); Response proceed(Request request) throws IOException; @Nullable Connection connection(); &#125;&#125; 123456789RealInterceptorChain implements Interceptor.Chain&#123; public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec, RealConnection connection) throws IOException &#123; RealInterceptorChain next = new RealInterceptorChain( interceptors, streamAllocation, httpCodec, connection, index + 1, request); Interceptor interceptor = interceptors.get(index); Response response = interceptor.intercept(next); &#125;&#125; 123456public final class RetryAndFollowUpInterceptor implements Interceptor &#123; @Override public Response intercept(Chain chain) throws IOException &#123; Response response = ((RealInterceptorChain) chain).proceed(request,streamAllocation,null,null); &#125;&#125; 1234567public final class BridgeInterceptor implements Interceptor &#123; @Override public Response intercept(Chain chain) throws IOException &#123; Request.Builder requestBuilder = userRequest.newBuilder(); Response networkResponse = chain.proceed(requestBuilder.build()); &#125;&#125; 1234567public final class CacheInterceptor implements Interceptor &#123; @Override public Response intercept(Chain chain) throws IOException &#123; Response networkResponse = null; networkResponse = chain.proceed(networkRequest); &#125;&#125; 用别人的一张图就是这样： 各个拦截器形成拦截器链,OkHttp的这种拦截器链采用的是责任链模式，这样的好处是将请求的发送和处理分开，并且可以动态添加中间的处理方实现对请求的处理、短路等操作。 最后的client.dispatcher().finished(this);源码如下： 12345678910111213141516171819202122232425262728293031private &lt;T&gt; void finished(Deque&lt;T&gt; calls, T call, boolean promoteCalls) &#123; int runningCallsCount; Runnable idleCallback; synchronized (this) &#123; if (!calls.remove(call)) throw new AssertionError(&quot;Call wasn&apos;t in-flight!&quot;); if (promoteCalls) promoteCalls(); runningCallsCount = runningCallsCount(); idleCallback = this.idleCallback; &#125; if (runningCallsCount == 0 &amp;&amp; idleCallback != null) &#123; idleCallback.run(); &#125;&#125;private void promoteCalls() &#123; if (runningAsyncCalls.size() &gt;= maxRequests) return; // Already running max capacity. if (readyAsyncCalls.isEmpty()) return; // No ready calls to promote. for (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123; AsyncCall call = i.next(); if (runningCallsForHost(call) &lt; maxRequestsPerHost) &#123; i.remove(); runningAsyncCalls.add(call); executorService().execute(call); &#125; if (runningAsyncCalls.size() &gt;= maxRequests) return; // Reached max capacity. &#125;&#125; 最后通过calls.remove(call)，移走了对了，因为readyAsyncCalls，readyAsyncCalls都为空，所以promoteCalls()不会触发。起始上面最核心的就是拦截器的责任链模式。是值得我们学习的。 异步网络访问因为很多和同步是一样的,所以就讲关键代码： 1client.dispatcher().enqueue(new AsyncCall(responseCallback)); dispatcher()方法的源码是123public Dispatcher dispatcher() &#123; return dispatcher; &#125; 没什么讲的，接着就是说重要的enqueue(), 123456789101112131415161718192021private final Deque&lt;AsyncCall&gt; runningAsyncCalls = new ArrayDeque&lt;&gt;();private final Deque&lt;RealCall&gt; runningSyncCalls = new ArrayDeque&lt;&gt;();private int maxRequestsPerHost = 5;private int maxRequests = 64;synchronized void enqueue(AsyncCall call) &#123; if (runningAsyncCalls.size() &lt; maxRequests &amp;&amp; runningCallsForHost(call) &lt; maxRequestsPerHost) &#123; runningAsyncCalls.add(call); executorService().execute(call); &#125; else &#123; readyAsyncCalls.add(call); &#125;&#125;private int runningCallsForHost(AsyncCall call) &#123; int result = 0; for (AsyncCall c : runningAsyncCalls) &#123; if (c.host().equals(call.host())) result++; &#125; return result;&#125; 但异步请求数量小于65并且请求访问的域名小于5,就会添加到runningAsyncCalls队列中,然后executorService线程池去运行,否则就添加到readyAsyncCalls等待队列中,executorService具体是什么线程池呢，看如下源码： 123456789private ExecutorService executorService; public synchronized ExecutorService executorService() &#123; if (executorService == null) &#123; executorService = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(&quot;OkHttp Dispatcher&quot;, false)); &#125; return executorService;&#125; 这是一个阀值为Integer.MAX_VALUE,不保留任何核心线程,用多少创多少,最多只能存活60秒,他这样设计成不设上限的线程，以保证I/O任务中高阻塞低占用的过程，不会长时间卡在阻塞上。接着我们传进executorService里的AsyncCall，源码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263final class AsyncCall extends NamedRunnable &#123; private final Callback responseCallback; AsyncCall(Callback responseCallback) &#123; super(&quot;OkHttp %s&quot;, redactedUrl()); this.responseCallback = responseCallback; &#125; String host() &#123; return originalRequest.url().host(); &#125; Request request() &#123; return originalRequest; &#125; RealCall get() &#123; return RealCall.this; &#125; @Override protected void execute() &#123; boolean signalledCallback = false; try &#123; Response response = getResponseWithInterceptorChain(); if (retryAndFollowUpInterceptor.isCanceled()) &#123; signalledCallback = true; responseCallback.onFailure(RealCall.this, new IOException(&quot;Canceled&quot;)); &#125; else &#123; signalledCallback = true; responseCallback.onResponse(RealCall.this, response); &#125; &#125; catch (IOException e) &#123; if (signalledCallback) &#123; // Do not signal the callback twice! Platform.get().log(INFO, &quot;Callback failure for &quot; + toLoggableString(), e); &#125; else &#123; responseCallback.onFailure(RealCall.this, e); &#125; &#125; finally &#123; client.dispatcher().finished(this); &#125; &#125; &#125; public abstract class NamedRunnable implements Runnable &#123; protected final String name; public NamedRunnable(String format, Object... args) &#123; this.name = Util.format(format, args); &#125; @Override public final void run() &#123; String oldName = Thread.currentThread().getName(); Thread.currentThread().setName(name); try &#123; execute(); &#125; finally &#123; Thread.currentThread().setName(oldName); &#125; &#125; protected abstract void execute();&#125; AsyncCall继承了Runnable,就像我之前解析AsyncTask一样,先线程池先执行NamedRunnable的run()方法,中途再执行AsyncCall的execute()方法,而整个网络访问还是像我们同步访问那样, Response response = getResponseWithInterceptorChain();通过责任获取访问然后再接口回调，获取服务器返回的数据。最后又是执行client.dispatcher().finished(this);先执行calls.remove(call)删除call，当异步的缓存队列readyAsyncCalls有缓存请求时且满足条件时，就会执行promoteCalls()方法里的代码，就是在readyAsyncCalls取出一个call,并把这个call放入runningAsyncCalls,然后执行execute.","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://jack921.win/tags/android/"}]},{"title":"AsyncTask源码深入解析","slug":"AsyncTask源码深入解析","date":"2018-05-07T07:40:36.000Z","updated":"2018-09-23T14:09:53.129Z","comments":true,"path":"2018/05/07/AsyncTask源码深入解析/","link":"","permalink":"http://jack921.win/2018/05/07/AsyncTask源码深入解析/","excerpt":"","text":"最近想写一篇关于源码解析的文章，发现AsyncTask代码量不多，可里面的东西却是很值得学习的，所以故那这来“开刀” 首先作为Android开发者我们对于AsyncTask想必比大家都知道吗，大白话讲就是在后台执行耗时任务再把最终的结果返回主线程更新UI。如下代码就它的模板代码： 1234567891011121314151617181920212223242526272829303132class MyAsyncTack extends AsyncTask&lt;Void(传入参数),String（执行中阶段行结果）,String(任务完成返回结果)&gt;&#123; @Override protected void onPreExecute() &#123; super.onPreExecute(); //doInBackground执行前一些初始化的操作都在这里 &#125; @Override protected String doInBackground(Void... voids) &#123; //后台耗时任务执行中。。。 return null; &#125; @Override protected void onProgressUpdate(String... values) &#123; super.onProgressUpdate(values); //后台执行的任务会发回一个或多个阶段性进度结果，这个是可以用来去更新交互页面。 &#125; @Override protected void onCancelled() &#123; super.onCancelled(); //在后台任务被取消时回调 &#125; @Override protected void onPostExecute(String s) &#123; super.onPostExecute(s); //耗时任务完成返回结果，刷新ui &#125;&#125; //执行AsycnTaskMyAsyncTack myAsyncTack=new MyAsyncTack();myAsyncTack.execute(); 这就是整的一个AsyncTask模板代码了。 从上面的模板中，整个过程是从myAsyncTack.execute();开始的，那我们就execute()开始吧AsyncTask关于这部分的源码如下： 123456789101112131415161718192021@MainThreadpublic final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) &#123; return executeOnExecutor(sDefaultExecutor, params);&#125;@MainThreadpublic final AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec, Params... params) &#123; if (mStatus != Status.PENDING) &#123; switch (mStatus) &#123; case RUNNING: throw new IllegalStateException(&quot;Cannot execute task:&quot;+ &quot; the task is already running.&quot;); case FINISHED: throw new IllegalStateException(&quot;Cannot execute task:&quot;+ &quot; the task has already been executed &quot;+ &quot;(a task can be executed only once)&quot;); &#125; &#125; mStatus = Status.RUNNING; onPreExecute(); mWorker.mParams = params; exec.execute(mFuture); return this;&#125; 从上面的代码我们可以看出AsyncTask通过判断Status来防止AsyncTask多次执行，然后调用了onPreExecute();抽象方法，为任务的执行做一些准备和初始化操作。接着有三个对于现在我们来说很陌生的变量(mWorker,exec,mFuture). 对于mWorker，mFuture这两个变量在AsyncTask这个类初始化的时候就已经初始化了，对应的关键源码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243public AsyncTask() &#123; this((Looper) null);&#125;private static abstract class WorkerRunnable&lt;Params, Result&gt; implements Callable&lt;Result&gt; &#123; Params[] mParams;&#125;public AsyncTask(Looper callbackLooper) &#123; mHandler = callbackLooper == null || callbackLooper == Looper.getMainLooper() ? getMainHandler() : new Handler(callbackLooper); mWorker = new WorkerRunnable&lt;Params, Result&gt;() &#123; public Result call() throws Exception &#123; mTaskInvoked.set(true); Result result = null; try &#123; Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND); result = doInBackground(mParams); Binder.flushPendingCommands(); &#125; catch (Throwable tr) &#123; mCancelled.set(true); throw tr; &#125; finally &#123; postResult(result); &#125; return result; &#125; &#125;; mFuture = new FutureTask&lt;Result&gt;(mWorker) &#123; @Override protected void done() &#123; try &#123; postResultIfNotInvoked(get()); &#125; catch (InterruptedException e) &#123; android.util.Log.w(LOG_TAG, e); &#125; catch (ExecutionException e) &#123; throw new RuntimeException(&quot;An error occurred while executing doInBackground()&quot;, e.getCause()); &#125; catch (CancellationException e) &#123; postResultIfNotInvoked(null); &#125; &#125; &#125;;&#125; 如上所示，mWorker很简单，就是AsycnTask里面的抽象内部类，实现了Callable接口，接下来就是mFuture即FutureTask，对于平时写业务层的我们对这个FutureTask类接触的还是比较少而又是这篇文章的重点，所以重点讲。 FutureTaskFutureTask可用于异步获取执行结果或取消执行任务的场景。通过传入Runnable或者Callable的任务给FutureTask，直接调用其run方法或者放入线程池执行，之后可以在外部通过FutureTask的get方法异步获取执行结果，因此，FutureTask非常适合用于耗时的计算，主线程可以在完成自己的任务后，再去获取结果。概念总是难以理解，所以给你们一个关于使用FutureTask的demo,这个demo就是整个AsyncTask的核心。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class FutureTest1 &#123; public static void main(String[] args) &#123; Task task = new Task();// 新建异步任务 FutureTask&lt;Integer&gt; future = new FutureTask&lt;Integer&gt;(task) &#123; // 异步任务执行完成，回调 @Override protected void done() &#123; try &#123; System.out.println(&quot;future.done():&quot; + get()); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; catch (ExecutionException e) &#123; e.printStackTrace(); &#125; &#125; &#125;; // 创建线程池（使用了预定义的配置） ExecutorService executor = Executors.newCachedThreadPool(); executor.execute(future); try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e1) &#123; e1.printStackTrace(); &#125; // 可以取消异步任务// future.cancel(true); try &#123; // 阻塞，等待异步任务执行完毕-获取异步任务的返回值 System.out.println(&quot;future.get():&quot;+future.get()); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; catch (ExecutionException e) &#123; e.printStackTrace(); &#125; &#125; // 异步任务 static class Task implements Callable&lt;Integer&gt; &#123; // 返回异步任务的执行结果 @Override public Integer call() throws Exception &#123; int i = 0; for (;i&lt;10;i++) &#123; try &#123; System.out.println(Thread.currentThread().getName()+&quot;_&quot;+ i); Thread.sleep(500); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; return i; &#125; &#125;&#125; 上面demo运行结果如下： FutureTask可以获取异步任务线程的最终结果，所以future.get()返回10。 回到我们的AsyncTask里，同理如上面demo一样，会先执行mWorker的call()里面的方法，call方法里就执行抽象方法doInBackground(mParams);我们就这回到方法里执行耗时任务，然后拿到结果执行postResult(result)方法，而Future的get()也可以从Callable拿到执行的结果。 分析exec.execute(mFuture);首先exec我们要知道exec是什么？顺着他的源码向上找，代码如下： 1234@MainThreadpublic final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) &#123; return executeOnExecutor(sDefaultExecutor, params);&#125; 这个sDefaultExecutor是什么呢，再顺着这推，关键源码如下： 1234567891011121314151617181920212223242526public static final Executor SERIAL_EXECUTOR = new SerialExecutor();private static volatile Executor sDefaultExecutor = SERIAL_EXECUTOR;private static class SerialExecutor implements Executor &#123; final ArrayDeque&lt;Runnable&gt; mTasks = new ArrayDeque&lt;Runnable&gt;(); Runnable mActive; public synchronized void execute(final Runnable r) &#123; mTasks.offer(new Runnable() &#123; public void run() &#123; try &#123; r.run(); &#125; finally &#123; scheduleNext(); &#125; &#125; &#125;); if (mActive == null) &#123; scheduleNext(); &#125; &#125; protected synchronized void scheduleNext()&#123; if ((mActive = mTasks.poll()) != null) &#123; THREAD_POOL_EXECUTOR.execute(mActive); &#125; &#125;&#125; ArrayDeque是一个先进先出的队列存储Runnable对象，offer方法加到队尾，poll()从队头取，当运行的第一次的时候mActive就是空的，所以还是从mTask取出一个由THREAD_POOL_EXECUTOR执行，等下一次是mActive不为空就通过finally去执行 scheduleNext();方法，这段代码里有两个讲解点，分别是 r.run();和THREAD_POOL_EXECUTOR 首先r.run()调用的是哪个方法呢通过exec.execute(mFuture);我们知道上面的Runnable就是mFuture,即调用了mFuture.run();而这个源码如下： 1234567891011121314151617181920212223242526272829303132333435private Callable&lt;V&gt; callable;public FutureTask(Callable&lt;V&gt; callable) &#123; if (callable == null) throw new NullPointerException(); this.callable = callable; this.state = NEW; // ensure visibility of callable&#125;public void run() &#123; if (state != NEW || !U.compareAndSwapObject(this, RUNNER, null, Thread.currentThread())) return; try &#123; Callable&lt;V&gt; c = callable; if (c != null &amp;&amp; state == NEW) &#123; V result; boolean ran; try &#123; result = c.call(); ran = true; &#125; catch (Throwable ex) &#123; result = null; ran = false; setException(ex); &#125; if (ran) set(result); &#125; &#125; finally &#123; runner = null; int s = state; if (s &gt;= INTERRUPTING) handlePossibleCancellationInterrupt(s); &#125;&#125; 我已经把相关的代码都截出来的很详尽了，可以看出callable就是我们上面的mWorker变量，然后就是调mWorker.call()方法执行抽象方法doInBackground()， 1234567891011121314151617mWorker = new WorkerRunnable&lt;Params, Result&gt;() &#123; public Result call() throws Exception &#123; mTaskInvoked.set(true); Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND); //noinspection unchecked Result result = doInBackground(mParams); Binder.flushPendingCommands(); return postResult(result); &#125;&#125;;private Result postResult(Result result) &#123; Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,new AsyncTaskResult&lt;Result&gt;(this, result)); message.sendToTarget(); return result;&#125; 同时我上面FutureTask的demo也和这个形成了对应连贯，这就是我demo的底层实现，最后通过postResult();里的sHandler发送一个MESSAGE_POST_RESULT的消息我们追踪先关代码： 12345678910111213141516171819202122232425262728private static class InternalHandler extends Handler &#123;public InternalHandler(Looper looper) &#123; super(looper);&#125;@SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;RawUseOfParameterizedType&quot;&#125;)@Overridepublic void handleMessage(Message msg) &#123; AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj; switch (msg.what) &#123; case MESSAGE_POST_RESULT: result.mTask.finish(result.mData[0]); break; case MESSAGE_POST_PROGRESS: result.mTask.onProgressUpdate(result.mData); break; &#125;&#125;&#125;private void finish(Result result) &#123; if (isCancelled()) &#123; onCancelled(result); &#125; else &#123; onPostExecute(result); &#125; mStatus = Status.FINISHED;&#125; 这里反而没什么好讲的，通过handler调用finish()方法，假如没有取消就是调用抽象方法onPostExecute(),假如取消了就调用抽象方法onCancelled();而当handler发送MESSAGE_POST_PROGRESS，就是调抽象方法onProgressUpdate(),很简单没什么说的。 接着分析THREAD_POOL_EXECUTOR,相关源码如下： 12345678910111213141516171819 private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128);private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();private static final int CORE_POOL_SIZE = Math.max(2, Math.min(CPU_COUNT - 1, 4));private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;private static final int KEEP_ALIVE_SECONDS = 30;private static final ThreadFactory sThreadFactory = new ThreadFactory() &#123; private final AtomicInteger mCount = new AtomicInteger(1); public Thread newThread(Runnable r) &#123; return new Thread(r, &quot;AsyncTask #&quot; + mCount.getAndIncrement()); &#125;&#125;;static &#123; ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_SECONDS, TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory); threadPoolExecutor.allowCoreThreadTimeOut(true); THREAD_POOL_EXECUTOR = threadPoolExecutor;&#125; 其实这就是定义了一个线程池。同时运行线程数Math.max(2, Math.min(CPU_COUNT - 1, 4))，线程池总大小CPU_COUNT * 2 + 1;但是由于SerialExecutor的存在，它会强制串行并发，所以实际上只有一个线程在跑，所以也就不存在任务数超过线程池总大小的问题了。当然这是一个默认实现，我特也可以通过public static void setDefaultExecutor(Executor exec)进行更改。 到此整个分析过程就结束了，总结一下AcyncTask汇集了线程池，handler等相关知识，也告诉我们，不管表明多花俏，底层原理才是最重要的，懂得底层原理才能不变应万变，废话有点多了","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://jack921.win/tags/android/"}]},{"title":"React Native与Android 原生通信","slug":"React Native与Android 原生通信","date":"2018-04-27T03:50:27.000Z","updated":"2018-09-23T14:08:17.865Z","comments":true,"path":"2018/04/27/React Native与Android 原生通信/","link":"","permalink":"http://jack921.win/2018/04/27/React Native与Android 原生通信/","excerpt":"","text":"我们用React Native 做混合开发的时候免不了要原生和React Native 进行通信交互，这篇文章就是分享原生模块与JS传递数据的几种方式。 总的步骤可以分为如下几点： 在原生端定义Module类,继承ReactContextBaseJavaModule,在Module类里,定义交互的方法. 定义Package类，继承ReactPackage,将Module实例添加到集合. 在android继承的ReactApplication,回调实现getPackages方法，将Package实例添加到getPackages下的集合。 如下是Mudule类的实例代码，为了方便大家理解，我把代码全部贴出来，在一一讲解。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import android.support.annotation.Nullable;import android.widget.Toast;import com.facebook.react.bridge.Arguments;import com.facebook.react.bridge.Callback;import com.facebook.react.bridge.Promise;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.bridge.ReactContext;import com.facebook.react.bridge.ReactContextBaseJavaModule;import com.facebook.react.bridge.ReactMethod;import com.facebook.react.bridge.WritableMap;import com.facebook.react.modules.core.DeviceEventManagerModule;import java.util.HashMap;import java.util.Map;public class ToastExample extends ReactContextBaseJavaModule&#123; private static final String LONG_TIME = &quot;LONG&quot;; private static final String SHORT_TIME = &quot;SHORT&quot;; private static final String MESSAGE = &quot;MESSAGE&quot;; public ToastExample(ReactApplicationContext reactContext) &#123; super(reactContext); &#125; @Override public String getName() &#123; return &quot;ToastForAndroid&quot;; &#125; @ReactMethod public void getDataFromIntent(Callback callback)&#123; try&#123; Activity currentActivity=getCurrentActivity(); String result =currentActivity.getIntent().getStringExtra(&quot;data&quot;); if(TextUtils.isEmpty(result))&#123; callback.invoke(&quot;no_data&quot;); &#125;else&#123; callback.invoke(result); &#125; &#125;catch (Exception e)&#123; callback.invoke(&quot;error&quot;); &#125; &#125; @Override public Map&lt;String, Object&gt; getConstants() &#123; //让js那边能够使用这些常量 Map&lt;String,Object&gt; constants = new HashMap&lt;&gt;(); constants.put(LONG_TIME, Toast.LENGTH_LONG); constants.put(SHORT_TIME,Toast.LENGTH_SHORT); constants.put(MESSAGE,&quot;getConstants&quot;); return constants; &#125; @ReactMethod public void show(int duration)&#123; Toast.makeText(getReactApplicationContext(),&quot;message:&quot;+duration,duration).show(); &#125; @ReactMethod public void sendEvent()&#123; onScanningResult(); &#125; @ReactMethod public void testAndroidCallbackMethod(String msg, Callback callback)&#123; Toast.makeText(getReactApplicationContext(),msg,Toast.LENGTH_LONG).show(); callback.invoke(&quot;abc&quot;); &#125; @ReactMethod public void textAndroidPromiseMethod(String msg, Promise promise)&#123; Toast.makeText(getReactApplicationContext(),msg,Toast.LENGTH_SHORT).show(); String result=&quot;谢汉杰&quot;; promise.resolve(result); &#125; public void onScanningResult()&#123; WritableMap params = Arguments.createMap(); params.putString(&quot;key&quot;, &quot;myData&quot;); sendEvent(getReactApplicationContext(),&quot;EventName&quot;,params); &#125; public static void sendEvent(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName, params); &#125; public void nativeCallRn()&#123; onScanningResult(); &#125; @Override public boolean canOverrideExistingModule() &#123; return true; &#125;&#125; 在上面的Module代码中,getName()方法返回的名字是是在RN代码里面是需要这个名字来调用该类的方法,而@ReactMethod注解下的方法是我们自定义方法,表明这个方法可以被rn调用.至于上面四种形式的方法等步骤走完详解。 自定义ReactPackage 代码如下： 123456789101112131415161718192021222324252627import com.facebook.react.ReactPackage;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;public class ExampleReactNativePackage implements ReactPackage&#123; public ToastExample toastExample; @Override public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) &#123; List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;(); toastExample=new ToastExample(reactContext); modules.add(toastExample); return modules; &#125; @Override public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) &#123; return Collections.emptyList(); &#125;&#125; 这一步很简单，就是把上面的ToastExample类加入NativeModule而已 接着第三步也很简单，代码如下 12345678910111213141516171819202122232425262728293031323334import android.app.Application;import com.facebook.react.ReactApplication;import com.facebook.react.ReactNativeHost;import com.facebook.react.ReactPackage;import com.facebook.react.shell.MainReactPackage;import java.util.Arrays;import java.util.List;public class MyApplication extends Application implements ReactApplication&#123; public static final ExampleReactNativePackage exampleReactNativePackage=new ExampleReactNativePackage(); private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), exampleReactNativePackage ); &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125;&#125; 这也不也只是把ExampleReactNativePackage添加进ReactPackage而已，也很简单。 为此整个Android原生端已经完成编写。接着就是编写js端，下面也是js端的实例:(说句废话，我一般喜欢贴全部代码在一一讲解,这样比较连贯) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102import React from &apos;react&apos;;import &#123; AppRegistry, StyleSheet, Text, View, TouchableOpacity, ToastAndroid, NativeModules, DeviceEventEmitter&#125; from &apos;react-native&apos;;export default class HelloWorld extends React.Component &#123; constructor(props)&#123; super(props); this.state=&#123; text1:&apos;ToastForAndroid&apos;, text2:&apos;testAndroidCallbackMethod&apos;, text3:&apos;textAndroidPromiseMethod&apos;, text4:&apos;DeviceEventEmitter&apos;, text5:&apos;getValue&apos;, data:&apos;no_data&apos;, &#125; &#125; componentWillMount() &#123; DeviceEventEmitter.addListener(&apos;EventName&apos;, function (msg) &#123; console.log(msg); let rest=NativeModules.ToastForAndroid.MESSAGE; ToastAndroid.show(&quot;DeviceEventEmitter收到消息:&quot; + &quot;\\n&quot; + rest, ToastAndroid.SHORT) &#125;); NativeModules.ToastForAndroid.getDataFromIntent((result)=&gt;&#123; this.setState(&#123;data:result&#125;); &#125;); &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text&gt;&#123;this.state.data&#125;&lt;/Text&gt; &lt;TouchableOpacity onPress=&#123;this._onPressButton.bind(this)&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;&#123;this.state.text1&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;TouchableOpacity onPress=&#123;this._onPressButton2.bind(this)&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;&#123;this.state.text2&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;TouchableOpacity onPress=&#123;this._onPressButton3.bind(this)&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;&#123;this.state.text3&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;TouchableOpacity onPress=&#123;this._onPressButton4.bind(this)&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;&#123;this.state.text4&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;TouchableOpacity onPress=&#123;this._onPressButton5.bind(this)&#125;&gt; &lt;Text style=&#123;styles.hello&#125;&gt;&#123;this.state.text5&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/View&gt; ) &#125; _onPressButton()&#123; NativeModules.ToastForAndroid.show(1000); &#125; _onPressButton2()&#123; NativeModules.ToastForAndroid.testAndroidCallbackMethod(&quot;HelloJack&quot;,(result)=&gt;&#123; this.setState(&#123;text:result&#125;); &#125;); &#125; _onPressButton3()&#123; NativeModules.ToastForAndroid.textAndroidPromiseMethod(&quot;abcx&quot;).then((result)=&gt;&#123; this.setState(&#123;text3:result&#125;); &#125;).catch((error)=&gt;&#123; this.setState(&#123;text:&apos;error&apos;&#125;); &#125;) &#125; _onPressButton4()&#123; NativeModules.ToastForAndroid.sendEvent(); &#125; _onPressButton5()&#123; ToastAndroid.show(NativeModules.ToastForAndroid.MESSAGE, ToastAndroid.SHORT) &#125;&#125; var styles = StyleSheet.create(&#123; container: &#123; flex: 1, justifyContent: &apos;center&apos;, flexDirection: &apos;column&apos;, &#125;, hello: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, &#125;, &#125;);AppRegistry.registerComponent(&apos;HelloWorlds&apos;, () =&gt; HelloWorld); 这就是整个js端的调用实例。在React Naitve层，RN端可通过 NativeModules.[module名].[方法名]来调起原生的方法，同时也可以通过RN端可通过 NativeModules.[module名].[参数名]的方式来获取传递的参数，具体用法如上代码。 而对于原生调用调用React Native里面的方法，我们可以用RCTDeviceEventEmitter的方式，这种方式就相当于我们Android中的广播，具体对应的原生代码如下： 1MyApplication.exampleReactNativePackage.toastExample.nativeCallRn(); 和上面的代码也是连贯一起的。 最后总结交互的四种方式 第一种最简单，如上面代码的1234@ReactMethodpublic void show(int duration)&#123; Toast.makeText(getReactApplicationContext(),&quot;message:&quot;+duration,duration).show();&#125; 即用ReactMethod注解方法就可以调用原生了 Callback 回调方式，如上面代码的 12345 @ReactMethod public void testAndroidCallbackMethod(String msg, Callback callback)&#123; Toast.makeText(getReactApplicationContext(),msg,Toast.LENGTH_LONG).show(); callback.invoke(&quot;abc&quot;);&#125; 对应的js代码就是 12345 _onPressButton2()&#123; NativeModules.ToastForAndroid.testAndroidCallbackMethod(&quot;HelloJack&quot;,(result)=&gt;&#123; this.setState(&#123;text:result&#125;); &#125;);&#125; 即你传入参数进行操作然后给你回调结果 3.Promise 回调方式类似的就是RxJava.可以通过链式将复杂代码结构转换为简短易读的代码.，如上面代码的 123456@ReactMethod public void textAndroidPromiseMethod(String msg, Promise promise)&#123; Toast.makeText(getReactApplicationContext(),msg,Toast.LENGTH_SHORT).show(); String result=&quot;谢汉杰&quot;; promise.resolve(result); &#125; 对应的js代码就是 1234567_onPressButton3()&#123; NativeModules.ToastForAndroid.textAndroidPromiseMethod(&quot;abcx&quot;).then((result)=&gt;&#123; this.setState(&#123;text3:result&#125;); &#125;).catch((error)=&gt;&#123; this.setState(&#123;text:&apos;error&apos;&#125;); &#125;) &#125; JS端通过then接口来获取Promise的数据,执行错误就返回error信息 通过事件方式：RCTDeviceEventEmitter，一般是native原生调用React Native 相当于广播。对应上面代码如下： 123public static void sendEvent(ReactContext reactContext, String eventName, @Nullable WritableMap params) &#123; reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName, params); &#125; 对应的js代码就是 12345DeviceEventEmitter.addListener(&apos;EventName&apos;, function (msg) &#123; console.log(msg); let rest=NativeModules.ToastForAndroid.MESSAGE; ToastAndroid.show(&quot;DeviceEventEmitter收到消息:&quot; + &quot;\\n&quot; + rest, ToastAndroid.SHORT) &#125;); Native发送原生事件然后React Native 注册监听获取信息。 在这里举一个我们实战的一个例子，就是启动RN界面并且传递数据。怎么做呢，刚开始的初学者还是一下子反应不过来，起始也很简单，充分运用我们上面的例子就行了，首先原生启动代码 123Intent intent=new Intent(MainActivity.this,HelloReactActivity.class);intent.putExtra(&quot;data&quot;,&quot;HelloJack&quot;);startActivity(intent); 最终要的是是在上面 的ToastExample类里加入 1234567891011121314@ReactMethod public void getDataFromIntent(Callback callback)&#123; try&#123; Activity currentActivity=getCurrentActivity(); String result =currentActivity.getIntent().getStringExtra(&quot;data&quot;); if(TextUtils.isEmpty(result))&#123; callback.invoke(&quot;no_data&quot;); &#125;else&#123; callback.invoke(result); &#125; &#125;catch (Exception e)&#123; callback.invoke(&quot;error&quot;); &#125; &#125; 然后在RN端获取即可 123NativeModules.ToastForAndroid.getDataFromIntent((result)=&gt;&#123; this.setState(&#123;data:result&#125;);&#125;); 同理其他情况请参考RN之Android:原生界面与React界面的相互调用及数据传递,这也是我的参考之一。 最后献上大家最期待的源码https://github.com/jack921/ReactNativeParam还有什么不明白就开源码吧","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"react native","slug":"react-native","permalink":"http://jack921.win/tags/react-native/"}]},{"title":"疯狂java笔记之常用的内部排序","slug":"疯狂java笔记之常用的内部排序","date":"2017-09-05T17:04:53.000Z","updated":"2017-09-05T17:06:20.847Z","comments":true,"path":"2017/09/06/疯狂java笔记之常用的内部排序/","link":"","permalink":"http://jack921.win/2017/09/06/疯狂java笔记之常用的内部排序/","excerpt":"","text":"排序的基本概念在计算机程序开发过程中，经常需要一组数据元素(或记录)按某个关键字进行排序，排序完成的序列可用于快速查找相关记录。 排序概述排序是程序开发中一种非常常见的操作，对一组任意的数据元素(或记录)经过排序操作后，就可以把它们变成一组关键字排序的有序序列。 假设含有n个记录的序列为{R1,R2,…,Rn},其相应的关键字序列为{K1,k2,…,kn}。将这些记录重新排序为{Ri1,Ri2,…,Rin}，使得相应的关键字满足条件Ki1&lt;=Ki2&lt;=…&lt;=Kin，这样的一种操作称为排序。 一旦将一组杂乱无章的记录重排成一组有序记录，就能快速地从这组记录中找到目标记录。因此通常来说，排序的目的是快速查找。对于一个排序算法来说，一般从如下三个方面来衡量算法的优劣。 时间复杂度：主要是分析关键字的比较次数和记录的移动次数。 空间复杂度：分析排序算法中需要多少辅助内存。 稳定性：若两个记录A和B的关键字值相等，但排序后A，B的先后次序保持不变，则称这种排序算法是稳定的；反之，就是不稳定的。 即现有的排序算法来看，排序大致可分为内部排序和外部排序。如果整个排序过程不需要借助外部存储器(如磁盘等)，所有排序操作都在内存中完成，这种排序就被称为内部排序。 如果参与排序的数据元素非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助外部存储器(如磁盘)，这种排序就被称为外部排序。 外部排序包括以下两个步骤： 1.把排序的文件中的一组记录读入内存的排序区，对读入的记录按上面讲到的内部排序法进行排序，排序之后输出到外部存储器。不断重复这一过程，每次读取一组记录，知道原文件的所有记录被处理完毕。 将下一步分组排序好的记录两组两组地合并排序。在内存容量允许的条件下。每组中包含的记录越大越好，这样可减少合并的次数。 对于外部排序来说，程序必须将数据分批调入内存来排序，中间结果还要及时放入外存显然外部排序要比内部排序更复杂二实际上，也可认为外部排序是由多次内部排序组成的。 常说的排序都是指内部排序，而不是外部排序。 内部排序的分类可以分为如下几类： 选择排序 交换排序 插入排序 归并排序 桶式排序 基数排序 上面这些内部排序方法人致有如下图所示的分类。 选择排序法常用的选择排序方法有两种:直接选择排序和堆排序.直接选择排序简单直观,但性能略差,堆排序是一种较为高效的选择排序方法,但实现起来略微复杂. 直接选择排序直接选择排序的思路很简单，它需要经过n-1趟比较。 第1趟比较:程序将记录定位在第1个数据上，拿第1个数据依次和它后面的每个数据进行比较，如果第1个数据人于后面某个数据，就交换它们…..以此类推。经过第1趟比较，组数据中最小的数据被选出，它被排在第1位。 第2趟比较:程序将记录定位在第2个数据上，拿第2个数据依次和它后面的每个数据进行比较，如果第2个数据大于后面某个数据，就交换它们……依此类推。经过第2趟比较，这组数据中第2小的数据被选出，它被排在第2位。…… 按此规则一共进行n-l趟比较，这组数据中第n-l小(第2大)的数据被选出，被排在第n-1位(倒数第1位);剩下的就是最大的数据，它排在最后。 直接选择排序的优点是算法简单，容易实现。 直接选择排序的缺点是每趟只能确定一个元索，n个数据需要进行。一!趟比较。假设有如下一组数据: 21,30,49,30*,16,9 如果对它使用直接选择排序，因为上面这组数据包含6个数据，所以要经过5趟比较.如下所示。 第1趟比较后：9,30,49,30*,21,16 第2趟比较后：9,16,49,30*,30,21 第3趟比较后：9,21,49,49,30,30* 第4趟比较后：9,16,21,30,49,30* 第5趟比较后：9,16,21,30,30*,49 基于上面思路，用Java程序实现上面的直接选择排序，如下所示： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class DataWrap &#123; int data; String flag; public DataWrap(int data,String flag)&#123; this.data=data; this.flag=flag; &#125; public int compareTo(DataWrap dw)&#123; return this.data&gt;dw.data?1:(this.data==dw.data?0:-1); &#125; public String toString() &#123; return data+flag; &#125; &#125;public class SelectSort &#123; public static void selectSort(DataWrap[] data)&#123; System.out.println(&quot;开始排序&quot;); int arrayLength=data.length; for(int i=0;i&lt;arrayLength-1;i++)&#123; int minIndex=i; for(int j=i+1;j&lt;arrayLength;j++)&#123; if(data[minIndex].compareTo(data[j])&gt;0)&#123; minIndex=j; &#125; &#125; if(minIndex!=i)&#123; DataWrap tmp=data[i]; data[i]=data[minIndex]; data[minIndex]=tmp; &#125; &#125; &#125; public static void main(String[] args) &#123; DataWrap[] data=&#123; new DataWrap(21,&quot;&quot;), new DataWrap(30,&quot;&quot;), new DataWrap(49,&quot;&quot;), new DataWrap(30,&quot;&quot;), new DataWrap(16,&quot;&quot;), new DataWrap(9,&quot;&quot;) &#125;; System.out.println(&quot;排序之前:&quot;+Arrays.toString(data)); selectSort(data); System.out.println(&quot;排序之后:&quot;+Arrays.toString(data)); &#125; &#125; 直接选择排序的第n趟比较至多交换一次，永远总是拿n-1位的数据和中间某个数据(本趟比较中最小的数据)进行交换。如果本趟比较时第n-1位(本趟比较的第i位)的数据已经是最小的，那就无须交换。 对于直接选择排序算法而言，假设有n个数据，数据交换的次数最多有n-1次，但程序比较的次数较多。总体来说，其时间效率为O(n*n) 直接选择排序算法的空间效率很高，它只需要一个附加程序.单元用于交换，其空问效率为O(1). 堆排序在介绍堆排序之前，先来介绍一下于堆有关的概念。 假设有n个数据元素的序列K0,K1,…,Kn-1,当且满足如下关系时，可以将这组数据称为小顶堆(小根堆); Ki&lt;=K2i-1且Ki&lt;=K2i+2(其中i=0,2,…,(n-1)/2) 或者，满足如下关系时，可以将这组数据称为大顶堆(大根堆) Ki&gt;=K2i+1且Ki&gt;=K2i+2(其中i=0,2,…,(n-1/2)) 对于满足小顶堆的数据序列K0,K1,…,Kn-1,如果将它们顺序排成一棵完全二叉树，则此树的特点是，树中所有节点的值都小于其左、右子节点的值，此树的根节点的值必然最小。反之，对于满足大顶堆的数据序列k0,k1,…,kn-1,如果将它们顺序排成一棵完全二叉树，则此树的特点是，树中所有节点的值都大于其左、右子节点的值，此树的根节点的值必然最大。 通过上面的介绍不难发现一点，小顶堆的任意子树也是小顶堆，大顶堆的任意子树还是大顶堆。 比如，判断数据序列如：9,30,499,46,58,79 是否为堆，将其转换为一颗完全二叉树，如下图： 上图中每个节点上的灰色数字代表该节点数据在底层数组中的索引。上图所示的完全二叉树完全满足小顶堆的要求，每个父节点的值总是小于等于它的左、右子节点的值。 再比如，判断数据序列：93,82,76,63,58,67,55是否为堆，将其转换为一颗完全二叉树，如下图： 上图的完全二叉树完全满足大顶堆的要求:每个父节点的值总是大于等于它的左、右子节点的值。 经过上面的介绍不难发现一点，大顶堆的根竹点一定是这组数据中值最大的竹点。也就是说，如果需要对一组数据进行排序，只需先将这组数据建成大项堆，就选择出了这组数据的最大值。 堆排序的关键在于健堆，它按如下步骤完成排序。 第1趟:将索引0~n-1处的全部数据建成大顶〔或小项)堆，就可以选择出这组数据中的最大(或最小)值。 将上一步所建的大顶(或小顶)堆的根节点与这组数据的最后一个节点交换，就使得这组数据中的最大(或最小)值排在最后。 第2趟:将索引0~n-2处的全部数据建成大顶〔或小顶)堆，就可以选择出这组数据中的最大&lt;或最小)值。 将上一步所建的大顶(或小顶)堆的根节点与这组数据的倒数第2个节点交换，就使得这组数据中的最人(或最小)值排在倒数第2位。 …….. 第k趟;将索引O一。一处的全部数据建成大顶(或小顶)堆，就可以选择出这组数据中的最大(或最小)值。 将上一步所建的大项(或小顶)堆的根节点与这组数据的倒数第k个节点交换，使得这组数据中的最大(或最小)值排在倒数第k位。 通过上面的介绍不难发现，堆排序的步骤就是重复执仃以下两步。 建堆 拿堆的根节点和最后一个节点交换 由此可见，对于包含N个数据元素的数据组而言，堆排序需要经过N-1次建堆，每次建堆的作用就是选出该堆的最大值或最小值。堆排序本质上依然是一种选择排序。 堆排序与直接选择排序的差别在于，堆排序可通过树形结构保存部分比较结果，可减少比较次数。对于直接选择排序而言，为了从a0,a1,a2,a3,…,an-1中选出最小的数据，必须进行n-1次比较:然后在a1,a2,a3,…,an-1中选出关键字最小的记录，又需要做n-2次比较。事实上，在后面的。n-2次比较中，有许多比较可能在前面的n-1次比较中己经做过，但由于前一趟排序时未保留这些比较结果，所以后一趟排序时又重复执行了这些比较操作_堆排序可通过树形结构保存前面的部分比较结果，从而提高效率。 接下来的关键就是建堆的过程。建堆其实比较简单，不断地重复如下步骤即可〔以建大顶堆为例)。 从最后一个非叶子节点开始，比较该节点和它两个子节点的值;如果某个子节点的值大于父节点的值，就把父节点和较大的子节点交换。 向前逐步调整直到根节点，即保证每个父节点的值都人于等于其左、右子节点的值，建堆完成。 例如，有如下数据组：9,79,46,30,58,49下面逐步介绍对其建堆的过程。 先将其转换为完全二义树，转换得到的完全二义树如图下所示。 完全二叉树的最后一个非叶子节点，也就是最后一个节点的父节点。最后一个节点的索引为数组长度-1。也就是len-1 ,那么最后一个非叶子节点的索引应该为(len-2)/2。也就是从索引为2的节点开始，如果其子节点的值大于它本身的值，则把它和较大的子节点进行交换，即将索引为2的节点和索引为5的元素交换，交换后的结果如下图所示。 向前处理前一个非叶子节点(索引为(len-2)1)-1)，也就是处理索引为1的节点，此时79&gt;30,79&gt;58,因此无须交换。 向前处理前一个非叶子节点，也就是处理索引为0的节点，此时9&lt;79,因此需要交换。应该拿索引为0的节点和索引为1的节点交换〔在9的两个子节点中。索引为1的节点的值较大)，交换后的完全二叉树如下图所示。 如果某个节点和它的某个子节点交换后，该子节点又有子节点，那么系统还需要再次对该子节点进行判断。例如，上图中索引为0的节点和索引为1的节点交换后，索引为1的节点还有子节点，因此程序必须再次保证索引为l的节点的值大于等于其左、右子节点的值。因此还需要交换一次，交换后的大顶堆如下图所示。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public class SelectSort &#123; static void heapSort(DataWrap[] data)&#123; System.out.println(&quot;开始排序&quot;); int arrayLength=data.length; for(int i=0;i&lt;arrayLength-1;i++)&#123; builMaxdHeap(data, arrayLength-1-i); swap(data, 0, arrayLength-1-i); &#125; &#125; public static void builMaxdHeap(DataWrap[] data,int lastIndex)&#123; for(int i=(lastIndex-1)/2;i&gt;=0;i--)&#123; int k=i; while(k*2+1&lt;=lastIndex)&#123; int biggerIndex=2*k+1; if(biggerIndex&lt;lastIndex)&#123; if(data[biggerIndex].compareTo(data[biggerIndex+1])&lt;0)&#123; biggerIndex++; &#125; &#125; if(data[k].compareTo(data[biggerIndex])&lt;0)&#123; swap(data, k, biggerIndex); k=biggerIndex; &#125;else&#123; break; &#125; &#125; &#125; &#125; private static void swap(DataWrap[] data,int i,int j)&#123; DataWrap tmp=data[i]; data[i]=data[j]; data[j]=tmp; &#125; public static void main(String[] args) &#123; DataWrap[] data=&#123; new DataWrap(21,&quot;&quot;), new DataWrap(30,&quot;&quot;), new DataWrap(49,&quot;&quot;), new DataWrap(30,&quot;&quot;), new DataWrap(16,&quot;&quot;), new DataWrap(9,&quot;&quot;) &#125;; System.out.println(&quot;排序之前:&quot;+Arrays.toString(data)); heapSort(data); System.out.println(&quot;排序之后:&quot;+Arrays.toString(data)); &#125; &#125; 运行结果如下： 对于堆排序算法而言，假设有n个数据，需要进行n-1次建堆，每次建堆本身耗时为log2n则其时间效率为例O(n*log2n)。 堆排序算法的空间效率很高，它只需要一个附加程序单元用于交换，其空间效率为O(1). 交换排序交换排序的主体操作是对数据组中的数据不断地进行交换操作。交换排序主要有冒泡排序和快速排序，这两种排序都是广为人知且应用及广的排序算法。 冒泡排序冒泡排序是最广为人知的交换排序之一，它具有算法思路简单、容易实现的特点。 对于包含,个数据的一组记录，在最坏的情况卜，冒泡排序需要进行n-1趟比较。 第1趟:依次比较0和1、1和2、2和3、…、n-2和n-1索引处的元素，如果发现第一个数据大于后一个数据，则交换它们，经过第1趟比较，最大的元素排到了最后。 第2趟:依次比较0和1、1和2、2和3、…、n-3和n-2索引处的元素，如果发现第一个数据大于后一个数据，则交换它们。经过第2趟比较，第2大的元素排到了倒数第2位。 ……. 第n-1趟:依次比较0和1元素，如果发现第一个数据大于后一个数据，则交换它们。经过第n-1趟比较，第2小(第n-1大)的元素排到了第2位， 实际上，冒泡排序的每趟交换结束后，不仅能将当前最大值挤出最后面位置，还能部分理顺前面的其他元素;一旦某趟没有交换发生，即可提前结束排序。 假设有如下数据序列: 9,16,21,23,30, 49, 21,30 只需要经过如下几趟排序。 第1趟:9,16,21,23,30,21,30,49第2趟:9,16,21,23,21,30,30,49第3趟:9,16,21,21,23,30,30,49第4趟:9,16,21,21,23,30,30,49 从上面的排序过程可以看出，虽然该组数据包含8个元素，但采用冒泡排序只需要经过4趟比较。因为经过第3趟排序后，这组数据已经处于有序状态，这样，第4趟将不会发生交换，因此可以提前结束循环。 123456789101112131415161718192021//冒泡排序 public static void bubbleSort(DataWrap[] data)&#123; System.out.println(&quot;开始排序&quot;); int arrayLength=data.length; for(int i=0;i&lt;arrayLength-1;i++)&#123; boolean flag=false; for(int j=0;j&lt;arrayLength-1-i;j++)&#123; if(data[j].compareTo(data[j+1])&gt;0)&#123; DataWrap tmp=data[j-1]; data[j+1]=data[j]; data[j]=tmp; flag=true; &#125; &#125; System.out.print(Arrays.toString(data)+&quot;\\n&quot;); if(!flag)&#123; break; &#125; &#125; &#125; 冒泡排序算法的时间效率是不确定的，在最好的情况下，初始数据序列已经处于有序状态，执行1趟冒泡即可，做n-1次比较，无须进行任何交换;但在最坏的情况下，初始数据序列处于完全逆序状态，算法要执行n-1趟冒泡，第i趟(1&lt;i&lt;n)做了n-i次比较，执行n-i-1次对象交换。此时的比较总次数为n(n-1)/2，记录移动总次数为n(n-1)*3/2. 冒泡排序算法的空间效率很高，它只需要一个附加程序单元用于交换，其空间效率为O(1)。冒泡排序是稳定的。 快速排序快速排序是一个速度非常快的交换排序方法，它的基本思路很简单:从待排序的数据序列中任取一个数据(如第一个数据)作为分界值，所有比它小的数据元素一律放在左边，所有比它大的数据元素一律放在右边口经过这样一趟下来，该序列形成左、右两个子序列，左边序列中数据元素的值都比分界值小，右边序列中数据元素的值都比分界值大。 接下来对左、右两个子序列进行递归，对两个子序列重新选择中心元素并依此规则调整，直到每个子序列的元素只剩一个，排序完成。 从上面的算法分析可以看出，实现快速排序的关键在于第一趟要做的事情，如下所示。 选出指定的分界值————这个容易完成 将所有比分界值小的数据元素放在左边。 将所有比分界值大的数据元素放在右边。 现在的问题是，如何实现上面的第2和3步?这时就要用到交换了，思路如下。 定义一个i变量，i变量从左边第一个索引开始，找大于分界值的元素的索引，并用来记录它。 定义一个j变量,j变量从右边第一个索引开始，找小于分界值的元素的索弓卜并用j来记录它。 如果i &gt;j，则交换i, j两个索引处的元素。 重复执行以上1~3步，直到i&gt;=j，可以判断j左边的数据元素都小于分界值，j右边的数据元素都大于分界值，最后将分界值和j索引处的元素交换即可。 下图显示了快速排序一趟操作的详细过程。 从下图可以看出，快速排序的速度确实很快，只要经过两次交换，即可让分界值左边的数据都小于分界值，分界值右边的数据都大于分界值。 12345678910111213141516171819202122232425262728293031323334353637383940//快速排序 public static void quickSort(DataWrap[] data)&#123; subSort(data,0,data.length-1); &#125; //对data数组中从start到end索引范围的子序列进行处理 //使之满足所有小于分界值的放在左边，所有大于分界值的放在右边 private static void subSort(DataWrap[] data,int start,int end)&#123; //需要排序 if(start&lt;end)&#123; //以第一个元素作为分界值 DataWrap base=data[start]; //i从左边开始搜索，搜索大于分界值的元索的索引 int i=start; //j从右边开始搜索，搜索小于分界值的元素的索引 int j=end+1; while(true)&#123; //找到大于分界值的元索的索引。或i已经到了end处 while(i&lt;end&amp;&amp;data[++i].compareTo(base)&lt;=0); //找到小于分界值的元紊的索引，或j已经到了start处 while(j&gt;start&amp;&amp;data[--j].compareTo(base)&gt;=0); if(i&lt;j)&#123; swap(data, i, j); &#125;else&#123; break; &#125; &#125; swap(data, start, j); //递归左边子序列 subSort(data, start, j-1); //递归右边子序列 subSort(data, j+1, end); &#125; &#125; private static void swap(DataWrap[] data,int i,int j)&#123; DataWrap tmp=data[i]; data[i]=data[j]; data[j]=tmp; &#125; 快速排序的时间效率很好，因为它每趟能确定的元素呈指数增长。 快速排序需要使用递归，而递归使用栈，因此它的空间效率为O(log2n). 快速排序中包含跳跃式交换，因此是不稳定的排序算法。 插入排序直接插入排序直接插入排序的思路非常简单:依次将待排序的数据元素按其关键字值的大小插入前面的有序序列。 细化来说，对于一个有n个元素的数据序列，排序需要进行n-1趟插入操作.如下所示。 第1趟插入:将第2个元素插入前面的有序子序列中，此时前面只有一个元素，当然是有序的。 第2趟插入:将第3个元素插入前面的有序子序列中，前面两个元素是有序的。 …… 第n-1趟插入:将第。个元素插入前面的有序子序列中，前面n-l个元素是有序的。掌握了上面的排序思路之后，如下程序实现了直接插入排序。 1234567891011121314151617181920//直接插入排序public static void insertSort(DataWrap[] data)&#123; System.out.println(&quot;开始排序:\\n&quot;); int arrayLength=data.length; for(int i=1;i&lt;arrayLength;i++)&#123; //当整体后移时，保证data [i]的值不会丢失 DataWrap tmp=data[i]; //i索引处的值己经比前面的所有值都大，表明己经有序，无须插入 //(i-1索引之前的教据己经有序，i-1素引处元紊的值就是最大值) if(data[i].compareTo(data[i-1])&lt;0)&#123; int j=i-1; for(;j&gt;=0&amp;&amp;data[j].compareTo(tmp)&gt;0;j--)&#123; data[j+1]=data[j]; &#125; //最后将tmp的值插入合适位置 data[j+1]=tmp; &#125; System.out.println(Arrays.toString(data)); &#125;&#125; 直接插入排序的时间效率并不高，在最坏的情况下，所有元素的比较次数总和为(0+1+…+n-1)=O(nn);在其他情况下，也要考虑移动元素的次数，故时间复杂度为O(nn)。 直接插入排序的空间效率很好，它只需要一个缓存数据单元，也就是说，空间效率为O(1). 直接插入排序是稳定的。 折半插入排序折半插入排序是对直接插入排序的简单改进。对于直接插入排序而言，当第i-1趟需要将第i个元索插入前面的0~i-1个元素序列中时，它总是从i-1个元素开始，逐个比较每个元素，直到找到它的位置。这显然没有利用前面0~i-1个元素己经有序这个特点，而折半插入排序则改进了这一点。 对于折半插入排序而言，当第i-1趟需要将第i个元素插入前面的0~i-1个元素序列中时，它不会直接从0~i-1个元索开始逐个比较每个元素。折半插入排序的做法如下。 计算0~i-1索引的中间点，也就是用i索引处的元素和(0+i-1)/2索引处的元素进行比较，如果i索引处的元素大，就直接在(0+i-1)/2~i-1半个范围内搜索;反之,就在0~(0+i-1)/2半个范围内搜索，这就是所谓的折半. 在半个范围内搜索时,再按第1步方法进行折半搜索.总是不断地折半,这样就可以将搜索范围缩小到1/2,1/4,1/8,从而快速确定第i个元素的插入位置. 一旦确定了第i个元素的插入位置，剩下的事情就简单了。程序将该位置以后的元素整体后移一位，然后将第i个元素放入该位置。 1234567891011121314151617181920212223//折半插入排序public static void binaryInsertSort(DataWrap[] data)&#123; System.out.println(&quot;开始排序:\\n&quot;); int arrayLength=data.length; for(int i=1;i&lt;arrayLength;i++)&#123; DataWrap tmp=data[i]; int low=0; int high=i-1; while(low&lt;=high)&#123; int mid=(low+high)/2; if(tmp.compareTo(data[mid])&gt;0)&#123; low=mid+1; &#125;else&#123; high=mid-1; &#125; &#125; for(int j=i;j&gt;low;j--)&#123; data[j]=data[j-1]; &#125; data[low]=tmp; System.out.println(Arrays.toString(data)); &#125;&#125; 上面程序中的粗体字代码就是折半插入排序的关键代码。程序会拿tmp的值和mid索引(就是中间索引)处的值进行比较，如果tmp大于mid索引处的元素，则将low(搜索范围的下限)设置为mid+1，即表明在mid+1到原high范围内搜索;反之，将high(搜索范围的上限)设置为mid-1，即表明在原low至mid-l范围内搜索。 上面程序的排序效果与直接插入排序的效果基本相同，只是更快一些，因为折半插入排序可以更快地确定第l个元素的插入位置。 Shell排序 对于直接插入排序而言，当插入排序执行到一半时，待插值左边的所有数据都已经处于有序状态，直接插入排序将待插值存储在一个临时变量里。然后，从待插值左边第一个数拟单元开始，只要该数据单元的值大于待插值，该数据单元就右移一格，直到找到第一个小于待插值的数据单元。接下来，将临时变量里的值放入小于待插值的数据单元之后(前面的所有数据都右移过一格，因此该数据单元有一个空格)。 从上面算法可以发现一个问题:如果一个很小的数据单元位于很靠近右端的位置上,为了把这个数据单元移动到左边正确的位置上，中间所有的数据单元都需要向右移动一格。这个步骤对每一个数据项都执行了近n次的复制。虽然不是所有数据项都必须移动。个位置，但平均下来，每个数据项都会移动n/2格，总共是nn/2次复制。因此，插入排序的执行效率是O(nn) Shell排序对直接插入排序进行了简单改进:它通过加大插入排序中元素之间的间栖，井在这些有间隔的元素中进行插入排序，从而使数据项大跨度地移动。当这些数据项排过一趟序后，Shell排序算法减小数据项的间隔再进行排序，依此进行下去。这些进行排序的数据项之间的间隔被称为增量，习惯上用h来表示这个增量。 下面以如下数据序列为例，进行说明。 9,-16,21,23,-30,-49,21,30,30 如果采用直接插入排序算法，第i趟插入会将第i+1个元素插入前面的有序序列中，将看到: -16,9,21,23,-30,-49,21,30,30——第1趟,将第2个元素插入，前两个元素有序 -16,,9,21,23,-30,-49,21,30,30——第2趟，将第3个元素插入，前三个元素有序。 …… Shell排序就不这样了。假设本次She}1排序的h为4，其插入操作如下. -30,-16,21,23,9,-49,21,30,30 -30,-49,21,23,9,-16,21,30,30 -30,-49,21,23,9,-16,21,30,30 -30,-49,21,23,9,-16,21,30,30 -30,-49,21,23,9,-16,21,30,30 注意上面排序过程中的粗体字数据。 当h增量为4时，第1趟将保证索引为0, 4, 8的数据元素己经有序。第1趟完成后，算法向右移一步，对索引为1,5的数据元素进行排序。这个排序过程持续进行，直到所有的数据项都已经完成了以4为增量的排序。也就是说，所有间隔为4的数据项之间都己经排列有序。 当完成以4为增量的shell排序后，所有元素离它在最终有序序列中的位置相差不到两个单元，这就是数组“基本有序”的含义，也正是Shell排序的奥秘所在。通过创建这种交错的内部有序的数据项集合，就可以减少直接插入排序中数据项“整体体搬家”的工作量。 上面已经演示了以4为增量的”hell排序，接下来应该减少增量，直到完成以1为增量的Shell排序，此时数据序列将会变为有序序列。 从下面介绍可知，最终确定Shell排序算法的关键就在于确定h序列的值。常用的h序列由Knuth操出.该序列从1开始.诵讨如下公式产生。 h=3*h+1 上面公式用于从1开始计算这个序列，可以看到h序列为1,4,13,40，……,反过来,程序中还需要反向计算h序列，那应该使用如下公式。 h=(h-1/3) 上面公式从最大的h开始计算，假设h从40开始，可以看到h序列为40， 13， 4, 1。 Shell排序比插入排序快很多，因为当h值大的时候，数据项每一趟排序需要移动元素的个数很少，但数据项移动的距离很长，这是非常有效率的。当h减小时，每一趟排序需要移动的元素的个数增多，但是此时数据项己经接近于它们排序后最终的位置，这对于插入排序可以更有效率。正是这两种情况的结合才使Shell排序效率这么高。 1234567891011121314151617181920212223//Shell排序public static void shellSort(DataWrap[] data)&#123; System.out.println(&quot;开始排序:&quot;); int arragLength=data.length; int h=1; while(h&lt;=arragLength/3)&#123; h=h*3+1; &#125; while(h&gt;0)&#123; for(int i=h;i&lt;arragLength;i++)&#123; DataWrap tmp=data[i]; if(data[i].compareTo(data[i-h])&lt;0)&#123; int j=i-h; for(;j&gt;=0&amp;&amp;data[j].compareTo(tmp)&gt;0;j-=h)&#123; data[j+h]=data[j]; &#125; data[j+h]=tmp; &#125; System.out.println(Arrays.toString(data)); &#125; h=(h-1)/3; &#125;&#125; shell排序是直接插入排序的改进版，因此它也是稳定的，它的空间开销也是O(1)，时间开销估计在O(n的(3/2)次方)~O(n的(7/6)次方)之间。 归并排序归并的基本思想是将两个(或以上〕有序的序列合并成一个新的有序序列。当然，此处介绍的归并排序主要是将两个有序的数据序列合并成一个新的有序序列。 细化来说，归并排序先将长度为月的无序序列看成是n个长度为1的有序子序，首先做两两合并，得到n/2个长度为2的有序子序列，再做两两合并……不断地重复这个过程，最终可以得到一个长度为n的有序序列。 假设有如下数据序列： 21,30,49,30*，97,62,72,08,37,16,54 程序对其不断合并的过程如下： 从上图可以看出，长度为16的数据序列，只需经过4次合并。也就是说，对于长度为n的数据序列，只需经过log2n次合并。 对于归并排序而言，其算法关键就在于“合并”。那么，如何将两个有序的数据序列合并成一个新的有序序列?合并算法的具体步骤如下。 定义变量i,i从0开始,依次等于A序列中每个元素的索引。 定义变量j,j从0开始,依次等于B序列中每个元素的索引 拿A序列中i索引处的元素和B序列中j索引处的元素进行比较，将较小的复制到一个临时数组中。 如果i索引处的元素小，则i++;如果j索引处的元素小，则j++. 不断地重复上面四个步骤，即可将A、B两个序列中的数据元素复制到临时数组中，直到其中一个数组中的所有元素都被复制到临时数组中.最后，将另一个数组中多出来的元素全部复制到临时数组中，合并即完成，再将临时数组中的数据复制回去即可。 下图显示了归并排序算法合并操作的实现细节。 123456789101112131415161718192021222324252627282930313233343536//归并排序public static void mergeSort(DataWrap[] data)&#123; sort(data,0,data.length-1); &#125; private static void sort(DataWrap[] data,int left,int right)&#123; if(left&lt;right)&#123; int center=(left+right)/2; sort(data, left,center); sort(data, center+1, right); merge(data, left, center, right); &#125;&#125; private static void merge(DataWrap[] data,int left,int center,int right)&#123; DataWrap[] tmpArr=new DataWrap[data.length]; int mid=center+1; int third=left; int tmp=left; while(left&lt;=center&amp;&amp;mid&lt;=right)&#123; if(data[left].compareTo(data[mid])&lt;=0)&#123; tmpArr[third++]=data[left++]; &#125;else&#123; tmpArr[third++]=data[mid++]; &#125; &#125; while(mid&lt;=right)&#123; tmpArr[third++]=data[mid++]; &#125; while(left&lt;=center)&#123; tmpArr[third++]=data[left++]; &#125; while(tmp&lt;right)&#123; data[tmp]=tmpArr[tmp++]; &#125;&#125; 从上面的算法实现可以看出，归并算法需要递归地进行分解、合并，每进行一趟归并排序需要调用merge()方法一次，每次执行merge()方法需要比较n次，因此归并排序算法的时间复杂度为侧O(n*log2N) 归并排序算法的空间效率较差，它需要一个与原始序列同样大小的辅助序列。 归并排序算法是稳定的。 桶式排序桶式排序不再是一种基于比较的排序方法，它是一种非常巧妙的排序方式，但这种排序方式需要待排序列满足如下两个特征。 待排序列的所有值处于一个可枚举范围内。 待排序列所在的这个可枚举范围不应该太大，否则排厅开销太大。 下面介绍桶式排序的详细过程，以如下待排序列为例。 5,4,2,4,1 这个待排序列处于0,1,2,3,4,5这个可枚举范围内，而且这个范围很小，正是桶式排序大派用场之时。 具体步骤如下： 对这个可枚举范围构建一个buckets数组，用于记录“落入”每个桶中的元素的个数，于是可以得到如下图所示的buckets数组。 按如下公式对上图所示的buckets数组的元素进行重新计算。buckets[i] = buckets[i]+buckets[i-1](其中1 &lt;=i&lt;= buckets.length } 得到如下图buckets数组 桶式排序的巧妙之处如上图所示。重新计算后的buckets数组元素保存了“落入”当前桶和“落入”前面所有桶中元素的总数目，而且定义的桶本身就是从小到大排列的，也就是说，“落入”前面桶中的元素肯定小于“落入”当前桶中的元素。综合上面两点，得到了一个结论:每个buckets数组元素的值小于、等于“落入”当前桶中元素的个数。也就是说，“落入”当前桶中的元素在有序序列中应该排在buckets数组元素值所确定的位置。 上面理论还有点抽象。以待排序列中最后一个元索1为例，找到新buckets数组中元素对应桶的值，该值为1，这表明元素1就应该排在第1位:再以待排序列中倒数第2个元素4为例，找到新buckets数组中元素4对应桶的值，该值为4，这表明元素4就应该排在第4位….依此类推。 12345678910111213141516171819202122232425262728293031//桶式排序public static void bucketSort(DataWrap[] data,int min,int max)&#123; System.out.println(&quot;开始排序:&quot;); //arrayLength记录待排序数组的长度 int arrayLength=data.length; DataWrap[] tmp=new DataWrap[arrayLength]; //buckets数组相当于定义了max一min个桶 //buckets数组用于记录待排序元素的信息 int[] buckets=new int[max-min]; //计算每个元素在序列中出现的次数 for(int i=0;i&lt;arrayLength;i++)&#123; //buckets数组记录了DataWrap出现的次数 buckets[data[i].data-min]++; &#125; System.out.println(Arrays.toString(data)); //计算“落入”各桶内的元素在有序序列中的位置 for(int i=1;i&lt;max-min;i++)&#123; //前一个bucket的值+当前bucket的值一&gt;当前bucket新的值 buckets[i]=buckets[i]+buckets[i-1]; &#125; //循环结束后，buckets数组元素记录了“落入”前面所有捅和 //&quot;落入&quot;当前buckets中元素的总数 //也就是说，buckets数组元素的值代表了“落入”当前桶中的元紊在有序序列中的位置 System.out.print(Arrays.toString(buckets)); //将data数组中数据完全复制到tmp数组中级存起来 System.arraycopy(data,0, tmp, 0, arrayLength); //根据buckets数组中的信息将待排序列的各元索放入相应的位置 for(int k=arrayLength-1;k&gt;=0;k--)&#123; data[--buckets[tmp[k].data-min]]=tmp[k]; &#125;&#125; 基数排序基数排序已经不再是一种常规的排序方法，它更多地像是一种排序方法的应用，基数排序必须依赖于另外的排序方法。基数排序的总体思路就是将待排数据拆分成多个关键字进行排序，也就是说，基数排序的实质是多关键字排序。 多关键字排序的思路是将待排数据里的排序关键字拆分成多个排序关键字:第1个子关堆字、第2个子关键字、第3个子关键字……然后，根据子关键字对待排数据进行排序。 在进行多关键字排序时有两种解决方案。 最高位优先法MSD(Mast Significant Digit first}. 最低位优先法LSD(Least Significant Digit first ). 例如，对如下数据序列进行排序: 192,221,12,23 可以观察到它的每个数据至多只有3位，因此可以将每个数据拆分成3个关键字:百位〔高位)、十位、个位(低位)。 如果按照习惯思维，会先比较百位，百位大的数据大:百位相同的再比较十位，十位大的数据大;最后再比较个位。人的习惯思维是最高位优先方式。 如果按照人的思维方式，计算机实现起来有一定困难，当开始比较十位时，程序还需要判断它们的百位是否相同—这就人为地增加了难度。计算机通常会选择最低位优先法，如下所示。 第1轮先比较个位，对个位关键字排序后得到序列为: 221,192,13,23 第2轮再比较十位，对十位关键字排序后得到序列为: 13,23,221,192 第3轮再比较百位，对百位关键字排序后得到序列为: 13,23,192,22 从上面介绍可以看出，基数排序方法对任一个子关键字排序时必须借助于另一种排序方法，而且这种排序方法必须是稳定的。 如果这种排序算法不稳定，比如上面排序过程中，经过第2轮十位排序后，在第3轮百位排序时，如果该排序算法是稳定的，那么13依然位于23之前:如果该算法不稳定，那么可能l3跑到23之后，这将导致排序失败。 现在的问题是，对子关键字排序时，到底选择哪种排序方式更合适呢?答案是桶式排序。 回顾桶式排序的两个要求: 待排序列的所有值处于一个可枚举范围内。 待排序列所在的这个可枚举范围不应该太大。 对于多关键字拆分出来的子关键字，它们一定位于0~9这个可枚举范围内，这个范围也不大，因此用桶式排序效率非常高。 123456789101112131415161718192021222324252627282930313233//基数排序public static void radixSort(int[] data,int radix,int d)&#123; System.out.println(&quot;开始排序:&quot;); int arrayLength=data.length; //需要一个临时教组 int[] tmp=new int[arrayLength]; //buckets数组是捅式排序必书的buckets数组 int[] buckets=new int[radix]; //依次从高位的子关健字对待排戴据进行排序 //下面循环中rate用于保存当前计算的位(比如十位时rate-10) for(int i=0,rate=1;i&lt;d;i++)&#123; //重置count数组，开始统计第二个关键字 Arrays.fill(buckets, 0); //将data数组的元素复制到trnp数组中进行缓存 System.arraycopy(data, 0, tmp, 0, arrayLength); //计算每个待排数据的子关键字 for(int j=0;j&lt;arrayLength;j++)&#123; //计算数据指定位上的子关键字 int subKey=(tmp[j]/rate)%radix; buckets[subKey]++; &#125; for(int j=1;j&lt;radix;j++)&#123; buckets[j]=buckets[j]+buckets[j-1]; &#125; //按子关键字对指定数据进行排序 for(int m=arrayLength-1;m&gt;=0;m--)&#123; int subKey=(tmp[m]/rate)%radix; data[--buckets[subKey]]=tmp[m]; &#125; System.out.println(&quot;对&quot;+rate+&quot;位上子关键字排序:&quot;+Arrays.toString(data)); rate*=radix; &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂java笔记之树和二叉树","slug":"疯狂java笔记之树和二叉树","date":"2017-08-31T16:43:03.000Z","updated":"2017-08-31T16:44:00.540Z","comments":true,"path":"2017/09/01/疯狂java笔记之树和二叉树/","link":"","permalink":"http://jack921.win/2017/09/01/疯狂java笔记之树和二叉树/","excerpt":"","text":"树的概述树是一种非常常用的数据结构，树与前面介绍的线性表，栈，队列等线性结构不同，树是一种非线性结构 1.树的定义和基本术语计算机世界里的树，是从自然界中实际的树抽象而来的，它指的是N个有父子关系的节点的有限集合。对于这个有限的节点集合而言，它满足如下条件： 当N=0时，改节点集合为空，这课树也被称为空树 在任意的非空树中，有且仅有一个根(root)节点 当N&gt;1时，除根节点以外的其余节点可分为M个互为相交的有限集合T1,T2,…,Tm，其中的每个集合本身又是一棵树，并称其为根的子树（subtree）。 从上面定义可以发现树的递归特性：一棵树由根和若干棵子树组成，而每棵子树又由若干棵更小的子树组成。 树中任一节点可以有0或多个子节点，但只能有一个父节点。根节点是一个特例，根节点没有父节点，叶子节点没有子节点。树中每个节点既可以是其上一级节点的子节点，也可以是下一级节点的父节点，因此同一个节点既可以是父节点，也可以是子节点(类似于一个人—————他既是他儿子的父亲，又是他父亲的儿子)。 很显然，父子关系是一种非线性关系，所以树结构是非线性结构。 如果按节点是否包含子节点来分，节点可以分成以下两种: 普通节点：包含子节点的节点 叶子节点：没有子节点的节点，因此叶子节点不可作为父节点 如果按节点是否具有唯一的父节点来分，节点有可分为如下两种： 根节点：没有父节点的节点，根节点不可作为子节点 普通节点：具有唯一父节点的节点 一棵树只能有一个根节点，如果一棵树有了多个根节点，那么它已经不再是一棵树了，而是多棵树的集合，有时也被称为森林。示意图如下：与树有关的术语有如下一些： 节点：树的最基本组成单元，通常包括一个数据元素及若干指针用于指向其他节点。 节点的度：节点拥有的子树的个数被称为节点的度（degree） 树的度：树中所有节点的度的最大值就是该树的度 叶子节点：度为0的节点被称为叶子节点或终端节点 分支节点：度不为0的节点被称为分支节点或非终端节点 子节点,父节点，兄弟节点：节点的子树的根被称为该节点的子节点，而该节点称为子节点的父节点(parent).具有相同父节点的子节点之间互称为兄弟节点。 节点的层次(level):节点的层次从根开始算起，根的层次值为1，其余节点的层次值为父节点层次值加l。 树的深度(depth):树中节点的最大层次值称为树的深度或高度。 有序树与无序树:如果将树中节点的各棵子树看成从左到右是有序的(即不能互换),则称该树为有序树,否则称为无序树。 祖先节点(ancestor)：从根到该节点所经分支上的所有节点 后代节点(descendant):以某节点为根的子树中任一节点都称为该节点的后代节点。 森林(forest):森林是；两颗或两颗以上互不相交的树的集合，删去一棵树的根，就得到一个森林。 树的基本操作如果需要实现一棵树，程序不仅要以合适的方式保存该树的所有节点，还要记录节点与节点之间的父子关系。接下来，还应该为树实现如下基本操作。 初始化:通常是一个构造器，用于创建一棵空树，或者以指定节点为根来创建树。 为指定节点添加子节点 判断树是否为空 返回根节点 返回指定节点（非根节点）的父节点 返回指定节点（非叶子节点）的所有子节点 返回指定节点（非叶子节点）的第i个子节点 返回该树的深度 返回指定节点的位置为了实现树这种数据结构，程序必须能记录节点与节点之间的父子关系，为此有一下两种选择： 父节点表示法:每个子节点都记录它的父节点。 子节点链表示法:每个非叶子节点通过一个链表来记录它所有的子节点。 父节点表示法通过前面的介绍可以发现，树中除根节点之外的每个节点都有一个父节点。为了记录树中节点与节点之间的父子关系，可以为每个节点增加一个parent域，用以记录该节点的父节点。用如下图和如下表来表示 数组索引 data parent 0 A -1 1 B 0 2 C 0 3 D 0 4 E 1 5 F 3 6 G 3 7 H 4 8 I 4 9 J 4 10 K 6 … … … 由此可见，只要用一个节点数组来保存树里的每个节点，并让每个节点记录其父节点在数组中的索引即可。 子节点链表表示法父节点表示法的思想是让每个节点“记住”它的父节点的索引，父节点表示法是从子节点着手的;反过来，还有另外一种方式:让父节点“记住”它的所有子节点口在这种方式下，由于每个父节点需要记住多个子节点，因此必须采用“子节点链”表示法。示意图如下： 二叉树二叉树的定义和基本概念二叉树指的是每个节点最多只能有两个子树的有序树。通常左边的子树被称作“左子树”(left subtree)，右边的子树被称为“右子树”(right subtree).由此可见，二叉树依然是树，它是一种特殊的树。二叉树的每个节点最多只有来两颗树(不存在度大于2的节点)，二叉树的子树有左，右之分，次序不能颠倒。树和二叉树的两个重要区别如下： 树中节点的最大度数没有限制，而二叉树节点的最大度数为2，也就是说，二叉树是节点的最大度数为2的树。 无序树的节点无左右之分，而二叉树的节点有左，右之分，也就是说，二叉树是有序树。 一棵深度为k的二叉树，如果它包含了12^k-1 个节点，就把这棵二叉树称为满二叉树。满二叉树的特点是。每一层上的节点数都是最大节点数，即各层节点数分别为1,2,4,8, 16,…,满二叉树下图所示： 一颗有n个节点的二叉树，按满二叉树的编号方式对它进行编号，若树中所有节点和满二叉树1~n编号完全一致，则称该树为完全二叉树。也就是说，如果一颗二叉树除最后一层外，其余层的所有节点都是满的，并且最后一层或者是满的，或者仅在右边缺少若干连续的节点，则此二叉树就是完全二叉树。 综上所述，二叉树大致有如下几个性质： 二叉树第i层上的节点数据至多为2的i-1次方 深度为k的二叉树至多有2的k次方-1个节点.满二叉树的每层节点的数量依次为1, 2, 4,8,…,因此深度为k的满二叉树包含的节点数为公比为2的等比数列的前k项总和，即2的k次方一1。 在任何一棵二叉树中，如果其叶子节点的数量为n0,度为2的子节点数量为n2，则n0=n2 + 1。这是因为:如果为任意叶子节点增加一个子节点，则原有叶子节点变成非叶子节点，新增节点变成叶子节点，上述等式不变;如果为任意叶子节点增加两个子节点，则原有叶子节点变成度为2的非叶子lto点，新增的两个节点变成叶子节点，上述等式依然不变。 具有n个节点的完全二叉树的深度为log2(n+1) 对于一颗具有n个节点的完全二叉树的节点按层自左向右编号，则对任一编号为i(n&gt;=i&gt;=1)的节点有下列性质。 当i==1时，节点i是二叉树的根；若i&gt;1，则节点的父节点是i/2 若2i&lt;n,则节点i有左孩子，左孩子的编号是2i;否则，节点无左孩子，并且是叶子节点 若2i+1&lt;=n,则节点i有右孩子，右孩子的编号是2i+1;否则，节点无右孩子。 1~n/2范围的节点都是有孩子节点的非叶子节点，其余的节点全部都是叶子节点。编号为n/2的节点可能只有左子节点，也可能即有左子节点，又有右子节点。 二叉树的基本操作二叉树记录其节点之间的父子关系更加简单，因为二叉树中的每个节点最多只能保存两个子节点。接下来，程序也需要为二叉树实现如下基本操作。 初始化：通常是一个构造器，用于创建一颗空树，或者以指定节点为根来创建二叉树。 为指定节点添加子节点 判断二叉树是否为空 返回根节点 返回指定节点(非根节点)的父节点 返回指定节点(非叶子节点)的左子节点 返回指定节点(非叶子节点)的右子节点 返回该二叉树的深度 返回指定节点的位置 要实现二叉树这种数据结构，有以下三种选择。 顺序存储:采用数组来记录二叉树的所有节点。 二叉链表存储:每个节点保留一个left,right域，分别指向其左、右子节点。 三叉链表存储:每个节点保留一个left, right,parent域，分别指向其左、右子节点和父节点。 二叉树的顺序存储顺序存储指的是充分利用满二叉树的特性:每层的节点数分别为1, 2, 4, 8,…,2的(i-1)2的i次方。一棵深度为i的二叉树最多只能包含2的i次方一1个节点，因此只要定义一个长度为2的i次方一1的数组即可存储这棵二叉树。 对于普通二叉树(不是满二叉树)，那些空出来的节点对应的数组元素留空就可以了。由此可见，二叉树采用顺序存储会造成一定的空间浪费。对于下图1所示的二叉树(完全二叉树)，采用下图2所示的数组来保存即可。 对于左图所示的二叉树，需使用右图所示的数组来保存。 当使用数组来存储二又树的所有节点时可能会产生一定的空间浪费，如果该二叉树是完全二叉树，就不会有任何空间浪费了;但如果该二叉树的所有节点都只有右子节点，那么就会产生相当大的空间浪费. 二叉树的二叉链表存储二叉链表存储的思想是让每个节点都能“记住”它的左，右两个子节点。为每个节点增加left,right两个指针，分别引用改节点的左，右两个子节点，因此二叉链表存储的每个节点有如下图结构： 二叉链表存储的二叉树的节点大致有如下定义： 12345class Node&#123; Object data; Node left; Node right;&#125; 对于这种二叉链表存储的二叉树，如果程序需要，为指定节点添加子节点也非常容易，让父节点的left或right引用指向新节点即可。 二叉树的三叉链表存储三叉链表存储的思想是让每个节点不仅“记住”它的左右两个子节点，还要“记住”它的父节点，因此需要为每个节点增加left,right和parent三个指针，分别引用该节点的左，右两个子节点和父节点。因此，三叉链表存储的每个节点有如下图的结构： 因此三叉链表存储的二叉树的节点大致如下： 123456class Node&#123; Object data; Node left; Node right; Node parent;&#125; 对于这种三叉链表存储的二叉树，如果程序需要，为指定节点添加子节点也非常容易，除了要维护父节点的left,right引用之外，还要维护新增节点的parent引用。 遍历二叉树遍历二叉树指的是按某种规律依次访问二叉树的每个节点，对二叉树的遍历过程就是讲非线性结构的二叉树的节点排列成线性序列的过程。 如果采用顺序结构来保存二叉树，程序遍历二叉树非常容易，无须进行任何思考，直接遍历底层数组即可。如果采用链表来保存二叉树的节点，则有以下两种遍历方式。 深度优先遍历：这种遍历算法将先访问到树中最深层次的节点 广度优先遍历：这种遍历算法将逐层访问每层的节点，先访问根（第一层）节点，然后访问第二层的节点…..一次类推。因此，广度优先遍历方法又被称为按层遍历。 先（前）序遍历二叉树 中序遍历二叉树 后序遍历二叉树 如果L,D,W表示左子树、根、右子树，习惯上总是必须先遍历左子树，后遍历右子树，根据遍历根节点的顺序不同，上面三种算法可表示如下。 DLR:先序遍历 LDR:中序遍历 LRD:后序遍历 深度遍历的先序遥历、中序遍历、后序遍历这三种遍历方式的名称都是针对根节点(D)而言的。先处理根节点(D)时就称为先序遍历。其次处理根节点(D)时就称为中序遍历;最后处理根节点(D)时就称为后序遍历。 先序遍历先序遍历指先处理根节点，其处理顺序如下：(1) 访问根节点(2) 递归遍历左子树(3) 递归遍历右子树 中序遍历中序遍历指其次处理根节点.其处理顺序如下。(1) 递归遍历左子树(2) 访问根节点(3) 递归遍历右子树 后序遍历后序遍历指最后处理根节点，其处理顺序如下。(1) 递归遍历左子树(2) 递归遍历右子树(3) 访问根节点 广度优先(按层)遍历广度优先遍历又称为按层遍历，整个遍历算法是先遍历几叉树的第一层(根节点)，再遍历根节点的两个子’节点(第二层)……依此类推，逐层遍历二叉树的所有节点。 为了实现广度优先遍历，可以借助于具有FIFO特征的队列来实现。如下所示。 建一个队列(先进先出)，把树的根节点压入队列。 从队列中弹出一个节点(第一个弹出的就是根节点)，然后把改节点的左，右节点压入队列，如果没有子节点，则说明已经达到叶子节点了。 用循环重复执行2步，知道队列为空。当队列为空时，说明所有的叶子节点(深度最深的层)都已经经过了队列，也就完成了遍历。 转换方法由于二叉树是一种更“确定”(它的每个节点最多只有两个子节点)的数据结构，因此不管是存储、增加、删除节点，还是遍历节点，程序都可以更简单、方便地实现口反之，由于树的每个节点具有个数不确定的节点，因此程序实现起来更复杂。 为了充分利用二义树的简单易用性，可以将普通树转换为二叉树，以二叉树的形式来保存柞通树，当程序需要树时，再将悦义树转换为普通树。 森林其实更简单，如果将一棵伶通树的根节点去掉，这棵树就变成了森林。或者可以转换一下思维，森林其实就是有多个根节点的树。 森林，树和二叉树的转换有序树，森林和二叉树之间有一一映射的关系，可以进行互相转换。 多叉树向二叉树的方法如下： (1)加虚线：同一个父节点的相邻兄弟节点之间加虚线 (2)抹实线：每个节点只保留它与最左子节点的连线，与其他字节点的连线都被抹掉。 (3)虚改实:虚线改为实线 如图就是多叉图向二叉树转换的结果 图中的虚线就是新增的“父子”关系。这个转换结果来看，多叉树1转换为二叉树的方法的关键思想就是：所有子节点只保留子节点，其他子节点转为左子节点的右子节点链。 按照这个转换思路，森林也可转换为二叉树————只要把森林当成一颗根节点被删除的多叉树即可。下图示范了将森林转换为二叉树的结果。 反过来，二叉树也可恢复出对应的多叉树，森林，恢复方法如下： -(1)加虚线：若某节点I是父节点的左子节点，则为该节点I的右孩子链的所有节点分别于节点I的父节点添加连线 (2)抹线：把有虚线的节点于原父节点的连线抹去 (3)整理：虚改实并按层排列 把二叉树转换为多叉树 如果二叉树的根节点有右子节点————右子节点就代表根节点的兄弟节点，这种情况会转换得到森林。 把二叉树转换为森林 树的链表存储根据上面介绍的理论，二义树可以和多叉树之间进行自由转换，因此可以得到普通树的另外一种保存方式:以二义树的形式保存多叉树，实际需要的时候再将二叉树转换为普通树。至于到底以哪种方式来保存二叉树，完全是自由的。通常会选择使用三叉链表存储方式来保存二叉树，这样得到的二叉树操作起来更方便，进行二叉树和多叉树之间转换时也更方便。 哈夫曼树哈夫曼树又被称为最优二叉树，是一种带权路径最短的二叉树。哈夫曼树是二叉树的一种应用，在信息检索中很常用. 哈夫曼树的定义和基本概念在介绍哈夫曼树之前先来介绍一些相关的概念。 节点之间的路径长度：从一个节点到另一个节点之间的分支数量称为两个节点之间的路径长度 树的路径长度：从根节点到树中的每一个节点的路径长度之和。 对于下图所示的而二叉树，该树的路径长度为17.即0+1+2+2+3+4+5==17. 节点的带权路径长度:从该节点到根节点之间的路径长度与节点的权的乘积 树的带权路径长度：树中所有叶子节点的带权路径长度之和。带权路径如图： 对于哈夫曼树，有一个很重要的定理:对于具有对n个叶子节点的哈夫曼树，一共需要2乘以n-1个节点。因为对于二叉树来说，有三种类型节点，即度数为2的节点、度数为1的节点和度数为0的叶子节点，而哈夫曼树的非叶子节点都是由两个节点合并产生的，所以不会出现度数为1的节点。而生成的非叶子节点的个数为叶子节点个数-1因此n个叶子节点的哈夫曼树，一共需要Z乘以n-1个节点。 创建哈夫曼树创建哈夫曼树，可以按如下步骤进行： 根据给定的。个权值{wl,w2,…,wn}构造n棵二叉树的集合F={T1,T2,…,Tn} }，F集合中每棵二叉树都只有一个根节点。 选取F集合中两棵根节点的权值最小的树作为左、右子树以构造一棵新的二叉树，且将新的二叉树的根节点的权值设为左、右子树上根节点的权值之和。 将新的二叉树加入到F集合中，并删除第2步中被选中的两棵树。 重复第2和3步，直到F集合中只剩下一棵树，这棵树就是哈夫曼树。 下图显示了创建哈夫曼树的过程。 哈夫曼编码根据哈夫曼树可以解决报文编码问题。假设需要对一个字符串如“a6cdabcaba”进行编码，将它转换为唯一的二进制码，但要求转换出来的二进制码的长度最小。 假设每个字符在字符串中出现的频率为W}其编码长度为L，编码字符有n个，则编码后二进制码的总长度为W1L1+W2L2+W3L3+…+WnLn，这正好符合哈夫曼树的处理原则。因此可采用哈夫曼树的原理构造二进制编码，并使电文总长最短。 对于“abcdabcaba”字符串，总共只有a,b,c,d,这四个字符，它们出现的次数是4,3,2,1次__这相当于它们的权值。于是，将a,b,c,d四个字符以出现的次数为权值构造哈夫曼树，得到如下图结构： 从哈夫曼树根节点开始，对左子树分配代码“0”，对右子树分配代码“1”，一直到达叶子节点。然后.将从树根沿每条路径到达叶子节点的代码排列起来，便得到了每个叶子节点的哈夫曼编码。下图显示了对a, b, c, d四个字符编码得到的哈夫曼编码。 排序二叉树排序二叉树是一种特殊结构的二叉树，通过它可以非常方便地对树中的所有节点进行排序和检索 排序二叉树要么是一颗空二叉树，要么是具有下列性质的二叉树 若它的左子树不空，则左子树上所有的节点的值均小于它的根节点的值 若它的右子树不空，则右子树上所有的节点均大于它的根节点的值 它的左右子树分别为排序二叉树。 下图显示了一棵排序二叉树.对于排序二叉树，若按中序遍历就可以得到由小到大的有序序列。中序遍历得: {2,3,4,8,9,9,10,13,15,18) 创建排序二义树的步骤，就是不断地向排序二义树添加节点的过程，几体如下。 以根节点为当前节点开始搜索 拿新节点的值和当前节点开始搜索 如果新节点的值更大，则以当前的右子节点作为新的当前节点的右子节点作为新的当前节点;如果新节点的值更小，则以当前节点的右子节点作为新的当前节点。 重复第2和3两个步骤，直到搜索到合适的叶子节点。 将新节点添加为第4步找到的叶子节点的子节点，如果新节点更大，则添加为右子节点;否则,添加为左子节点。 当程序从排序二叉树中删除一个节点之后，为了让它依然保持为排序哭叉树，必须对该排序二叉树进行维护。维护可分为如下几种情况。 被删除节点是叶子节点，只需将它从其父节点中删除。 被删除转点p只有左子树或只有右子树，如果p是它的父节点的左子节点，则将p的左子树或右子树添加成p一节点的父节点的左子节点即可;如果p是它的父节点的右子节点，则将p的左子树或右子树添加成P节点的父节点的右子节点即可。简单来说，如果要侧除的节点只有一个子节点，即可用它的子节点来代替要侧除的节点。 被删除的节点只有左子树的情况 被删除节点只有右子树的情况 若被删除节点p的左、右子树均非空，则有以下两种做法。 将pL设为P的父节点q的左或右子节点(取决于P是其节父点q的左、右子节点)，将pR设为P节点的中序前趋节点s的右子节点(s是pL最右下的节点，也就是pL子树中最大的节点)。采用这种方式删除节点的示意图如下： 以P节点的中序前趋或后继替代P所指节点，然后从原排序二叉树中删除中序前趋或后继节点。简单来说，就是用大于p的最小节点或小于P的最大节点代替P节点点,采用这种方式删除节点的示意图如下图： 红黑树排序二叉树虽然可以快速检索，但在最坏的情况下，如果插入的节点集本身就是有序的，要么是由小到大排列，要么是由大到小排列，那么最后得到的排序二义树将变成链表:所有节点只有左节点(如果插入节点集合本身是由大到小排列的)，或者所有节点只有右节点(如果插入节点集合本身是由小到大排列的)。在这种情况下，排序二叉树就变成了普通链表，其检索效率就会很低。 为了改变排序二叉树存在的不足，对二叉树进行改进————红黑树，他将这种排序二叉树称为“对称二叉B树”。 红黑树是一个更高效的检索二叉树，因此常常用来实现关联数组。典型的，JDK提供的集合类TreeMap本身就是一颗红黑树的实现。红黑树在原有的排序二叉树上增加如下几个要求： 性质l:每个节点要么是红色，要么是黑色。 性质2:根节点永远是黑色的。 除质3:所有的叶子节点都是空节点(即null)，并且是黑色的。 性质4:每个红色节点的两个子节点都是黑色的。(从每个叶子到根的路径上不会有两个连续的红色节点。) 性质5:从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点。 java实现的红黑树结构如下图： 根据性质5，红黑树从根节点到每个叶子节点的路径都包含相同数量的黑色节点，因此从根节点到叶子节点的路径中包含的黑色节点数被称为树的“黑色高度(black-height)”. 性质4则保证了从根节点到叶子节点的最长路径的一长度不会超过任何其他路径的2倍。假如有一棵黑色高度为3的红黑树，从根节点到叶子节点的最短路径长度是2,该路径上全是黑色节点〔黑色节点-黑色节点-黑色节点)。最长路径也只可能为4,在每个黑色节点之间插入一个红色节点〔黑色节点-红色节点-黑色书点-红色节点-黑色节点)，性质4保证绝不可能插入更多的红色节点。由此可见，红黑树中最长的路径就是一条红黑交替的路径。 由此可以得出结论：对于给定的黑色高度为N的红黑树，从根到叶子节点的最短路径长度为N-1，最长路径长度为2*(N-1). 红黑树通过上面这种限制来保证它大致是平衡的—因为红黑树的高度不会无限增高，这样能保证红黑树在最坏的情况下都是高效的，不会出现普通排序二叉树的情况。 由于红黑树只是一棵特殊的排序二叉树，因此对红黑树上的只读操作与普通排序二叉树上的只读操作完全相同，只是红黑树保持了大致平衡，因此检索性能更好. 但在红黑树上进行插入操作和删除操作会导致树不再符合红黑树的特征，因此插入操作和删除操作都需要进行一定的维护，以保证插入节点、删除节点后的树依然是红黑树。 插入操作插入操作按如下步骤进行: 以排序二叉树的方法插入新节点，并将它设为红色。 进行颜色调换和树旋转 这种颜色调换和树旋转就比较复杂了，下面将分情况进行介绍。在介绍中，把新插入的节点定义为N节点，把N节点的父节点定义为P节点，把P节点的兄弟节点定义为U节点，把P节点的父节点定义为G节点。 情形1：新节点N是树的根节点，没有父节点。 在这种情形下，直接将它设置为黑色以满足性质2。 情形2：新节点的父节点P是黑色的 在这种情形下，新插入的节点是红色的，因此依然满足性质4。而且因为新节点N有两个黑色叶子节点，但是由于新节点N是红色的，通过它的每个子节点的路径依然保持相同的黑色节点数，因此依然满足性质5 3.情形3：父节点P和父节点的兄弟节点U都是红色的 在这种情形下，程序应该将P节点、U节点都设置为黑色，并将P节点的父节点设置为红色(用来保持性质5)。现在，新节点N有了一个黑色的父节点P。由于从P节点、U节点到根节点的任何路径都必须通过G节点，这些路径上的黑色节点数目没有改变(原来有叶子和G节点两个黑色节点，现在有叶子和P节点两个黑色节点)。 经过上面处理后，红色的G节点的父节点也有可能是红色的，这就违反了性质4，因此还需要对G节点递归地进行整个过程〔把G节点当成新插入的节点进行处理)。下图显示了处理过程： 情形4:父节点P是红色的，而其兄弟节点U是黑色的或缺少;且新节点N是父节点P的右子节点，而父节点P又是其父节点G的左子节点。 在这种情形下，对新节点和其父节点进行一次左旋转。接着，按情形5处理以前的父节点P(也就是把P当成新插入的节点)。这将导致某些路径通过它们以前不通过的新节点N或父节点P其中之一，但是这两个节点都是红色的，因此不会影响性质5。 情形5:父节点F是红色的，而其兄弟节点U是黑色的或缺少:且新节点N是其父节点的左子节点，而父节点F父是其父节点G的左子节点。 在这种情形下，需要对节点G进行一次右旋转口在旋转产生的树中，以前的父节点P现在是新节点N和节点G的父节点。由于以前的节点G是黑色的(否则父节点P就不可能是红色的)，切换以前的父节点P和节点G的颜色，使之满足性质4。性质5也仍然保持满足，因为通过这三个节点中任何一个的所有路径以前都通过节点G,现在它们都通过以前的父节点P。在各自的情形下，这都是三个节点中唯一的黑色节点。 删除操作红黑树的删除操作比插入操作要稍微复杂一些，实际上也可按如下步骤进行： 以排序二叉树的方法删除指定节点。 进行颜色调换和树旋转，使之满足红黑树特征。","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂java笔记之栈和队列","slug":"疯狂java笔记之栈和队列","date":"2017-08-31T16:41:46.000Z","updated":"2017-08-31T16:42:43.435Z","comments":true,"path":"2017/09/01/疯狂java笔记之栈和队列/","link":"","permalink":"http://jack921.win/2017/09/01/疯狂java笔记之栈和队列/","excerpt":"","text":"栈栈的英文单词是Stack,它代表一种特殊的线性表，这种线性表只能在固定一端（通常认为是线性表的尾端）进行插入，删除操作。 栈的基本定义栈是一种数据结构，它代表只能在某一端进行插入，删除操作的特殊线性表，通常就是在线性表的尾端进行插入，删除操作。 对于栈而言，允许进行插入，删除操作的一端被称为栈顶（top）,另一端咋被称为栈底（bottom）。 对于一个栈不包含任何元素，那么这个栈就被称为空栈。从栈顶插入一个元素被称为进栈，将一个元素从栈顶删除被称为“弹出栈”，对应的英文说法为pop,如下图: 对于元素为a0,a1,a2,…,an-1的栈，假设栈中元素被a0,a1,a2,…,an-1的次序进栈，那么a0未栈底元素，an-1为栈顶元素。出栈时第一个弹出的元素应为栈顶元素，也就是an-1.也就是说，栈中元素的修改是按后进先出(LIFO)的原则进行的。 归纳起来，可以再对栈下一个定义：栈就是一种后进先出(LIFO)的线性表。 栈的常用操作栈是一种被限制过的线性表，通常不应该提供线性表中的如下方法： 获取指定索引处的元素 按值查找数据元素的位置 向指定索引处插入数据元素 删除指定元素索引处的数据元素从上面这个方法可以看出，栈不应该提供从中间任意位置访问元素的方法。也就是说，栈只允许在栈顶插入，删除元素。栈的常用操作如下： 初始化：通常是一个构造器，用于创建一个空栈 返回栈的长度：该方法用于返回栈中数据元素的个数 入栈：向栈的栈顶插入一个数据元素，栈的长度+1 出栈：从栈的栈顶删除一个数据元素，栈的长度-1，该方法通常饭后被删除的元素 访问栈顶元素：返回栈顶的数据元素，但不删除栈顶元素 判断栈是否为空：改方法判断栈是否为空，如果栈为空则返回true,否则返回false. 清空栈：将栈清空 类似于线性表即采用顺序存储的方式来实现，也可以用链式结构来实现，也可使用链式结构来实现，栈同样即可采用顺序结构来存储栈内的元素，也可采用链式结构来存储栈内元素。 栈的顺序存储结构及实现顺序存储结构的栈简称为顺序栈，它利用一组地址连续的存储单元依次存放从栈底到栈顶的数据元素。栈底位置固定不变，它的栈顶可以直接通过顺序栈底层数组的数组元素arr[size-1]来访问。顺序栈的存储示意图如下图： 顺序栈中数据元素的物理关系和逻辑关系是一致的，先进栈的元素位于栈底，栈底元素的存储位置相对也比较小。 1.进栈对于顺序栈的进栈操作而言，只需将新的数据元素存入栈内，然后让记录栈内元素个数的变量加1，程序即可再次通过arr[size-1]重新访问新的栈顶元素。进栈操作示意图如下： 由于顺序栈底层通常会采用数组来保存数据元素，因此可能出现的情况是：当程序试图让一个数据元素进栈时，底层数据已满，那么就必须扩充底层数组的长度来容纳新进栈的数据元素。 1.出栈对于顺序栈的出栈操作而言，需要将栈顶元素弹出栈，程序要做两件事。 让记录栈内元素个数的变量减1. 释放数组对栈顶元素的引用。 出栈操作示意图如下图: 对于删除操作来说，只要让记录栈内元素个数的size减1，程序即可通过arr[size-1]访问到新的栈顶元素。但不要忘记释放原来栈顶的数组引用，否则会引起内存泄漏。 栈比普通线性表的功能更弱，栈时一种被限制过的线性表，只能从栈顶插入，删除数据元素。 栈的链式存储结构及实现程序可以采用单链表来保存栈中所有元素，这种链式结构的栈也被称为栈链。对于栈链而言，栈顶元素不断地改变，程序只要使用一个top引用来记录当前的栈顶元素即可。top引用变量永远引用栈顶元素，再使用一个size变量记录当前栈中包含多少个元素即可。如下图： 1.进栈对于栈链的进栈操作，程序只需要做如下两件事：-让top引用指向新元素添加的元素，新元素的next引用指向原来的栈顶元素。 让记录栈内元素个数的size变量加1.进栈操作示意图如下： 2.出栈对于链栈的出栈操作，需要将栈顶元素弹出栈，程序需要做两件事情： 让top引用指向原栈顶元素的下一个元素，并释放原来的栈顶元素 让记录栈内元素个数的size变量减1. 出栈操作示意图如下： 对于顺序栈来说，程序开始就需要在底层为他开辟一块连续的内存（数组）,这个空间浪费其实很大.从空间利用率的角度说，链栈的空间利用率比顺序栈的空间利用率要高一些。 java集合中的栈Java集合实际上提供两种栈供开发者使用： java.util.Stack:它就是一个最普通的顺序栈，底层数据实现。这个Stick类是线程安全的，在多线程环境下也可以放心使用 java.util.LinkedList:LinkedList是一个双端链表：除此之外。LinkedList还可作为栈使用，查看该类api将会发现，他同样提供了push(),pop(),peek()等方法，这表明LinkedList其实还可以当成栈使用。LinkedList代表栈的链式实现，但它是线程不安全的，如果需要在多线程环境下使用，则应该使用Collections类的工具发将其“改造”成线程安全的类。 队列队列的基本定义队列是一种特殊的线性表，他只允许在表的前端(front)进行删除操作，只允许在表的后端（rear）进行插入操作，进行插入操作的端称为队尾，进行删除的端称为对头。 如果队列中不包含任何元素，该队列就被称为空队列。 对于一个队列来说，每个元素总是从队列的rear端进入队列，然后等待该与元素之前的所有元素出对之后，当前元素才能出对。因此，把队列简称为先进先出（FIFO）的线性表。如下图： 队列的常用操作队列同时是一种被限制过的线性表，通常不应该提供线性表中的如下方法： 获取指定索引处的元素 按值查找数据元素的位置 向指定索引处插入数据元素 删除指定索引处的数据元素从上面这些方法可以看出，队列不应该提供从中间任意位置访问元素的方法，也就是说，队列只允许在队列的前端（front）删除元素，只允许在队列的后端（rear）插入元素。队列的常用操作如下： 初始化:通常是一个构造器，用于创建一个空队列 返回队列的长度:该方法用十返回队列中数据元素的个数。 加入元索:向队列的rear端插入一个数据元素，队列的长度+1 删除元素:从队列的front端删除一个数据元素，队列的长度-1，该方法通常返回被删除的元素。 访问队列的前端元素:返回队列的front端的数据元素，但不删除该元素。 判断队列是否为空:该方法判断队列是否为空，如果队列为空则返回true否则返回false 清空队列：将队列清空 类似于线性表既可采用顺序存储的方式来实现，也可采用链式结构来卖现，队列同样既可采用顺序结构来存储队列元素，也可采用链式结构来存储队列元素。 队列的顺序存储结构及实现系统采用一组地址连续的存储单元依次存放队列从rear端到front端的所有数据元素，程序只需(front和rear两个整型变量来记录队列front端的元素索引、rear端的元素索引。示意图如下： 顺序队列可能会造成假满的问题，程序有如下解决方： 每次将元素移除队列时将队列中的所有元素向front端移动一位，这种方式front值永远为0，有元素插入队列时rear值+1，有元素移除队列时rear值-1,。但这种方式非常浪费时间，因为每次将元素从队列移除都需要进行“整体搬家”。 将数组存储区看成一个首尾相接的环形区域，当存放数组的最大地址之后，rear值再次变为0。采用这种技巧存储的队列称为循环队列。 循环队列为了重新利用循环顺序队列底层数组中已删除元素所占用的空间，消除可能出现的“假满”现象，可以将顺序队列改进为循环队列。 循环队列是首尾相连的队列：当front,rear变量值达到底层数组的capacity-1之后，再前进一位就自定变成0,。示意图如下： 不管队列是空还是满，都会出现一个情况：front==rear.如果底层数据中elementData[front]==null,则表明此时队列为空，否则表明该队列已满。 队列的链式存储结构及实现使用链式结构保存线性表，也可以采用链式结构来存储队列的各元素，采用链式存储结构的队列也被称为链队列。 对于链队列而言，由于程序需要从rear端添加元素，然后从front端移除元素，因此考虑对链队列增加front,rear两个引用变量，使他们分别执行链队列的头，尾两个节点。链队列示意图如下：由于链队列采用链式结构类保存队列中所有元素，该队列允许添加无限多个数据元素，因此链队列无队列满的问题。 1.插入队列对于链队列而言，插入操作的实现非常简单，只要创建一个新节点，让原rear节点的next引用指向新的节点，再让rear引用指向该新节点即可。 2.移除队列对于链队列而言，移除操作的实现也非常简单，只要让front引用指向原front所引用节点的下一个节点即可。当然，不要忘记释放原front节点的引用。示意图如下: Java集合中的队列从JDK1.5开始,java的集合框架中提供了一个queue接口，该接口代表了一个队列，实现该接口的类可以当成队列使用。Queue里包含了6个方法，用于代表队列包含的3个标志性的方法，如下所示： 插入：在队列的rear端插入元素 移除：在队列的front端删除元素 访问：访问队列的front端元素 Java为上面的每个方法方法提供了两个版本：具有特殊返回值的版本和抛出异常的版本，这样就产生了6个方法。 版本 抛出异常的版本 具有特殊返回值的版本 插入 add(e) offer(e) 移除 remove() poll() 访问 element() peek() 双端队列双端队列代表一种特殊的队列，它可以在两端同时进行插入，删除操作，如下图所示： 对于双端队列，由于它可以从两端分别进入插入，删除操作，如果程序将所有的插入，删除操作固定在一端进行，这个双端队列就变成前面介绍的栈，由此可见，Deque和Queue，Stack之间的关系如图： 双端队列（Deque）既可说是Queue的子接口，也可说Stack(JDK并未提供这个接口)的子接口。因此。Deque即可当成队列使用，也可当成栈使用。 由此可见，Deque其实就是Queue和Stack混合而成的一种特殊的线性表，完全可以参考起前面的Queue,Stack的实现类实现Deque。 JDK为Deque提供了ArrayDeque和LinkedList两个常见的实现类。其中，ArrayDeque代表顺序存储结构的双端队列，LinkedList则代表链式存储结构的双端队列。 LinkedList代表一种双向，链式存储结构的循环线性表，这里有提到LinkedList代表线程安全的，链式结构的双端队列，由此可见，LinkedList实在是一个功能非常强大的集合类。事实上，LinkedList几乎是Java集合框架中方法最多的类。 虽然LinkedList工具类的功能非常强大，它既可当成线性表使用，也可当成栈使用，还可当成队列使用，但对大部分程序而言，使用ArrayList，ArrayDeque的性能比LinkedList更好。","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂java笔记之线性表","slug":"疯狂java笔记之线性表","date":"2017-08-31T16:40:23.000Z","updated":"2017-08-31T16:41:35.088Z","comments":true,"path":"2017/09/01/疯狂java笔记之线性表/","link":"","permalink":"http://jack921.win/2017/09/01/疯狂java笔记之线性表/","excerpt":"","text":"从数据的逻辑结构来分，数据元素之间存在的关联关系被称为数据的逻辑结构。归纳起来，应用程序中的数据大致哟如下四种基本的逻辑结构。 集合：数据元素之间只有“同属于一个集合”的关系 线性结构：数据元素之间存在一个对一个的关系 树形结构：数据元素之间存在一个对多个的关系 图状结构或网状结构：数据元素之间存在多个对多个关系对于数据不同的逻辑结构，在底层通常有两种物理存储结构。 顺序存储结构 链式存储结构 线性表的定义及逻辑结构线性表（LinearList）是由n(n&gt;=0)个数据元素(节点)a1,a2,a3,…,an组成的有限序列。 线性表中每个元素必须具有相同的结构(即拥有相同的数据项).线性表是线性结构中最常用而又最简单的一种数据结构。 线性表中每个数据元素其实可以包含若千个数据项，例如，使用ai来代表线性表中的第i个元素，其中ai元素可以包含若千个数据项。关干线性表还可以有如下定义。 线性表中包含的数据元素个数n被称为表的长度，当线性表的长度为0是该表也被称为空表。 当n&gt;0时，表可以表示为(a1,a2,a3,…,an) 对于一个非空，有限的线性表而言，它总具有如下特征。 总存在唯一的“第一个”数据元素。 总存在唯一的“最后一个”数据元素。 除第一个数据元素外，集合中的每一个数据元素都只有一个前驱的数据元素。 除了最后一个数据元素外，集合中的每个数据元素都只有一个后继的数据元素。 线性表的基本操作如果需要实现一个线性表，程序首先需要确定该线性表的每个数据元素。接下来，应该为该线性表实现如下基本操作。 初始化：通常是一个构造器，用于创建一个空的线性表 返回线性表的长度：该方法用于返回线性表中的数据元素 获取指定索引处的元素:根据索引返回线性表的数据元素 按值查找数据元素的位置：如果线性表中存在一个或多个与查找值相等的数据元素，那么该方法返回一个搜索到的值相等的数据元素的索引，否则返回-1. 直接插入数据元素：向线性表的头部插入一个数据元素，线性表长度+1； 向指定位置插入数据元素:向线性表的指定索引处插入一个数据元素，线性表长度+1. 直接删除数据元素：删除线性表头部的数据元素，线性表长度-1. 删除线性表中指定位置的数据元素：删除线性表中指定索引处的数据元素，线性表长度-1. 判断线性表是否为空：该方法判断线性表是否为空，如果线性表为空，则返回true,否则返回false 清空线性表：将线性表清空顺序存储结构线性表的顺序存储结构是指用一组地址连续的存储单元依次存放线性表的元素。当程序采用顺序存储结构来实现线性表时，线性表中相邻元素的两个元素ai和ai+1对应的存储地址loc(ai)和loc(ai+1)也是相邻的。 换句话说，顺序结构线性表中数据元素的物理关系和逻辑关系是一致的，线性表中数据元素的存储地址可按如下公式计算。 loc(ai)=loc(a0)+i*b(0&lt;i&lt;n) 上面公式中b代表每个数据元素的存储单元。从上面公式可以看出，程序获取线性表中每个元素的存储起始地址的时间相同，读取表中数据元素的时间也相同。而且顺序表中每个元素都可随机存取，因此顺序存储的线性表时一种随机存取的存储结构。 为了使用顺序结构实现线性表，程序通常会采用数组来保存线性表中的数据元素。 线性表的插入运算是指表的第i(0&lt;=i&lt;n)个位置插入一个新的数据元素x,是长度为n的线性表： a0,…,ai-1,ai,…,an-1 变成长度为n+1的线性表： a0,…,ai-1,x,ai,…,an-1向顺序结构的线性表插入元素，如图所示： 这里有一个要考虑的问题。由于顺序结构线性表底层采用数组来存储数据元素，因此插入数据元素是必须保证不会超出底层属猪的容量。如果线性表中元素的个数超出了底层数据的长度，那么就必须为该线性表扩充底层数据的长度。 线性表的删除运算是指将表的第i(0&lt;=i&lt;n)个位置的数据元素删除，使长度为n的线性表： a0,…,ai-1,ai,ai+1,…,an-1 变成长度为n-1的线性表： a0,…,ai-1,ai+1,…,an-1 从顺序结构的线性表中删除元素，如下图： 链式存储结构链式存储结构的线性表（简称为链表）将采用一组地址任意的存储单元存放线性表中的数据元素。链式存储结构的线性表不会按线性的逻辑顺序来保存数据元素，他需要在每个数据元素里保存一个引用下一个数据元素的引用（或者叫指针）。 由于不是必须按顺序存储，链表在插入，删除数据元素时比顺序线性表块的多，当时查找一个节点或者访问特点节点编号的节点则比顺序线性表慢得多。 使用链表结构可以克服顺序线性表(基于数组)需要预先知道数据大小的缺点，链表结构可以充分利用计算机的内存空间，实现灵活的内存动态管理。但是链表结构失去了数组随机存取的优点，同时链表由于增加了节点的指针域，空间开销比较大。 对于链表存储结构的线性表而言，它的每个节点都必须包含数据元素本身和一个或两个用来引用上一个/下一个节点的引用。也就是说，有如下公式： 节点=数据元素+引用下一个节点的引用+引用上一个节点的引用 如下图是双向链表节点示意图，其中每个节点中的prev代表前一个节点的引用，只有双向链表的节点才存在prev引用。 链表是多个相互引用的节点的集合，这个链表总是从头节点开始，然后依次向后指向每个节点。 空链表就是头节点为null的链表 单链表上的基本运算单链表指定是每个节点保留一个引用，改引用指向当前节点的下一个节点，没有引用指向头节点，尾节点的next引用为null.单链表示意图如下： 对于单链表，系统建立单链表的过程就是不断添加节点的过程。动态添加单链表有以下两种方式。 头插法建表：该方法从一个空表开始，不断地创建新节点，将数据元素存入节点的data域中，然后不断地以新节点为头节点，让新节点指向原有的头节点 尾插法建表：该方法是将新节点插入到当前链表的表尾上，因此需要为链表定义一个引用变量来保存链表的最后一个节点。 头插法建立链表虽然算法简单，但生成的链表中节点的次序和输入的顺序相反:若希望二者次序一致，则应该采用尾插法来建立链表。 对于单链表而言，常用的操作有： 查找 插入 删除 1.查找操作单链表的查找操作可以分为以下两种： 按序号查找第index个节点:从header节点依次向下在单链表中查找第index个节点口算法为，设header为头，current为当前节点(初始时current从heade，开始)，0为头节点序号，i为计数器，则可使current依次下移寻找节点，并使i同时递增记录节点序号，直到返回指定节点。 在链表中查找指定的element元素:查找是否有等于给定值element的节点。若有，则返回首次找到的其值为element的节点的索引;否则，返回-l。查找过程从开始节点出发，顺着链表逐个将节点的值和给定值element做比较。 2.插入操作插入操作时将值为element的新节点插入到链表的第index个节点的位置上。因此，首先找到索引的index-1的节点，然后生成一个数据域为element的新节点newNode，并令idnex-1处节点的next引用新节点，新节点的next引用原来index处的节点。 向i索引处插入节点的示意图。 3.删除操作删除操作是将链表的第index个节点删去。因为在单链表中，第index个节点是有index-1处的节点引用的，因此删除index处节点将先获取index-1处节点，然后index-1处节点的next引用到原index+1处的节点，并释放index处节点即可。 循环链表循环链表是一种首尾相接的链表。将单链表的尾节点next指针改为引用单链表header节点，这个单链表就成了循环链表。 循环链表具有一个显著特征：链表的任一个节点出发均可找到表中的其他所有节点，因此，循环链表可以被视为“无头无尾”,如下图： 循环链表中的第一个节点之前就是最后一个节点，反之亦然。循环链表的无边界使得它实现了很多方法时会更容易，在这样的链表上设计算法会比普通链表更加容易。 新加入的节点应该是在第一个节点之前（采用头插法插入），还是最后一个节点之后（采用尾插法插入），可以根据实际要求灵活处理，具体的实现区别不大。 双向链表如果为每个节点保留两个引用prev和next,让prev指向当前节点的上一个节点，让next指向当前节点的下一页节点，此时的链表既可以向后依次访问每个节点，也可以向前依次访问节点，这种形式的链表被称为双向链表。示意图如下：双向链表是一种对称结构，它克服了单链表上指针单向性的缺点，其中每个节点既可以向前引用，也可以向后引用，这样可以更方便地插入、删除数据元素。 与单链表类似的是，如果将链表的header节点与tail节点链在一起就构成了双向循环链表。 双向链表的查找由于双向链表既可以从header节点开始依次向后搜索每个节点，也可以从tail节点开始依次向前搜索每个节点，因此当程序试图从双向链表中搜索指定索引处的节点时，既可以从该链表的header节点开始搜索，也可以从该链表的tail节点开始搜索。至于到底应该从header开始搜索，还是应该从tail开始搜索，则取决于被搜索节点是更靠近header，还是更靠近tail. 一般来说，可以通过被搜索index的值来判断它更靠近header还是更靠近tail.如果index&lt;size/2，则可判断该位置更靠近header，应从header开始搜索;反之，则可判断该位置更靠近tail，那就应从tail开始搜索口 双向链表的插入双向链表的插入操作更复杂，向双向链表中插入一个新节点必须同时修改两个方向的指针（即引用）。如下图所示： 双向链表的删除在双向链表中，删除一个节点需要同时修改两个方向的指针，双向链表中删除节点的操作，如下图所示： 线性表的分析线性表的顺序的顺序和链式两种实现各有优势：如下 分析比较 顺序表 链表 空间性能 顺序表的存储空间是有静态分布的，因此需要一个长度固定的数组，因此总有部分数组元素被浪费 链表的存储空间是动态分布的，因此空间不会被浪费。但由于链表需要额外的空间来为每个节点保存指针 时间性能 顺序表中元素的逻辑顺序与物理存储顺序保持一致，而且支持随机存取，因此顺序在查找，读取性能很好 链表采用链式结构来保存表内元素，因此在插入，删除元素时性能较好 线性表的功能线性的本质上是一个充当容器的工具类，当程序有一组结构相同的数据元素需要保存时，就可以考虑使用线性表来保存它们。 从某种程度来说，线性表是数组的加强，线性表比数据多了如下几个功能： 线性表的长度可以动态改变，而java数组的长度是固定的-线性表可以插入元素，而数组无法插入元素 线性表可以删除元素，而数组无法删除元素，数组只能将指定元素赋为null,但各种元素依然存在 线性表提供方法来搜索指定元素的位置，而数组一般不提供该方法 线性表提供方法来清空所有元素的位置，而数组一般不提供该方法 从上面线性表的实现能发珑线性表比数组功能强大的理由是，顺序结构的线性表可以说是包装过的数组，自然会提供更多额外的方法来简化操作。 对于大部分,Java程序员来说，其实经常在使用线性表List. Java的List接口就代表了线性表，线性表的两种实现分别是ArrayList和LinkedList其中LinkedList还是一个双向链表。JDK提供的线性表有如下图：","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂Java笔记之面向对象的陷阱","slug":"疯狂Java笔记之面向对象的陷阱","date":"2017-08-31T16:38:52.000Z","updated":"2017-08-31T16:40:09.846Z","comments":true,"path":"2017/09/01/疯狂Java笔记之面向对象的陷阱/","link":"","permalink":"http://jack921.win/2017/09/01/疯狂Java笔记之面向对象的陷阱/","excerpt":"","text":"instanceof运算符的陷阱instanceof是一个非常简单的运算符。instanceof运算符的前一个操作数通常是一个引用类型的变量，后一个操作数通常是一个类(也可以是接口，可以把接口理解成一个特殊的类)，他用于判断前面的对象是否是后面的类或其子类，实现类的实例。如果是，则返回true,否则，返回false. 12String obj=&quot;Java&quot;;obj instanceof Math 上面程序是无法编译通过的，根据Java语言规范，使用instanceof运算符有一个限制：instanceof运算符前面操作数的编译时类型必须是如下三种情况。 要么与后面的类相同 要么与后面类的父类 要么是后面类的子类 如果前面操作数的编译时类型与后面的类型没有任何关系，程序将没法用过编译。因此，当使用instanceof运算符的时候，应尽量从编译，运行两个阶段来考虑它————如果instanceof运算符使用不当，程序编译时就会抛出异常；当使用instanceof运算符用过编译后，才能考虑它的运算结果是true,还是false. 在极端情况下，instanceof前一个操作数所引用对象的实际类型就是后面的类型，但只要它的编译时类型既不是第二个操作数的类型， 也不是第二个操作数的父类，子类程序就没法通过编译。如下： 123Object str=&quot;java&quot;;Math math=(Math)str;System.out.println(&quot;字符串是否是String的实例：&quot;+(math instanceof String));() 当编译器编译java程序时，编译器无法检查引用变量实际引用对象的类型，他只检查该变量的编译时类型。最后一句代码math的编译时类型是Math,Math既不是String类型，也不是String类型的父类，还不是String类型的子类，因此程序没法通过编译。至于math实际引用对象的类型是什么，编译器也不关心，编译阶段也没法关心。 至于第二行代码为何没有出现编译错误，这和强制转型机制有关。对于Java的强制转型而言，也可以分为编译，运行两个阶段来分析它。 在编译阶段，强制转型要求被转型变量的编译时类型必须是如下三种情况之一. 被转型变量的编译时类型与目标类型相同。 被转型变量的编译时类型是目标类型父类。 被转型变量的编译时类型是目标类型子类。在这个情况下可以自动向上转型，无须强制转换。如果被转型变量的编译时类型与目标类型没有任何继承关系，编译器将提示编译错误。通过上面分析可以看出，强制转型的编译阶段只关心引用变量的编译时类型，至于该引用变量实际引用对象的类型，编译器并不关心，也没法关心。 在运行阶段，被转型变量所引用对象的实际类型必须是目标类型的实例，或者是目标类型的子类、实现类的实例，否则在运行时将引发ClassCastExceptivn异常。12String s=null;System.out.println(s instanceof String); 使null调用instanceof运算符时返回false是非常有用的行为，因为instanceof运算符有了一个额外的功能:它可以保证第一个操作数所引用的对象不是null如果instanceof告知一个引用变量是某个特定类型的实例，那么就可以将其转型为该类型，并调用该类型的方法，而不用担心会抛出ClassGastExeception或NullPointerException异常。 构造器的陷阱构造器创建对象吗实际上构造器井不会创建Java对象，构造器只是负责执行初始化，在构造器执行之前，Java对象所需要的内存空间，应该说是由new关键字中请出来的。 绝大部分时候，程序使用new关键字为一个Java对象申请空间之后，都需要使用构造器为这个对象执行初始化。但在某些时候，程序创建Java对象无须调用构造器，以下面两种方式创建的Java对象无须使用构造器。 使用反序列化的方法恢复java对象。 使用clone方法复制java对象。无限递归的构造器 1234567891011121314public class Main &#123; Main main; &#123; main=new Main(); &#125; public Main()&#123; System.out.println(&quot;执行构造器&quot;); &#125; public static void main(String[] args) &#123; Main main=new Main(); &#125;&#125; 不管是定义实例变量是指定的初始值，还是在非静态初始化块中执行的初始化操作，最终都将被提取到构造器中执行。所以以上代码到时了构造器递归。 这个程序给出的教训是，无论如何不要导致构造器产生递归调用。也就是说，应该: 尽量不要在定义实例变量时指定实例变量的值为当前类的实例。 尽量不要在初始化块中创建当前类的实例口 尽量不要在构造器内调用本构造器创建Java对象。 持有当前类的实例对于一个java类而言，他的一个实例持有当前类的另一个实例是被允许的，只要程序初始化它持有当前类的实例时不会引起构造器递归就行。 123456789101112131415public class Main &#123; private String name; private Main instance; public Main()&#123; &#125; public Main(String name)&#123; instance=new Main(); instance.name=name; &#125; public static void main(String[] args)&#123; Main main=new Main(); Main main2=new Main(&quot;测试&quot;); &#125;&#125; 到底调用哪个重载的方法1234567891011121314public class Main &#123; public void info(Object obj,double count)&#123; System.out.println(&quot;obj:&quot;+obj); System.out.println(&quot;count:&quot;+count); &#125; public void info(Object[] objs,double count)&#123; System.out.println(&quot;objs:&quot;+objs); System.out.println(&quot;count:&quot;+count); &#125; public static void main(String[] args)&#123; Main main=new Main(); main.info(null,5); &#125;&#125; 上面代码方法的调用看似info(Object[],int)和info(Obejct,int)都是可以匹配的，那到底调用哪个呢。 根据精确匹配原则，当实际调用是传入的实参满足多个方法时，如果某个方法的形参要求参数范围越小，那么这个方法就越精确。很明显，Object[]可以看成Object的子类，info(Object[] ,int)方法匹配的更精确，执行上面程序，将看到如下输出： 12objs:nullcount:5.0 再看一个极端的例子： 1234567891011121314public class Main &#123; public void info(Object obj,int count)&#123; System.out.println(&quot;obj:&quot;+obj); System.out.println(&quot;count:&quot;+count); &#125; public void info(Object[] objs,double count)&#123; System.out.println(&quot;objs:&quot;+objs); System.out.println(&quot;count:&quot;+count); &#125; public static void main(String[] args)&#123; Main main=new Main(); main.info(null,5); &#125;&#125; 调用方法时第一个参数调info(Object[] objs,double count)比较好，而第二个参数调info(Obejct obj,int count)比较好，而两个参数中和就不知道了。所以系统报错。 方法重写的陷阱对于使用private修饰符修饰的方法，只能在当前类中访问该方法，子类无法访问父类中定义的private方法。既然子类无法访问父类的private。方法，当然也就无法重写该方法。 如果子类中定义了一个与父类的private方法具有相同的方法名、相同的形参列表、相同的返回值类型的方法，依然不是重写，只是了类中重新定义了一个新方法。 重写其他访问权限的方法如果父类中定义了使用默认访问控制符（也就是不使用访问控制符）修饰方法，这个方法同样可能无法被重写。 对于不使用访问控制符修饰的方法，它只能被与当前类处于同一个包中的其他类访问，其他包中的子类依然无法访问该方法。只有与当前类处于同一个包中的其他类才能访问该方法。 非静态内部类的陷阱非静态内部类的构造器非静态内部类必须寄生在外部类实例中，没有外部类的对象，就不可能产生非静态内部类的对象。因此，非静态内部类不可能有无参数的构造器————即是系统为非静态内部类提供一个默认的构造器，这个默认的构造器也需要一个外部类形参。 系统在编译阶段总会为非静态内部类的构造器增加一个参数，非静态内部类的构造器的第一个形参总是外部类。因此调用非静态内部类的构造器时必须传入一个外部类对象作为参数，否则程序将会引发运行时异常。 非静态内部类不能拥有静态成员对于非静态内部类而言，由于它本身就是一个非静态的上下文环境，因此非静态内部类不允许拥有静态成员。 非静态内部类的子类由于非静态内部类没有无参数的构造器，因此通过非静态内部类派生子类时也可能存在一些陷阱。 123456789101112131415161718class Base&#123; class In&#123; public void test()&#123; System.out.println(&quot;In的Test方法&quot;); &#125; &#125; class A extends In&#123; &#125;&#125;public class sub extends Base.In&#123; public sub()&#123; &#125; public static void main(String[] args)&#123; System.out.println(&quot;Hello World&quot;); &#125;&#125; 由于非静态内部类In必须寄生在Base对象之内，因此父类Base.In根本没有参数的构造器。而程序定义其子类Base.In时，没有定义构造器，那么系统会为它提供一个无参数的构造器。在sub无参数的构造器内，编译器会增加代码super()————子类总会调用父类的构造器。对于这个super()调用，指定调用父类Base.In无参数的构造器，必然导致编译错误.为了解决这个问题，应该为sub显示定义一个构造器，在该构造器中显示调用Base.In父类对应的构造器。 12345678public class sub extends Base.In&#123; public sub()&#123; new Base().super(); &#125; public static void main(String[] args)&#123; System.out.println(&quot;Hello World&quot;); &#125;&#125; 以上显式的调用父类的构造器。使用new Base()作为主调————即以一个Base对象作为主调，其实这个主调会作为参数擦传入super(),也就是传给In类带一个Base参数的构造器。 static关键字静态方法属于类被static关键字修饰的成员(Field,方法,内部类,初始化块,内部枚举类)属于类本身，而不是当个的java对象，具体到静态方法也是如此，静态方法属于类。而不属于Java对象。 静态内部类的限制当程序使用内部类时,应尽量考虑使用静态内部类，而不是非静态内部类。当程序使用静态内部类时，外部类相当于静态内部类的一个包，因此使用起来比较方便；但另一方面，这也给静态内部类增加了一个限制———静态内部类不能访问外部类的非静态成员。","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂Java笔记之常见java集合的实现细节","slug":"疯狂Java笔记之常见java集合的实现细节","date":"2017-08-20T17:12:17.000Z","updated":"2017-08-20T17:13:14.177Z","comments":true,"path":"2017/08/21/疯狂Java笔记之常见java集合的实现细节/","link":"","permalink":"http://jack921.win/2017/08/21/疯狂Java笔记之常见java集合的实现细节/","excerpt":"","text":"Set和Map1.Set和Map的关系首先Set是一种集合元素无序，不可重复的集合。而Map则代表一种有多个key-value对组成的集合，Map集合类似于传统的关联数据。看起来他们没哟什么关联，实际上Set和Map是有莫大的关联的。可以说Map是Set集合的扩展。 当我们只看Map的Key时，会发现所有的key不能重复，key之间没有顺序。也就是说将Map所有的key集合起来就组成了一个set集合。Map也提供了如下方法来返回组成的set集合1Set&lt;K&gt; keySet() 对于一个Map集合而言，它本质上是一个关联数组，关联数组中的key-value对之间有严格的对应关系，那将key-value对捆绑在一起对待，如下所示： 2.HashMap和HashSet在HashSet里，系统采用Hash算法决定集合元素的存储位置，这样可以保证快速存，取集合元素；对于HashMap而言，系统将value当初key的‘附属物’，系统根据Hash算法开决定key的存储位置，这个可以保证快速存，取集合key,而value总是紧随key存储。 集合号称存储的是Java对象，但实际上并不会真正将Java对象放入Set集合中，而只是在Set集合中保留这些对象的引用而己。也就是说，Java集合实际上是多个引用变量所组成的集合，这些引用变量指向实际的Java对象。对于java集合他只是多个引用变量的集合。 当程序试图将一个key-value对放入HashMap中时，首先根据该key的hashCade()返回值决定该Entry的存储位置—如果两个Entry的key的hashCade返回值相同，那么它们的存储位置相同:如果这两个Entry的key通过equals比较返回true，则新添加Entry的value将覆盖集合中原有Entry的value，但key不会覆盖;如果这两个Entry的key通过equal比较返回false ,则新添加的Entry将与集合中原有的Entry形成Entry链，而且新添加的Entry位于Entry链的头部 当系统开始初始化HashMap时，系统会创建一个长度为capacity的Entry数组。这个数组可以存储元素的位置被称为“桶(bucket)”,每个bucket都有其指定的索引，系统可以根据其索引快速访问该bucket里存储的元素。 无论何时，HashMap的每一个“桶”只存储一个元素(即一个Entry).由于Entry对象可以包含一个引用变量（就是Entry构造器的最后一个参数）用于指向下一个Entry，因此可能出现：HashMap的bucket中只有一个Entry,但这个Entry指向另一个Entry这就形成一个Entry链，如图: HashMap在每一个bucket里只有一个Entry,所以可以根据索引快速取出该bucket里的Enrty.当发生hash冲突时，单个bucket里存储的不是一个Entry,而是一个Entry链，系统会按顺序遍历每个Entry,知道找到想搜到的Entry为止，即使要搜索的末端，系统也会循环到最后找到该元素。 3.TreeMap和TreeSetTreeSet底层实际使用的容器就是TrenMap.绝大部分的方法都是直接调用TreeMap的方法来实现的。而对于TreeMap而言，它采用一种被称为‘红黑树’的排序二叉树来保存Map中的每个Entry即每个Entry都是红黑树的一个节点。 对于TreeMap向言，由于它底层采用一棵红黑树来保存集合中的Entry，这意味着TreeMap添加元素、取出元素的性能都比HashMap低。当TreeMag添加元素时，需要通过循坏找到新增Entry的插入位置，因此比较耗性能;当从TreeMap中取出元素时，需要通过循环才能找到合适的Entry，也比较耗性能·但TreeMap, TreeSet相比HashMag,HashSet的优势在于:’TreeMap中的所有Entry总是按key根据指定的排序规则保持有序状态，TreeSet中的所有元素总是根据指定的排序规则保持有序状态。 Map和List1.Map的values()方法不管是HashIvlap，还是TreeMap，它们的values()方法都可返回其所有value组成的Collection集合。按照通常理解，这个Collection集合应该是一个List集合，因为Map的多个valu。允许重复。但实际上，HashMap,TreeMap的values()方法的实现要更巧妙。这两个Mad对象的values()方法返回的是一个不存储元素的Collection集合，当程序遍历Collection集合时，实际上就是遍历Map对象的value HashMap和TreeMap的values()方法并未把Map中的value重新组合成一个包含元素的集合对象，这样就可以降低系统内存开销。 2.Map和List的关系 从底层实现来看，Set和Map很相似；从用法的角度来看，Map和List也有很大的相似之处。 1.Map接口提供了get(K key)方法，允许Map对象根据key来取得value.2.List接口提供了get(int index)方法，允许list对象根据元素索引来取得value Map和List在底层实现上没有太大的相似之处，只是用法有一些相似之处。 ArrayList和LinkedList1.Vector和ArrayList的区别Vector和ArrayList这个两个集合类的本质并没有太大的不同，它们都实现了List接口，而且底层都是基于Java数组来存储集合元素的。 此外从序列化机制的角度看，ArrayList的实现比Vector的实现更安全另外Vector是ArrayList的线程安全版本，ArrayList和Vector觉大部分方法的实现都是相同的，只是Vector的方法增加了synchronized修饰。 2.ArrayList和LinkedList的实现差异List代表一种线性表的数据结构。ArrayList则是一种顺序存储的线性表，ArrayList底层采用数组来保存每个集合元素，LinkedList则是一种链式存储的线性表，其本质上就是一个双向链表，但它不仅实现了List接口，还实现了Deque接口。也就是说，LinkedList既可以当成双向链表使用，也可以当成队列使用，还可以当成栈来使用(Deque代表双端队列，既具有队列的特征.也具有栈的特征)。 ArrayList因为ArrayList底层数据结构是数组，所以我们插入元素是需要完成两件事: 保证ArrayList底层封装的数组长度大于集合数据长度 插入之前将所有元素“整体搬家”，向后移动一格 同理在删除元素是也要对元素进行“整体搬家”，这就导致增加和删除的性能非常差，当时在取出数据元素时，性能基本和数组是一样的。 LinkedList因为LinkedSet是采用双向链表的，如果单纯的添加某个节点性能是很好的，当时如果需要指定索引处添加节点，LinkedList必须必须先找到索引处的节点，这个搜索过程系统开销也是不少的，删除也同理，如下图所示： 不过弊端是对于ArrayList而言，由于它底层采用数组来保存集合元素，因此可以直接根据数组索引取出index位置的元素;但对于LinkedList就比较麻烦，LinkedList必须逐个元素地搜索，直到找到第index个元素为止。所以性能相对较低。 3.ArrayList和LinkedList的性能分析和适用场景当程序需要以get(int index)获取List集合指定的索引出的元素，ArrayList性能大大的优于LinkedList。因为ArrayList底层以数组来保存集合元素，所以调用get(int index)方法获取指定索引处的元素时，底层实际调用elementData[index]来返回改元素，因此性能非常好，而LinkedList则必须逐个的搜索。 当程序调用add(int index,Object obj)向List添加数据是，ArrayList需要“整体搬家”才能实现添加，而LinkedList需要找到索引而不用整体搬家，当时找索引也需要消耗一些系统性能，因为他是逐个搜索。同理，删除也是这样子。 当添加的数据个数大于底层数组的长度时，那么ArrayList必须创建一个长度为原来长度1.5倍的数组，再由垃圾回收机制进行回收。这样系统开销也有点大了。而LinkedList就不存在这个问题。 不过从大多数应用场景来说ArrayList总体性能还是优于LinkedList。 Iterator迭代器1.Iterator实现类与迭代器模式Java的lteratar和Enumeration两个接口都是迭代器模式的代表之作，它们就是迭代器模式里的“迭代器接口”。所谓迭代器模式指的是，系统为遍历多种数据列表、集合，容器提供一个标准的“迭代器接口”，这些数据列表、集合、容器就可面向相同的“迭代器接口”编程，通过相同的迭代器接口访问不同数据列表‘集合、容器里的数据.不同的数据列表、集合、容器如何实现这个“迭代器接口”，则交给各数据列表、集合、容器自己完成。 2.迭代是删除指定元素对于TreeSet, HashSet等Set集合而言，当使用Iterator遍历它们时，如果正在遍历最后一个集合元素，那么使用Set集合的remove()方法删除集合的任意元素并不会引发ConcurrentModificatianException异常，当正在遍历其他元素时删除集合的任意元素都将引发该异常。","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂Java笔记之表达式中的陷阱","slug":"疯狂Java笔记之表达式中的陷阱","date":"2017-08-20T17:08:28.000Z","updated":"2017-08-20T17:09:58.736Z","comments":true,"path":"2017/08/21/疯狂Java笔记之表达式中的陷阱/","link":"","permalink":"http://jack921.win/2017/08/21/疯狂Java笔记之表达式中的陷阱/","excerpt":"","text":"关于字符串的陷阱JVM对字符串的处理首先看如下代码： 1String java=new String(&quot;HelloJack&quot;); 上面创建了两个字符串对象，其中一个是“HelloJack”这个直接量对应的字符串对象，另一个是由new String()构造器返回的字符串对象。 对于Java程序中的字符串直接量，JVM会使用一个字符串池来保存它们：当第一次使用某个字符串直接量是，JVM会将它放入字符串池进行缓存。在一般情况下，字符串池的字符串对象不会被垃圾回收，当程序再次需要使用该字符串时，无需重新创建一个新的字符串，而是直接让引用变量指向字符串池中已有的字符串。如下代码： 123String str1=&quot;Hello Java&quot;;String str2=&quot;Hello Java&quot;;System.out.println(str1==str2); 因为str1和str2都是直接量，都指向JVM字符串池里的“Hello Java”字符串，所以为true; 除了直接创建之外，也可以通过字符串连接表达式创建字符串对象，因此可以将一个字符串连接表达式赋给字符串变量。如果这这个字符串连接表达式的值可以在编译时确定下来，那么JVM会在编译时计算该字符串变量的值，并让它指向字符串池中对应的字符串。如下代码： 123String str1=&quot;HelloJava&quot;;String str2=&quot;Hello&quot;+&quot;Java&quot;;System.out.println(str1==str2); 最终结果返回就是true.需要注意的是上面都是直接量，而没有变量，没有方法的调用。因此，JVM可以在比编译时就确定该字符串连接表达式的值，可以让该字符串变量指向字符串池中对应的字符串。但如果程序使用了变量，或者调用的方法，那么只能等到运行时才能确定该字符串连接表达式的值，也就无法再编译时确定该字符串变量的值，因此无法利用JVM的字符串池。如下代码：12345String str1=&quot;HelloJava9&quot;;String str2=&quot;Hello&quot;+&quot;Java9&quot;;System.out.println(str1==str2); String str3=&quot;HelloJava&quot;+&quot;HelloJava&quot;.length();System.out.println(str1==str3); 第一个返回了true,第二个输出返回了false; 当然还有一个情况例外的，就是当变量执行“宏替换”时也是可以让字符串变量指向JVM字符串池中对应字符串。如下代码： 123456String str1=&quot;HelloJava9&quot;;String str2=&quot;Hello&quot;+&quot;Java9&quot;;System.out.println(str1==str2); final int len=9;String str3=&quot;HelloJava&quot;+len;System.out.println(str1==str3); 不可变的字符串String类是一个典型的不可变类。当一个String对象创建完成后，该String类里包含的字符序列就被固定下来，以后永远都不会改变。如下代码： 1234String str=&quot;Hello&quot;;System.out.println(System.identityHashCode(str));str=str+&quot;Java&quot;;System.out.println(System.identityHashCode(str)); 当一个String对象创建完成后，该String里包含的字符序列不能改变。可能会有疑惑，str变量对应的字符序列不是一直在变吗，当时str只是一个引用类型变量。像C语言的指针，他并不是真正的String对象，只是指向String对象而已。示意图如下：从图中知道”Hello”字符串也许以后永远都不会再被用到了，但是这个字符串并不会被垃圾回收掉，因为它一直存在于字符串池中，这也是Java内存泄露的原因之一。 对于一个String类而言，他代表字符序列不可改变的字符串，因此如果程序需要一个字符序列会发生改变的字符串，那么应该考虑使用StringBuilder和StringBuffer. 在通常情况下优先考虑使用StringBuidler.StringBuidler与StringBuffer的区别在于，StringBuffer是线程安全的，也就是说StringBuffer类里的绝大部分方法都增加了synchoronized修饰符。对方法增加synchoronized修饰符可以保证该方法线程安全，当会降低该方法的执行效率。在没有多现场的环境下，应该优先使用StringBuilder来表示字符串。 字符串比较如果程序需要比较两个字符串是否哦相同，用==进行判断就可以了；但是如果判断两个字符串所包含的字符序列时候相同，则应该用String重写过的equals()方法进行比较。假如没有重写equals方法，则比较的是引用类型的变量所指向的对象的地址。 表达式类型的陷阱表达式类型的自动提升Javc语言规定：当一个算术表达式中包含多个基本类型的值时，整个算术表达式的数据类型将自动提升。java语言的自动提升规则如下: 所有的byte类型，short类型和char类型将被提升到int类型。 整个算术表达式的数据类型自动提升与表达式中的最高等级操作数同样的类型。操作数的如下，位于箭头右边的类型等级高于位于箭头左边的类型等级。 复合赋值运算符的陷阱经过前面的介绍，可以知道下面的是错误的： 12short sValue=5;sValue=sValue-2; 因为sValue将自动提升为int类型，所以程序将一个int类型的值赋值给short类型的变量时导致了编译错误。但是改为如下就没有问题了： 12short sValue=5;sValue-=2; 上面程序使用复合赋值运算符，就不会导致编译错误。实际上sValue-=2;等价于sValue=(sValue的类型)(sValue-2),这就是复合赋值运算符的隐式类型转换。 如果结果值的类型步变量的类型大，那么复合赋值运算符将会执行一个强制类型转换，这个强制类型转换将有可能导致高位“截断”，如下代码所示： 1234short st=5;st+=10;st+=90000;System.out.println(st); 为了避免这种潜在的危险，有如下几种情况下需要特别注意： 将复合赋值运算符运用于byte,short或char等类型的变量 将复合赋值运算符运用于int类型的变量，而表达式右侧是long,float或double类型的值。 将复合赋值运算符运用于float类型的变量，而表达式右侧是double类型的值。 二进制整数123int it=ob1010_1010;byte bt=(byte)ob1010_1010;System.out.println(it==bt); it和bt是不相等的，造成这种问题的原因在于这两条规则： 直接使用整数直接量时，系统会将它当成int类型处理。 byte类型的整数虽然可以包含8位，但最高位是符号位。 转义字符的陷阱Java程序提供了三种方式来表示字符。 直接使用单引号括起来的字符值。如‘a’. 使用转义字符，如‘\\n’. 使用Unicode转义字符，如‘\\u0062’. java对待Unicode转义字符时不会进行任何处理，它会将Unicode转义字符直接替换成对应的字符，这将给java程序带来一些潜在的陷阱。 慎用字符Unicode转义形式理论上，Unicode转义字符可以代表任何字符（不考虑那些不在Unicode码表内的字符），因此很容易想到：所有字符都应该可以使用Unicode转义字符的形式。为了了解Unicode转义字符带来的危险，来看如下程序： 1System.out.println(&quot;abc\\u000a&quot;.length()); 表面上看程序将输出4当编译该程序时发现程序无法通过编译。原因是Java对Unicode转义字符不会进行任何特殊处理，它只是简单的将Unicode转义字符替换成相应的字符。对于\\u000a而言，他相当于一个换行符（\\n），因此对Java编译器而言，上面代码相当于如下： 1System.out.println(&quot;abc\\n&quot;.length); 中止行注释的转义字符在java程序中使用\\u000a时，它将被直接替换成换行字符（相当于\\n），因此java注释中使用这个Unicode转义字符要特别小心 泛型可能引起的错误原始类型变量的赋值在严格的泛型程序中，使用泛型声明的类时应该总是为之指定类型实参，但为了与老的Java代码保存一致，Java也允许使用带泛型声明的类是不指定类型参数，如果使用带泛型声明的类时没有传入类型实参，那么这个类型参数默认是声明该参数时指定的第一个上限类型，这个类型参数也被称为raw type(原始类型) 当尝试把原始类型的变量赋给带泛型类型的变量时，会发生一些有趣的事情，如下代码： 12345678List list=new ArrayList&lt;&gt;(); list.add(&quot;Hello&quot;);list.add(&quot;Jack&quot;);list.add(&quot;xie&quot;);List&lt;Integer&gt; intList=list;for(int i=0;i&lt;intList.size();i++)&#123; System.out.println(intList.get(i));&#125; 上面代码编译正常，并且正常输出intList的集合是三个普通的字符串。通过上面可以看出：当程序把一个原始类型的变量赋给一个带泛型信息的变量时，只要他们的类型保持兼容，无论List集合里实际包含什么类型的元素，系统都不会有任何问题。不过虽然我们编译的时候可能不会有什么问题，但是当我们把元素拿出来处理的时候intList还是引用的是String类型，而不是Integer,因此运行时可能还是会出问题。而当我们in=intList.get(i)```时是会报编译错误的。12345为此总结如下：- 当程序把一个原始类型的变量赋给一个带泛型信息的变量时，总是可以通过编译---只是会提示一些警告信息。- 当程序试图访问带泛型声明的集合的集合元素时，编译器总是把集合元素当成泛型类型处理---它并不关心集合里集合元素的实际类型。- 当程序试图访问带泛型声明的集合的集合元素是，JVM会遍历每个集合元素自定执行强制类型转换，如果集合元素的实际类型与集合所带的泛型信息不匹配，运行时将引发ClassCastException异常。### 原始类型带来的擦除 Apple apple=new Apple();Integer as=apple.getSize();Apple b=apple;Number size1=b.getSize();Integer size2=b.getSize();12345当```Integer size2=b.getSize(); ```时代码会报错。当一个带泛型信息的Java对象赋给不带泛型信息的变量时，Java程序会发生擦除，这种擦除不仅会擦除使用Java类时传入的类型实参，而且会擦除所有的泛型信息，也就是擦除所有尖括号里的信息。### 创建泛型数组的陷阱 List[] lsa=new List[10];12编译上面的代码会提示‘创建泛型数组’的错误，这正是由Java引起运行时异常，这就违背了Java泛型的设计原则————如果一段代码在编译时系统没有产生“[unchecked]未经检查的转换”警告，则程序在运行时不会引发ClassCastException异常。再看如下代码： public class GenericArray{ class A{} public GenericArray(){ A[] as=new A[10]; }}1上面编译还是会错，A[] as=new A[10]只是创建A[]数组，而没哟创建泛型数组，因为内部类可以直接使用T类形形参，因此可能出现如下形似： public class GenericArray{ class A{ T foo; } public GenericArray(){ A[] as=new A[10]; }}123这就导致创建泛型数组了，违背Java不能创建泛型数组的原则，所以JDK设计还是比较谨慎的。# 正则表达式的陷阱 String str=”java.is.funny”;String strAttr=str.split(“.”);for(String s:strAttr){ System.out.println(s);}123456789101112131415161718192021222324252627282930上面程序包含多个点号(.)的字符串，接着调用String提供的split()方法，以点号(.)作为分割符来分割这个字符串，希望返回该字符串被分割后得到的字符串数组。运行该程序，结果发现什么都没有输出。对于上面程序需要注意如下两点：- String提供的split(String regex)方法需要的参数是正则表达式- 正则表达式中的点号（.）可匹配任意字符。将上面代码改为如下形式```String strAttr=str.split(&quot;\\\\.&quot;); ```即可实现分割。String类也增加了一些方法用于支持正则表达式，具体方法如下：- matches(String regex):判断该字符串是否匹配指定的正则表达式。- String replaceAll(String regex,String replacement):将字符串中所有匹配指定的正则表达式的子串替换成replacement后返回。- String replaceFirst(String regex,String replacement):将字符串中第一个匹配指定的正则表达式的子串替换replacement后返回。- String[] split(String regex):以regex正则表达式匹配的子串作为分隔符来分割该字符串。以上方法都需要一个regex参数，这个参数是正则表达式。因此使用的时候要小心。# 多线程的陷阱### 不要调用run方法Java提供了三种方式来创建，启动多线程。- 继承Thread类来创建线程类，重写run()方法作为线程执行体。- 实现Ruannable接口来创建线程类，重写run()方法作为线程执行体。- 实现Callable 接口来创建线程类，重写call()方法作为线程执行体。其中第一种方式的效果最差，它有两点坏处：1.线程类继承了Thread类，无法再继承其他父类。2.因为每条线程都是Thread子类的实例，因此可以将多条线程的执行流代码于业务数据分离。对于第二种和第三种方式，它们的本质是一样的，只是Callable接口里包含的call()方法既可以声明抛出异常，也可以拥有返回值。### 静态的同步方法 public class SynchronStatic implements Runnable{ static boolean staticFlag =true; public static synchronized void test(){ for(int i=0;i&lt;100;i++){ System.out.println(&quot;test0:&quot;+Thread.currentThread().getName()+&quot; &quot;+i); } } public void test1(){ synchronized (this) { for(int i=0;i&lt;100;i++){ System.out.println(&quot;test1:&quot;+Thread.currentThread().getName()+&quot; &quot;+i); } } } @Override public void run() { if(staticFlag){ staticFlag=false; test(); }else{ staticFlag=true; test1(); } } public static void main(String[] args) throws InterruptedException { SynchronStatic synchronStatic=new SynchronStatic(); new Thread(synchronStatic).start(); new Thread(synchronStatic).start(); } }12345运行结果如下：![thread.PNG](http://upload-images.jianshu.io/upload_images/925576-b8767d69fcc32fdd.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)上面的代码用了Synchronized怎么还会一起执行呢。因为第一条线程锁定的是SynchronStatic类，而不是synchronStatic所引用的对象，而第二条线程完全可以获得对synchronStatic所引用的对象的锁定，因此系统可以切换到执行第二条线程。假如我们把上面中的同步代码块的同步监视器改为SynchronStatic类，如下形式： public void test1(){ synchronized (SynchronStatic.class) { for(int i=0;i&lt;100;i++){ System.out.println(“test1:”+Thread.currentThread().getName()+” “+i); } }}```此时静态同步方法和当前类为同步监视器的同步代码块不能同时执行。 静态初始化启动心线程执行初始化静态初始化快中的代码不一定是类初始化操作，静态初始化中启动线程run()方法代码只是新线程执行体，并不是类初始化操作。类似的，不要认为所有放在非静态初始化块中的代码就一定是对象初始化操作，非静态初始化块中启动新线程的run()方法代码只是新线程的线程执行体，并不是对象初始化操作。","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"疯狂Java笔记之Java的内存与回收","slug":"疯狂Java笔记之Java的内存与回收","date":"2017-08-20T17:08:10.000Z","updated":"2017-08-20T17:10:32.398Z","comments":true,"path":"2017/08/21/疯狂Java笔记之Java的内存与回收/","link":"","permalink":"http://jack921.win/2017/08/21/疯狂Java笔记之Java的内存与回收/","excerpt":"","text":"Java引用的种类1.对象在内存中的状态对于JVM的垃圾回收机制来说，是否回收一个对象的标准在于：是否还有引用变量引用改对象？只要有引用变量引用对象，垃圾回收机制就不会回收它。 也就是说，当java对象被创建出来之后，垃圾回收机制会实时的监控每个对象的运行状态，包括对象的申请，引用,被引用，赋值等。当垃圾回收机制实时的监控到某个对象不再被引用变量所引用时，垃圾回收机制就会回收它所占用的空间。 基本上，可以把JVM内存中的对象引用理解成一种有向图，把引用变量，对象都当成有向图的顶点，将引用关系当成图的有向边，有向边总是从引用端指向被引用的Java对象。因为Java的所有对象都是由一条条线程创建出来的，因此可以把线程对象当成有向图的起始顶点。 对于单线程程序而言，整个程序只有一条main线程，那么该图就是以main进程为顶点的有向图。在这个有向图中，main顶点可达的对象都处于可达状态，垃圾回收机制不会回收它们；如果某个对象在这个有向图中处于不可达状态，那么就认为这个对象不再被引用。 采用有向图管理内存中的对象具有较高的精度，当缺点是效率较低。当一个对象在堆内存中运行时，根据它在对应有向图中的状态，可以把它所处的状态分成 可达状态:当一个对象被创建后，有一个以上的引用变量引用它。在有向图中可以从起始顶点导航到该对象，那么它就处于可达状态，程序可以通过引用变量来调用该对象的属性和方法。 可恢复状态:如果程序中某个对象不再有任何引用变量引用它，它将先进入可恢复状态，此时从有向图的起始顶点不能导航到该对象。在这种状态下，系统的垃圾回收机制准备回收该对象所占用的内存。在回收该对象之前，系统会调用可恢复状态的对象的finalize方法进行资源清理，如果系统调用finalize方法重新让一个以L的引用变量引用该对象，则这个对象会再次变为可达状态:否则，该对象将进入不可达状态。 不可达状态:书对象的所有关联都被切断，fl甲系统调用所有对象的finaii}e方法依然没有使该对象变成可达状态后，这个对象将永久性地失去引用，最后变成不可达状态。只有当一个对象处于不可达状态时，系统才会真正回收该对象所占有的资源。 一个对象可以被一个方法的局部变量引用，也可以被其他类的类变量引用，或者被其他对象的实例变量引用。当某个对象被其他类的类变量引用时，只有该类被销毁后，该对象才会进入可恢复状态；当某个对象那个被其他对象的实例变量引用时，只有当引用该对象的对象被销毁或变成不可达状态后，改对象才会进入不可达状态。 对于垃圾回收机制来说，判断一个对象是否可回收的标准就在改对象时候被引用，因此引用也是JVM进行内存管理的一个重要概念。为了更好的管理对象的引用，从JDK1.2开始，Java在java.lang.ref包下提供了三个类：SoftReference,PhantomReference和WeakReference,它们分别代表了系统对对象的三种引用方式：软引用，虚引用和弱引用。归纳起来，Java语言对对象的引用有如下四种： 强引用 软引用 弱引用 虚引用 2.强引用当程序创建一个对象，并把这个对象赋给一个引用变量，这个引用变量就是强引用。强引用是最常见的。 当一个对象被一个或一个以上的强引用变量所引用时，它处于可达状态，它不可能被系统垃圾回收机制回收，即使系统内存非常紧张，即使有些Java对象以后永远都不会被用到，JVM也不会回收被强引用所引用的Java对象。 由于JVM肯定不会回收被强引用所引用的Java对象，因此强引用时造成Java内存泄漏的只要原因之一。 3.软引用对于强引用所引用的Java对象而言，无论系统的内存如何紧张，即使某些Java以后不再使用，垃圾回收机制也不会回收它所占的内存。当时软引用不同，当系统内存充足时，和强引用是没有什么区别的。但是当系统内存不足时，软引用所引用的Java对象可以被垃圾回收机制回收，从而避免系统内存的不足的异常。 当程序需要大量创建某个类的新对象，而且有可能重新访问已创建的来对象是，可以充分使用软引用来解决内存紧张的难题。代码如下： 1234567891011121314151617181920212223242526class Person&#123; String name; int age; public Person(String name,int age)&#123; this.name=name; this.age=age; &#125; public String toString()&#123; return &quot;Person[name=&quot;+name+&quot;,age=&quot;+age+&quot;]&quot;; &#125;&#125;public class Main &#123; public static void main(String[] args) &#123; SoftReference&lt;Person&gt;[] people=new SoftReference[100000]; for(int i=0;i&lt;people.length;i++)&#123; people[i]=new SoftReference&lt;Person&gt;(new Person(&quot;HelloJack&quot;+i,i)); &#125; System.out.println(people[2].get()); System.out.println(people[4].get()); System.gc(); System.runFinalization(); System.out.println(people[2].get()); System.out.println(people[4].get()); &#125;&#125; 4.弱引用软引用与软引用有点相似，区别在于弱引用所引用的对象的生命周期更短。弱引用通过WeakReference类实现。对于软引用的对象而言，当系统垃圾回收机制运行时，不管系统内存时候足够，总会回收改对象所占用的内存。当然，并不是说当一个对象只有弱引用时，它就会立即被回收，正如那些失去引用的对象一样，必须等到系统垃圾回收机制运行时才会被回收。 弱引用具有很大的不确定性，因为每次垃圾回收机制执行时都会回收弱引用所引用的对象，而垃圾回收机制的运行又不受程序员的控制，因此程序获取弱引用所引用的Java对象是必须小心空指针异常，通过弱引用所获取的Java对象可能是null.代码如下： 1234567String str=new String(&quot;HelloJack&quot;);WeakReference&lt;String&gt; wr=new WeakReference&lt;String&gt;(str);str=null;System.out.println(wr.get());System.gc();System.runFinalization();System.out.println(wr.get()); 5.虚引用弱引用和软引用可以单独使用，当虚引用不能单独使用，单独使用虚引用没有太大的意义。虚引用的主要作用就是跟踪对象被垃圾回收的状态，程序可以通过检查与虚引用关联的引用队列中是否包含指定的虚引用，从而了解虚引用所引用的对象是否即将被回收。虚引用通过PhantomReference类实现，他完全类似于没有引用。虚引用对对象本身没有太大的影响，对象甚至感觉不到虚引用的存在。代码如下： 12345678910String str=new String(&quot;HelloJack&quot;);ReferenceQueue&lt;String&gt; rq=new ReferenceQueue&lt;String&gt;();PhantomReference&lt;String&gt; pr=new PhantomReference&lt;&gt;(str,rq);str=null;System.out.println(pr.get());System.gc();System.runFinalization();System.out.println(rq.poll()==pr); Java的内存泄漏程序运行过程中会不断地分配内存空间，那些不在使用的内存空间应该即时被回收，从而保证系统可以再次使用这些内存，如果存在无用的内存空间应该即时被回收，从而保证系统可以再次使用这些内存，如果存在无用的内存没有被回收回来，那就内存泄漏。 垃圾回收机制垃圾回收机制只要完成两件事： 跟踪并监控每个Java对象，当某个对象处于不可达状态，回收该对象所占用的内存 清理内存分配，回收过程中产生的内存碎片 一个高效的JVM一个重要的方面是提供高效的垃圾回收机制，高效的垃圾回收机制可以保证垃圾回收的快速运行，避免应用程序的性能瓶颈，又不会到时应用程序卡顿。 1.垃圾回收的基本算法实际上，垃圾回收机制不可能实时检测到每个Java对象的状态，因此当一个对象失去引用后，它也不会立即被回收，只有等垃圾回收机制运行时才会被回收。对于一个垃圾回收器的设计算法来说，大致如下可供选择的设计。 串行回收(Serial)和并行回收(Parallel)：串行回收就是不管系统有多少个CPU，始终只用一个CPU来执行回收操作；而并行回收就是把整个回收工作拆分成多部分，每个部分有一个CPU负责，从而让多个CPU并行回收。并行回收的执行效率很高，但复杂度增加，另外也有其他一些副作用，比如内存碎片会增加等。 并发执行(Concorrent)和应用程序(Stop-the-world)停止：Stop-the-world的垃圾回收方式在执行垃圾回收的同时会导致应用程序暂停。并发执行的垃圾回收虽然不会导致应用程序暂停，但由于并发执行垃圾回收需要解决和应用程序的执行冲突(应用程序可能会在垃圾回收的过程中修改对象)，因此并发执行垃圾回收的系统开销比Stop-the-world更高，而且执行时也需要更多的堆内存。 压缩(Compacting)/不压缩(Non-compacting)和复制(Copying):为了减少内存碎片，支持压缩的垃圾回收器会把所有的活对象搬迁到一起，然后将之前占用的内存全部回收。不压缩的垃圾回收器只是回收内存，这样回收回来的内存不可能是连续的，因此将有较多的内存碎片，相对压缩垃圾回收机制，不压缩垃圾回收机制回收内存更快，而分配内存是就会更慢，而且无法解决内存碎片的问题。复制垃圾回收会将所有的可达对象复制到另一块相同的内存中，这种方式的优点是垃圾回收过程不会产生内存碎片，但缺点也很明显，需要复制数据和额外的内存。 上面介绍的复制，不压缩，压缩都是垃圾回收器回收已用内存空间的方式，关于这三种方式详述如下: 复制：将堆内存分成两个相同空间，从根(类似有向图起始顶点)开始访问每一个关联的可达对象，将空间A的可达对象全部复制到空间B，然后一次性回收整个空间A。 对于复制算法而言，因为只需访问所有的可达对象，将所有的可达对象复制完成后就回收整个空间，完全不用理会那些不可达对象，所以遍历空间的成本较小，但需要巨大的复制成本和较多的内存。 标记清除(mark-sweep):也就是不压缩回收方式。垃圾回收器先从根开始访问所有的可达对象，将他们标记为可状态，然后再遍历一次整个内存区域，对所有的没有标记为可达对象进行垃圾回收处理。 标记压缩(mark-sweep-compact):这是压缩回收方式，这种方式充分利用上述两种算法的优点，垃圾回收器先从根开始访问所有的可达对象，将它们标记为可达状态。接下来垃圾回收器会将这些活动对象搬迁在一起，这个过程也被称为内存压缩，然后垃圾回收机制再次回收那些不可达对象所占用的内存空间，这样对避免了回收产生内存碎片。 上面无论用哪种回收方式，具体实现起来总是利弊参半。因此，实际垃圾回收时总是使用多种设计方式，也就是针对不同的情况采用不同的垃圾回收方式实现。 现行的垃圾回收器用分代的方式来采用不用的回收设计。分代的基本思路是根据对象生存时间的长短，把堆内存分成三代： Young(新生代) Old(老年代) Permanent(永生代) 垃圾回收器会根据不同代的特点采用不同的回收算法，从而充分利用各种回收算法的优点。 2.堆内存的分代回收分代回收的一个依据就是对象生存时间的长短，然后根据不同代采取不同的垃圾回收策略。采用这种“分代回收”的策略基于如下两点事实。 绝大多数的对象不会被长时间引用，这些对象在其Young期间就会被回收。 很老的对象(生存时间很长)和很新的对象(生存时间很短)之间很少存在互相引用的情况。 对于Young代的对象而言，大部分对象都会很快进入不可达状态，只要少量的对象能熬到垃圾回收执行，而垃圾回收器只需保留Young代中处于可达状态的对象，如果采用复制算法只需要少量的复制成本，因此大部分垃圾回收器对Young代都采用复制算法。 Young代 对Young代采用复制算法只需遍历那些处于可达状态的对象，而且这些对象的数量较少，可复制成本也不大，因此可以充分发挥复制算法的优点。 Young代由一个Eden区和两个Survivor区构成。绝大多数对象先分配到Eden区中(有一些大的对象可能会直接被分配到old代中)，Survivor区中的对象都至少在Young代中经历过一次垃圾回收，所以这些对象在被转移到old代之前会先保留在Survivor空间中。同一时间两个Sunrtvor空间中有一个用来保存对象，而另一个是空的，用来在下次垃圾回收时保存Young代中的对象。每次复制就是将Aden和第一个Survivpr区的可达对象复制到第二个Survivor区，然后清空Eden与第一个Survivor区。 2.Old代 如果Young代中的对象经过数次的垃圾回收依然没有被回收掉，即这个对象经过足够长的时间还处于可达状态，垃圾回收机制就会将这个对象转移到Old代。 Old代的大部分对象都是“久经考验”的老人了，因此它们没有那么容易被回收。而且随着时间的流逝，Old代的对象会越来越多，因此Old代的空间要比Young代的空间更大。出于这两点考虑，具有如下特征: Old垃圾回收的执行频率无须太高。因为很少有对象会死掉。 每次对Old代执行垃圾回收都需要更长的时间来完成。 基于以上考虑，垃圾回收器一般会采用标记压缩算法，这个算法可以避免复制Old代的大量对象，而且Old代的对象不会很快死亡，回收过程不会大量的产生内存碎片。因此相对比较划算。 3.Permanent代Permanent代主要用于装载Class,方法等信息，默认为64MB，垃圾回收机制通常不会回收Permanent代的对象。对于那些需要加载很多类的服务器程序，往往需要加大Permanent代的内存，否则可能因为内存不足而导致程序终止。 当Young代的内存将要用完时，垃圾回收机制会对Young代进行垃圾回收，垃圾回收机制会采用较高的频率对Yn}rng代进行扫描和回收。因为这种回收的系统开销比较小，因此也被称为次要回收(minor collection ).当old代的内存将要用完时，垃圾回收机制会进行全回收，也就是对Young代和old代都要进行回收，此时回收成本就大得多了，因此也称为主要回收(major callectivn)。 通常来说，Young代的内存会先被回收，而且会使用专门的回收算法(复制算法)来回收Young代的内存:对于Old代的回收频率则要低得多，因此也会采用专门的回收算法。如果需要进行内存压缩，那么每个代都独立地进行压缩。 3.常见的垃圾回收器1.串行回收器 串行回收器通过对Young代和Old代的回收都是串行的（只使用一个CPU），而且垃圾回收执行期间会使的应用程序产生暂停。具体策略为，Young代采用串行复制算法，Old代采用串行标记压缩算法。 2.并行回收器 并行回收器对于Young代采用与串行回收器基本形似的回收算法，只是增加了多CPU并行的能力，即同时启动多线程并行来执行垃圾回收。线程数默认问CPU个数，当计算机中的CPU很多时，可以用-XX:ParallelGCThreads=size来减少并行线程的数目。 3.并行压缩回收器 并行压缩回收器的改变主要体现在对Old代的回收上。系统首先将Old代划分成几个固定大小的区域。在Mark阶段，多个垃圾回收线程会并行标记Old代中的可达对象。当某个对象被标记为可达对象时，还会更新对象所在区域的大小，以及该对象的位置信息。 接下来是summary阶段。summary阶段直接操作Old代的区域，而不是单个的对象。由于每次垃圾回收的压缩都会在Old代的左边部分存储大量的可达对象，对这样的高密度可达对象的区域进行压缩往往很不划算。所以summary阶段会从最左边的区域开始检测每个区域的密度，当检测到某个区域中能回收的空间达到了某个数值时(也就是可达对象的密度较小时)，垃圾回收器会判定该区域，以及该区域右边的所有区域都应该进行回收，而该区域左边的区域都会被标识为密集区域，垃圾回收器既不会把新对象移动到这些密集区域中，也不会对这些密集区域进行压缩;该区域和其右边的所有区域都会被压缩并回收空间。summary阶段目前还是串行操作，虽然并行是可以实现的，但重要性不如对mark和压缩阶段的并行重要。 最后是compact阶段。回收器利用summary阶段生成的数据识别出有哪些区域是需要装填的，多个垃圾回收线程可以并行地将数据复制到这些区域中。经过这个过程后，Old代的一端会密集地存在大量的活动对象，另一端则存在大块的空闲块。 4.并发标识-清理(Mark-Sweep)回收器(CMS) CMS回收器对Young代的回收方式和并行回收器的回收方式完全相同。由于对Young代的回收依然采用复制回收算法，因此垃圾回收时依然会导致程序暂停，除非依靠多CPU并行来提高垃圾回收的速度。 通常来说，建议适当加大Young代的内存。如果Young代的内存足够大就不用频繁地进行垃圾回收了，而且增大垃圾回收的时间间隔后可以让更多的位于Young代中的Java对象自己死掉，从而避免复制。但将Young代的内存设得过大也有一个坏处:当垃圾回收器回收Young代的内存时，复制成本会显著上升(复制算法必须等Young代满了之后才开始回收)，所以回收时会让系统的暂停时间显著加大。 CMS对Old代的回收多数是并发操作，而不是并行操作。垃圾回收开始时需要一个短暂的暂停，此阶段称为初始标识(initial mark)阶段，这个阶段仅仅标识出那些被直接引用的可达对象。接下来进入并发标识阶段( concurrent marking phase)，垃圾回收器会依据在初始标识中发现的可达对象来寻找其他的可达对象。由于在并发标识阶段应用程序也会同时在运行，无法保证所有的可达对象都被标识出来，因此应用程序会再次很短地暂停一下，多线程并行地重新标识之前可能因为井发而漏掉的对象，这个阶段被称为再标识(remark)阶段。 完成了再标识以后，所有的可达对象都已经被标识出来了，接下来就可以运行并发清理操作了。 4.内存管理小技巧 尽量使用直接量当需要使用字符串，还有Byte,Short,Integer,Long,Float,Double,Boolean,Character包装类的实例时，程序不应该采用new的方式来创建对象，而应该直接采用直接量来创建它们。 使用StringBuilder和StringBuffer进行字符串连接 String,StringBuilder,StringBuffer都可以代表字符串，其中String代表字符序列不可变的字符串，而StringBuilder和StringBuffer都代表字符序列可变的字符串 如果程序使用多个String对象进行字符串连接运算，在运行时将生产大量的临时字符串，这些字符串会保存在内存中从而到时程序性能下降。 尽早释放无用对象的引用 大部分时候，方法的局部引用变量所引用对象会随着方法的结束而变成垃圾，因为局部变量的生存期限很短，当方法运行结束时，该方法内的局部变量就结束了生存期限。因此大部分时候程序无须将局部引用变量显示设为null. 123456public void info()&#123; Object object=new Object(); System.out.println(object.toString()); System.out.println(object.hashCode()); object=null;&#125; 上面的方法随着info()方法执行完成，obj引用变量的作用域就结束了，原来的obj所引用的对象就会变成垃圾。因此object=null是没有必要的。但是如下代码：12345678public void info()&#123; Object object=new Object(); System.out.println(object.toString()); System.out.println(object.hashCode()); object=null; //执行耗时，耗内存操作 //或者调用耗时，耗内存的方法&#125; 上面因为需要执行耗内存耗时的方法，可以尽早的释放对Object对象的引用。所以可能的是程序在执行耗时，耗内存操作时，obj之前所引用的Object对象可能被垃圾回收了。 尽量少用静态变量 从理论上来说，Java对象何时被回收由垃圾回收机制决定，对程序员来说是不确定的。由于垃圾回收机制判断一个对象是否是垃圾的唯一标准是该对象是否有引用变量引用它，因此推荐尽早释放对象的引用。 最好的情况是，某个对象被static变量所引用，那么垃圾回收机制通常是不会回收这个对象所占的内存的。如下代码： 123class Person&#123; static Obejct obj=new Object();&#125; Obj变量是Person类的静态变量，因此它的生命周期与Person类同步。在Person类不被卸载的情况下，Person类对应的Class对象会常驻内存，直到程序运行结束。因此，obj所引用的Object对象一旦被创建，也会常驻内存，知道程序结束。 避免在经常调用的方法，循环中创建Java对象 经常调用的方法和循环有一个共同特征：这些代码段会被多次重复调用。如下： 123for(int i=0;i&lt;10;i++)&#123; Object obj=new Object();&#125; 虽然上面的obj是局部变量，执行完之后会失效，当时要循环创建10次，系统要不断地分配空间，执行初始化操作。这些对象的生存时间又不长，所以系统又要回收它们所占的内存空间，在这些操作中会消耗不少性能。 缓存经常使用的对象 如果有些对象需要被经常使用，则可以考虑把这些对象用缓存池保存起来，，这样当下次需要时就可直接拿出这些对象来用，典型的缓存就是数据连接池，数据连接池缓存了大量的数据库连接，每次需要访问数据库是都可以直接去除数据库连接。 除此之外，系统的一些常用基础信息也可以通过缓存的方式存起来。实现缓存一般有两种方式： 1.使用HashMap进行缓存（不宜存储过多数据，从而内存过大，导致性能下降） 2.直接使用某些开源项目进行缓存 尽量不要使用finalize()方法 当一个对象失去引用之后，垃圾回收器准备回收该对象之前，垃圾回收机制会先调用改对象的finalize()方法来执行资源清理。处于这种考虑，可能有些开发者会考虑使用finalize()方法来进行资源清理。 实际上，将资源清理放在finalize()方法中完成是非常拙劣的选择。根据前面介绍的垃圾回收算法，垃圾回收机制工作量已经够大了，尤其是回收Young代内存时， 大都会引起应用程序暂停，使得用户难以忍受。 在垃圾回收器本身已经严重制约应用程序性能的情况下，如果再选择使用finalize()方法进行资源清理，无疑是一种火上浇油的行为，这将导致垃圾回收器的负担更大，导致程序运行效率更差。 考虑使用SoftReference 当程序需要创建长度很大的数组时，可以考虑使用SoftReference来包装数组元素，而不是直接让数组元素来引用对象。 SoftReference是一个很好的选择，当内存充足时不回收数据，当内存不充足时释放软引用所引用的对象。","categories":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://jack921.win/tags/Java/"}]},{"title":"Java基础之对象及其内存管理","slug":"Java基础之对象及其内存管理","date":"2017-08-15T16:22:22.000Z","updated":"2017-08-15T16:24:43.421Z","comments":true,"path":"2017/08/16/Java基础之对象及其内存管理/","link":"","permalink":"http://jack921.win/2017/08/16/Java基础之对象及其内存管理/","excerpt":"","text":"1.实例变量和类变量Java程序的变量大体可分为成员变量和局部变量。其中局部变量可分为如下二类。 形参:在方法签名中定义的局部变量，由方法调用者负责为其赋值，随方法的结束而消亡。 方法内的局部变量:在方法内定义的局部变量，必须在方法内对其进行显式初始化口这种类型的局部变量从初始化完成后开始生效，随方法的结束而消亡。 代码块内的局部变量:在代码块内定义的局部变量，必须在代码块内对其进行显式初始化。这种类型的局部变量从初始化完成后开始生效，随代码块的结束而消亡。 局部变量的作用时间很短暂，他们都被存储在栈内存中。 类体内定义的变量被称为成员变量〔英文是Field)。如果定义该成员变量时没有使用static修饰，该成员变量又被称为非静态变量或实例变量;如果使用了static修饰，则该成员变量又可被称为静态变量或类变量 (坑:表面上看定义成员变量是没有先后顺序的，实际上还是要采用合法的前向引用)如： 12int num=num2+1;int num2=2; 是会报错的，出得num2位静态比变量的时候。 2.实例变量和类变量的属性使用static修饰的成员变量是类变量，属于该类本身:没有使用属于该类的实例。在同一个JVM内，侮个类只对应一个Java对象口static修饰的成员变量是Class对象，但侮个类可以创建多个 由于同一个JVM内每个类只对应一个static对象，因此同一个JVM内的一个类的类变量只需一块内存空间;但对于实例变量而言，改类每创建一次实例，就需要为实例变量分配一块内存空间。也就是说，程序中有几个实例，实例变量就需要几块内存空间。 3.实例变量的初始化时机对于实例变量，它是Java对象本身。每创建Java对象时都需要为实例变量分配内存空间，并对实例进行初始化。程序可以在三个地方进行初始化： 定义实例变量时指定初始值。 非静态初始化块中对实例变量指定初始值。 构造器中对实例变量指定初始值。其中第1,2种方式都比在构造器初始化更早执行，当第1,2种的执行顺序与他们在源程序中的排列顺序相同。 4.类变量的初始化时机类变量是属于Java类本身。从程序运行的角度来看，每个jvm对一个Java类只初始化一次，因此只有每次运行Java程序时，才会初始化该Java类，才会为该类的类变量分配内存空间，并执行初始化。 程序可以在两个地方对类变量执行初始化： 定义类变量时指定初始值。 静态初始化块中对类变量指定初始值。 这两种方式的执行顺序与它们在源程序中的排列顺序相同。 父类构造器1.隐式调用和显式调用当创建Java对象时，系统会先调用父类的非静态初始化块进行初始化。而这种调用是隐式调用。而第一次初始化时最优先初始化的是静态初始化块。接着会调用父类的一个或多个构造器进行初始化，这个调用是用过super()的方法来显式调用或者隐式调用。当所有父类初始化完之后才初始化子类。实例代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Animal&#123; static&#123; System.out.println(&quot;Animal静态初始化块&quot;); &#125; &#123; System.out.println(&quot;Animal初始化块&quot;); &#125; public Animal()&#123; System.out.println(&quot;Animal构造器&quot;); &#125; &#125;class Cat extends Animal&#123; public Cat(String name,int age)&#123; super(); System.out.println(&quot;Cat构造器&quot;); &#125; static&#123; System.out.println(&quot;Cat静态初始化块&quot;); &#125; &#123; System.out.println(&quot;Cat初始化块&quot;); weight=2.0; &#125; double weight=2.3; public String toString()&#123; return &quot;weight=&quot;+weight; &#125; &#125;public class JavaTest &#123; public static void main(String[] args) &#123; Cat cat=new Cat(&quot;kitty&quot;,2); System.out.println(cat);// Cat cat2=new Cat(&quot;Garfied&quot;,3);// System.out.println(cat2); &#125; &#125; 输出的结果是： 2访问子类对象的实例变量子类因为继承父类所以可以访问父类的成员方法和变量，当一般情况下父类是访问不了子类的，因为父类不知道哪个子类继承。但是在特殊情况下是可以的，如下代码： 12345678910111213141516171819202122232425262728293031class BaseClass&#123; private int i=2; public BaseClass()&#123; this.display(); &#125; public void display()&#123; System.out.println(&quot;BaseClass&quot;); System.out.println(i); &#125; &#125;class Derived extends BaseClass&#123; private int i=22; public Derived()&#123; i=222; &#125; public void display()&#123; System.out.println(&quot;Derived&quot;); System.out.println(i); &#125; public void sub()&#123; System.out.println(&quot;sub&quot;); &#125;&#125;public class JavaTest &#123; public static void main(String[] args) &#123; Derived derived=new Derived(); &#125;&#125; 结果如下： 仔细看代码，好像怎么也不会输出0吧，为什么呢。 首先我们要知道Java构造器只是起到对变量进行初始化的作用，而在执行构造器之前我们的对象已经初始化了，在内存中已经被分配起来了，而这些值默认是空值。 其次this在代表正在初始化的对象，一般看会以为就是BaseClass对象，不过在上面代码里，this是放在BaseClass的构造器里，当时我们是在Derived()构造器执行的，是Derived()构造器隐式调用了BaseClass()构造器的代码，所以在这个情况下是this是Derived对象。所以当我们改为this.sub()时是报错的。 此外这个this的编译类型是BaseClass，所以我们改为this.i的时候输出是2. 所以应该避免在父类构造器中调用被子类重写的方法。 父子实例的内存控制1.继承成员变量和继承方法的区别1234567891011121314151617181920212223242526272829class Animal&#123; public String name=&quot;Animal&quot;; public void sub()&#123; System.out.println(&quot;AnimalSub&quot;); &#125; &#125;class Wolf extends Animal&#123; public String name=&quot;Wolf&quot;; public void sub()&#123; System.out.println(&quot;WolfSub&quot;); &#125;&#125;public class JavaTest &#123; public static void main(String[] args) &#123; Animal animal=new Animal(); System.out.println(animal.name); animal.sub(); Wolf wolf=new Wolf(); System.out.println(wolf.name); wolf.sub(); Animal sub=new Wolf(); System.out.println(sub.name); sub.sub(); &#125;&#125; 结果如下： 所以当声明类型为父类，运行类型为子类是，成员变量表现出父类，而方法表现出子类，这就是多态。 2.内存中的子类实例1234567891011121314151617181920212223242526272829303132333435363738394041424344class Fruit&#123; String color=&quot;未确定颜色&quot;; public Fruit getThis()&#123; return this; &#125; public void info()&#123; System.out.println(&quot;Fruit方法&quot;); &#125; &#125;public class JavaTest extends Fruit&#123; @Override public void info() &#123; System.out.println(&quot;JavaTest方法&quot;); &#125; public void AccessSuperInfo()&#123; super.info(); &#125; public Fruit getSuper()&#123; return super.getThis(); &#125; String color=&quot;红色&quot;; public static void main(String[] args) &#123; JavaTest javaTest=new JavaTest(); Fruit f=javaTest.getSuper(); System.out.println(&quot;javaTest和f所引用的对象是否相同:&quot;+(javaTest==f)); System.out.println(&quot;所引用对象的color实例变量：&quot;+javaTest.color); System.out.println(&quot;所引用对象的color实例变量：&quot;+f.color); javaTest.info(); f.info(); javaTest.AccessSuperInfo(); &#125; &#125; 当创建一个对象时，系统不仅为该类的实例变量分配内存,同时也为其父类定义的所有实例变量分配内存,即是子类定义了与父类同名的实例变量。也就是说，当系统创建一个Java对象时，如果该Java类有两个父类(一个直接父类A，一个间接父类g ),假设A类中定义了2个实例变量，B类中定义了3个实例变量，当前类中定义了2个实例变量，那么这个Java对象将会保存2+3十2个实例变量。 如果子类里定义了与父类中已有变量同名的变量，那么子类中定义的变量会隐藏父类中定义的变量，而不是覆盖。因此系统创建子类对象是依然会为父类定义的，被隐藏的变量分配内存空间。 为了在子类中访问父类定义的，被隐藏的变量和方法，可以使用super来限定修饰这些变量和方法。 3.父，子类的类变量如果在子类中要访问父类中被隐藏的静态变量和方法，程序有两种方式： 直接使用父类的类名作为主调来访问类变量 使用super.作为限定来访问类变量 一般情况下，都建议使用第一种方式访问类变量，因为类变量属于类本身,使用类名做主调来访问可以较好的可读性 final修饰符1.final 修饰的变量final修饰的实例变量必须显示指定初始值，只能在如下三个位置指定初始值。 定义final实例变量时指定初始值 在非静态初始化块中为final实例变量指定初始值 在构造器中为final实例变量指定初始值 对于普通实例java可以指定默认初始化，而final实例变量只能显示指定初始化。 2.执行‘宏替换’的变量在定义时final类变量指定了初始值，该初始值在编译时就被确定下来，这个final变量本质上已经不再是变量而是一个直接量，如果被赋的表达式只是基木的算术表达式或字符串连接运算，没有访问普通变量，调用方法，Java编译器同样会将这种final变量当成“宏变量”来处理。 3.final方法不能重写如果父类中某个方法使用了final修饰符进行修饰，那么这个方法将不可能被他的子类访问到，因此这个方法也不可能被他的子类重写。从这个层面说，private和final同时修饰某个方法没有太大的意义，但是被java语法允许。 4.内部类中的局部变量Java要求所有被内部类访问的局部变量都使用final修饰也是有其原因的。对于井通的局部变量而言，‘它的作用域就停留在该方法内，当方法执行结束后，该局部变量也随之消失;但内部类则可能产生隐式的“闭包(Closure)”，闭包将使得局部变量脱离它所在的方法继续存在。","categories":[{"name":"java基础","slug":"java基础","permalink":"http://jack921.win/categories/java基础/"}],"tags":[{"name":"java","slug":"java","permalink":"http://jack921.win/tags/java/"}]},{"title":"Flexboxlayout使用详解","slug":"Flexboxlayout使用详解","date":"2017-07-26T16:38:14.000Z","updated":"2017-07-26T16:42:25.717Z","comments":true,"path":"2017/07/27/Flexboxlayout使用详解/","link":"","permalink":"http://jack921.win/2017/07/27/Flexboxlayout使用详解/","excerpt":"","text":"对于学习React Native或者前端的同学肯定对Flexbox 的有所了解，因为这是前端领域CSS的一种布局方案，现在google也开源了类似前端Flexbox的项目叫Flexboxlayout，这样android也可以用Flexboxlayout实现类似前端Flexbox的布局。 首先Flexboxlayout有5大布局属性分别是flexDirection,flexWrap,justifyContent ,alignItems ,alignContent,这5个布局属性又对应着不同参数以实现不用的布局效果。具体如下: 1.flexDirection 属性决定主轴的方向（即项目的排列方向）。对应的参数和效果图如下: row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 实例代码如下,而我们要改的是123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566 ``` &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;com.google.android.flexbox.FlexboxLayout android:id=&quot;@+id/flexbox_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:flexDirection=&quot;row_reverse&quot;&gt; &lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot; android:text=&quot;textview1&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot; android:text=&quot;textview2&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview3&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot; android:text=&quot;textview3&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview4&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color4&quot; android:text=&quot;textview4&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview5&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color5&quot; android:text=&quot;textview5&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview6&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color5&quot; android:text=&quot;textview6&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt;&lt;/RelativeLayout&gt; 1.当flexDirecition的参数为column时,即app:flexDirection=”column”: 2.当flexDirecition的参数为column时,即app:flexDirection=”column_reverse”: 3.当flexDirecition的参数为column时,即app:flexDirection=”row”: 4.当flexDirecition的参数为column时,即app:flexDirection=”row_reverse”: 2.flexWrap在默认情况下 Flex 跟 LinearLayout 一样，都是不带换行排列的，但是flexWrap属性可以支持换行排列。对应的参数和效果图如下: nowrap:不换行 wrap：按正常方向换行 wrap-reverse：按反方向换行 实例代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;com.google.android.flexbox.FlexboxLayout android:id=&quot;@+id/flexbox_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:flexWrap=&quot;wrap&quot;&gt; &lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot; android:text=&quot;textview1&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview2&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot; android:text=&quot;textview2&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview3&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot; android:text=&quot;textview3&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview4&quot; android:layout_width=&quot;150dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color4&quot; android:text=&quot;textview4&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview5&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color5&quot; android:text=&quot;textview5&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview6&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color5&quot; android:text=&quot;textview6&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt;&lt;/RelativeLayout&gt; 我们通过修改app:flexWrap=&quot;wrap&quot;来实现不同的效果 1.当flexWrap的参数为wrap时,即app:flexWrap=”wrap”: 2.当flexWrap的参数为nowrap时,即app:flexWrap=”nowrap”: 3.当flexWrap的参数为wrap_reverse时,即app:flexWrap=”wrap_reverse”: 3.justifyContent属性定义了项目在主轴上的对齐方式。看解释有点含糊，没关系，待会效果图一目了然，justifyContent对应的参数和含义如下： flex_start（默认值）：左对齐 flex-end：右对齐 center： 居中 space-between：两端对齐，项目之间的间隔都相等 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 实例代码如下 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;com.google.android.flexbox.FlexboxLayout android:id=&quot;@+id/flexbox_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:justifyContent=&quot;flex_start&quot;&gt; &lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot; android:text=&quot;textview1&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview2&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot; android:text=&quot;textview2&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview3&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot; android:text=&quot;textview3&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt;&lt;/RelativeLayout&gt; 1.当justifyContent的参数为flex_start时,即app:justifyContent=”flex_start”: 2.当justifyContent的参数为flex_end时,即app:justifyContent=”flex_end”: 3.当justifyContent的参数为center时,即app:justifyContent=”center”: 4.当justifyContent的参数为space_around时,即app:justifyContent=”space_around”: 5.当justifyContent的参数为space-between时,即app:justifyContent=”space-between”: 4.alignItems属性定义项目在副轴轴上如何对齐。(一般默认一般默认情况下，主轴是从左往右的直线，而对应的副轴就是从上忘下)，alignItems对应的参数和含义如下： flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 实例代码如下：12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;com.google.android.flexbox.FlexboxLayout android:id=&quot;@+id/flexbox_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:alignItems=&quot;flex_start&quot;&gt; &lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot; android:text=&quot;textview1&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview2&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot; android:text=&quot;textview2&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview3&quot; android:layout_width=&quot;80dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot; android:text=&quot;textview3&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt;&lt;/RelativeLayout&gt; 1.当alignItems的参数为stretch时,即app:alignItems=”stretch”: 2.当alignItems的参数为flex_start时,即app:alignItems=”flex_start”: 3.当alignItems的参数为flex_end时,即app:alignItems=”flex_end”: 4.当alignItems的参数为center时,即app:alignItems=”center”: 5.当alignItems的参数为baseline时,即app:alignItems=”baseline”: 5.alignContent属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用，其属性如下： flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍. （默认值）：轴线占满整个交叉轴。 实例代码如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;com.google.android.flexbox.FlexboxLayout android:id=&quot;@+id/flexbox_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:flexWrap=&quot;wrap&quot; app:alignContent=&quot;flex_start&quot;&gt; &lt;TextView android:id=&quot;@+id/textview1&quot; android:layout_width=&quot;50dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot; android:text=&quot;textview1&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview2&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot; android:text=&quot;textview2&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview3&quot; android:layout_width=&quot;90dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot; android:text=&quot;textview3&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview4&quot; android:layout_width=&quot;60dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot; android:text=&quot;textview4&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview5&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot; android:text=&quot;textview5&quot;/&gt; &lt;TextView android:id=&quot;@+id/textview6&quot; android:layout_width=&quot;90dp&quot; android:layout_height=&quot;80dp&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot; android:text=&quot;textview6&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt;&lt;/RelativeLayout&gt; 1.当alignContent的参数为stretch时,即app:alignContent=”stretch”: 2.当alignContent的参数为flex_start时,即app:alignContent=”flex_start”: 3.当alignContent的参数为flex_end时,即app:alignContent=”flex_end”: 4.当alignContent的参数为center时,即app:alignContent=”center”: 5.当alignContent的参数为space_around时,即app:alignContent=”space_around”: 6.当alignContent的参数为space_between时,即app:alignContent=”space_between”: 除了这些主要属性之外，还有其他的属性： layout_flexGrow(表示元素的权重属性)12345678910111213141516 &lt;com.google.android.flexbox.FlexboxLayout android:layout_width=&quot;300dp&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;48dp&quot; android:background=&quot;@color/color1&quot; app:layout_flexGrow=&quot;2&quot;/&gt; &lt;TextView android:layout_width=&quot;0dp&quot; android:layout_height=&quot;48dp&quot; android:background=&quot;@color/color2&quot; app:layout_flexGrow=&quot;1&quot;/&gt;&lt;/com.google.android.flexbox.FlexboxLayout&gt; 2.layout_flexShrink(表示空间不足时子控件的缩放比例，0表示不缩放)123456789101112131415161718 &lt;com.google.android.flexbox.FlexboxLayout android:layout_width=&quot;300dp&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextViewid=&quot;@+id/text1&quot; android:layout_width=&quot;400dp&quot; android:layout_height=&quot;48dp&quot; app:layout_flexShrink=&quot;2&quot; android:background=&quot;@color/color1&quot;/&gt; &lt;TextViewid=&quot;@+id/text2&quot; app:layout_flexShrink=&quot;1&quot; android:layout_width=&quot;300dp&quot; android:layout_height=&quot;48dp&quot; android:background=&quot;@color/color2&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt; 总的300dp因为宽度不足，所以text1就缩小原来的三分之二，text2缩小为原来的三分之一。 3.layout_order(可以控制排列的顺序，负值在前，正值灾后，按照从小到大的顺序依次排列)123456789101112131415161718192021&lt;com.google.android.flexbox.FlexboxLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot;&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;48dp&quot; app:layout_order=&quot;2&quot; android:text=&quot;color1&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot;/&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;48dp&quot; app:layout_order=&quot;1&quot; android:text=&quot;color2&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color2&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt; 4.layout_flexBasisPercent(属性定义了在分配多余空间之前，子元素占据的main size主轴空间，浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即子元素的本来大小。)12345678910111213141516171819202122&lt;com.google.android.flexbox.FlexboxLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:flexWrap=&quot;wrap&quot;&gt; &lt;TextView android:id=&quot;@+id/flexbox&quot; android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:text=&quot;text1&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot;/&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:text=&quot;text2&quot; android:gravity=&quot;center&quot; app:layout_flexBasisPercent=&quot;50%&quot; android:background=&quot;@color/color2&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt; 5.layout_alignSelf(属性允许单个子元素有与其他子元素不一样的对齐方式，可覆盖 alignItems 属性。默认值为auto，表示继承父元素的 alignItems 属性，如果没有父元素，则等同于stretch。) auto (default) flex_start flex_end center baseline stretch 12345678910111213141516171819202122232425262728&lt;com.google.android.flexbox.FlexboxLayout android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; app:alignItems=&quot;flex_start&quot;&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:text=&quot;text1&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color1&quot;/&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:text=&quot;text2&quot; android:gravity=&quot;center&quot; app:layout_alignSelf=&quot;center&quot; android:background=&quot;@color/color2&quot;/&gt; &lt;TextView android:layout_width=&quot;100dp&quot; android:layout_height=&quot;100dp&quot; android:text=&quot;text2&quot; android:gravity=&quot;center&quot; android:background=&quot;@color/color3&quot;/&gt; &lt;/com.google.android.flexbox.FlexboxLayout&gt; 最后就是FlexboxLayoutManager，这也是最新FlexBoxLayout新出的功能，以前我们用流式布局的时候大部分不自己实现的话都是用第三方的库实现，现在有了这个就可以轻松的实现流式布局，并FlexboxLayoutManager就像LinearLayoutManager等那样可以用RecyclerView加载，即可以不用一次全部加载又可以轻松加载多条数据。使用FlexboxLayoutManager很简单，跟一般的布局控制器没有区别，实例代码如下:1234567RecyclerView recycler_view=......FlexboxLayoutManager flexboxLayoutManager=new FlexboxLayoutManager(this);flexboxLayoutManager.setFlexWrap(FlexWrap.WRAP);recycler_view.setLayoutManager(flexboxLayoutManager);mainAdapter=new MainAdapter(this);recycler_view.setAdapter(mainAdapter); 我们通过FlexboxLayoutManager就可以设置FlexBoxLayout的各种属性，而上面的MainAdapter就是和普通的Adapter没区别。","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/tags/Android/"}]},{"title":"高仿网易严选底部弹出菜单","slug":"高仿网易严选底部弹出菜单","date":"2017-06-24T14:42:00.000Z","updated":"2017-06-24T14:46:24.267Z","comments":true,"path":"2017/06/24/高仿网易严选底部弹出菜单/","link":"","permalink":"http://jack921.win/2017/06/24/高仿网易严选底部弹出菜单/","excerpt":"","text":"在网易严选的看东西的时候在商品详情页里看到他的底部弹出菜单，本能反应是想用DottomSheetDialog或者PopupWindow来实现，可是发现实现不了他那种效果，于是就自己模仿一个像严选这样的底部弹出菜单。 不管是DottomSheetDialog或者PopupWindow他们的阴影背景都是全部覆盖的，这就造成除了菜单内容的View之外其他都是阴影的，而严选不是这样的。唠叨到此，首先展示效果图如下： 是不是还可以呢，由于代码量不多却注释详细，所以先贴出代码再一一详说: BottomPopupWindowView类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191 public class BottomPopupWindowView extends LinearLayout&#123; private AnimatorListener animatorListener; //底部内容的View private FrameLayout base_view; //内容的View private FrameLayout content_view; //背景的View private RelativeLayout popup_bg; //xml加载的View private View bottomPopouView; //外部加载的内容View private View contentView; //外部加载的底部内容View private View baseView; //手势的最小值 private float minVelocity=0; //加载一次的判断值 private boolean mDrawable=true; public void setAnimatorListener(AnimatorListener animatorListener) &#123; this.animatorListener = animatorListener; &#125; public void setBaseView(View baseView)&#123; this.baseView=baseView; &#125; public void setContextView(View view)&#123; this.contentView=view; &#125; public void setContentView(int id)&#123; this.contentView=LayoutInflater.from(getContext()).inflate(id,null); &#125; public BottomPopupWindowView(Context context) &#123; this(context,null); &#125; public BottomPopupWindowView(Context context, @Nullable AttributeSet attrs) &#123; this(context,attrs,0); &#125; public BottomPopupWindowView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); //初始化各种数值 minVelocity=ViewConfiguration.get(getContext()).getScaledTouchSlop(); bottomPopouView= LayoutInflater.from(getContext()).inflate(R.layout.layout_bottom_popup,null); base_view=(FrameLayout)bottomPopouView.findViewById(R.id.bottom_view); content_view=(FrameLayout)bottomPopouView.findViewById(R.id.content_view); popup_bg=(RelativeLayout)bottomPopouView.findViewById(R.id.popup_bg); //把整个View都加载在LinearLayout里以显示出来 addView(bottomPopouView); //背景颜色监听 popup_bg.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View v) &#123; disMissPopupView(); &#125; &#125;); //屏蔽内容区域点击事件 content_view.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View view)&#123;&#125; &#125;); //屏蔽底部内容区域点击事件 base_view.setOnClickListener(new OnClickListener() &#123; @Override public void onClick(View view)&#123;&#125; &#125;); //内容区域判断是否向下，手势向下就关闭弹框 content_view.setOnTouchListener(new OnTouchListener() &#123; @Override public boolean onTouch(View view, MotionEvent motionEvent) &#123; float y1=0,y2=0; if(motionEvent.getAction() == MotionEvent.ACTION_DOWN) &#123; y1 = motionEvent.getY(); &#125; if(motionEvent.getAction() == MotionEvent.ACTION_UP)&#123; y2 = motionEvent.getY(); if((y2-y1)&gt;minVelocity)&#123; disMissPopupView(); &#125; &#125; return false; &#125; &#125;); &#125; @Override protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); if(mDrawable&amp;&amp;baseView!=null)&#123; //刚开始加载底部内容区域，只需一次就行，多次报错 base_view.addView(baseView); mDrawable=false; &#125; &#125; public void showPopouView()&#123; if(contentView!=null)&#123; //开始动画数据 startAnimation(); //开启背景颜色的渐变动画 popup_bg.setVisibility(View.VISIBLE); popup_bg.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bp_bottom_bg_in)); //把这个区域全部显示出来 ((BottomPopupWindowView)this).setLayoutParams(new RelativeLayout.LayoutParams( RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT)); //假如内容区域 content_view.addView(contentView,0); content_view.setVisibility(View.VISIBLE); //开启内容区域动画 content_view.setAnimation(AnimationUtils.loadAnimation(getContext(),R.anim.bp_bottom_view_in)); &#125; &#125; public void disMissPopupView()&#123; //开始关闭动画数据 endAnimation(); //开启内容区域动画 content_view.setVisibility(View.GONE); Animation animation=AnimationUtils.loadAnimation(getContext(),R.anim.bp_bottom_view_out); animation.setAnimationListener(new Animation.AnimationListener() &#123; @Override public void onAnimationStart(Animation animation) &#123;&#125; @Override public void onAnimationRepeat(Animation animation) &#123;&#125; @Override public void onAnimationEnd(Animation animation) &#123; //等内容区域动画结束后，清楚所有View content_view.removeAllViews(); //开启背景颜色的渐变动画 popup_bg.setVisibility(View.GONE); popup_bg.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bp_bottom_bg_out)); //把整个控件的大小恢复到底部View区域的大小 RelativeLayout.LayoutParams layoutParams=new RelativeLayout.LayoutParams( RelativeLayout.LayoutParams.MATCH_PARENT,getViewHeight((BottomPopupWindowView)BottomPopupWindowView.this)); layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,-1); ((BottomPopupWindowView)BottomPopupWindowView.this).setLayoutParams(layoutParams); &#125; &#125;); //开始动画 content_view.setAnimation(animation); &#125; //获取View的高度 public int getViewHeight(View view)&#123; int width =View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED); int height =View.MeasureSpec.makeMeasureSpec(0,View.MeasureSpec.UNSPECIFIED); view.measure(width,height); return view.getMeasuredHeight(); &#125; //开始动画数据变化 public void startAnimation()&#123; ValueAnimator valueAnimator = ValueAnimator.ofInt(0,40); valueAnimator.setDuration(250); valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator valueAnimator) &#123; if(animatorListener!=null)&#123; animatorListener.startValue((int) valueAnimator.getAnimatedValue()); &#125; &#125; &#125;); valueAnimator.start(); &#125; //结束动画数值变化 public void endAnimation() &#123; ValueAnimator valueAnimator = ValueAnimator.ofInt(40,0); valueAnimator.setDuration(250); valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator valueAnimator) &#123; if(animatorListener!=null)&#123; animatorListener.endValue((int) valueAnimator.getAnimatedValue()); &#125; &#125; &#125;); valueAnimator.start(); &#125;&#125; 对应的加载的xml布局是：layout_bottom_popou.xml如下：1234567891011121314151617181920212223242526272829&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:orientation=&quot;vertical&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:background=&quot;#707A7A7A&quot;&gt; &lt;RelativeLayout android:id=&quot;@+id/popup_bg&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#707A7A7A&quot; android:layout_above=&quot;@+id/bottom_view&quot;&gt;&lt;/RelativeLayout&gt; &lt;FrameLayout android:id=&quot;@+id/content_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_above=&quot;@+id/bottom_view&quot; android:orientation=&quot;horizontal&quot;&gt; &lt;/FrameLayout&gt; &lt;FrameLayout android:id=&quot;@+id/bottom_view&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentBottom=&quot;true&quot;&gt;&lt;/FrameLayout&gt;&lt;/RelativeLayout&gt; 1.在BottomPopupWindowView是继承LinearLayout，而layout_bottom_popou.xml是这整个BottomPopupWindowView里的骨架，然后在BottomPopupWindowView初始化的时候通过addView()来加载整个骨架布局。在onDraw()里只需加载一次baseView就可以了，不然后重复加载导致报错。这样就初始化成功了，刚开始只会加载baseView的界面，就相当于严选最下面的购物车立即购买等界面。 2.当调用showPopouView()时显示菜单的。startAnimation()方法只是为了产生动画的数据。1234popup_bg.setVisibility(View.VISIBLE);popup_bg.setAnimation(AnimationUtils.loadAnimation(getContext(), R.anim.bp_bottom_bg_in)); ```只是为了开启背景渐变的动画没什么说的。最重要的是显示菜单实现是把BottomPopupWindowView的大小扩展到全屏，所以设置```((BottomPopupWindowView)this).setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT)); ```,然后把弹出菜单的View即contentView装进content_view即可，然后开启弹出动画就实现了。3.最后是disMissPopupView()方法关闭弹窗。endAnimation()方法只是为了产生动画的数据。再启动内容域View即content_View的退出动画，在动画结束后用```content_view.removeAllViews(); 起初菜单内容，再像上面一样开启背景颜色渐变动画，最后只需使BottomPopupWindowView恢复原来的baseView的大小及可以了，具体如下:layoutParams=new RelativeLayout.LayoutParams(123456 RelativeLayout.LayoutParams.MATCH_PARENT,getViewHeight((BottomPopupWindowView)BottomPopupWindowView.this)); layoutParams.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM,-1); ((BottomPopupWindowView)BottomPopupWindowView.this).setLayoutParams(layoutParams); ```。这就是核心的代码功能了，代码量不多具体细节看上面的源码。有人或许会问返回动画的数据有什么用，很简单就是为了实现严选菜单框出来时整个上面详情的缩放。具体看如下demo,首先给出界面xml,如下: &lt;?xml version=”1.0” encoding=”utf-8”?&gt; &lt;View android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;0.1dp&quot; android:background=&quot;@color/colorPrimary&quot;&gt;&lt;/View&gt; &lt;/LinearLayout&gt; &lt;com.jack.bottompopupwindowview.BottomPopupWindowView android:id=&quot;@+id/bottom_popup&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;50dp&quot; android:background=&quot;@android:color/transparent&quot; android:layout_alignParentBottom=&quot;true&quot;&gt; &lt;/com.jack.bottompopupwindowview.BottomPopupWindowView&gt; 1这就是上面效果图的界面布局，没什么可以说的，再看事例代码如下： public class MainActivity extends AppCompatActivity implements View.OnClickListener, AnimatorListener { private BottomPopupWindowView bottomPopupWindowView; private View contentView; private View bottomView; private LinearLayout mainView; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); mainView=(LinearLayout)findViewById(R.id.main_view); bottomView=LayoutInflater.from(this).inflate(R.layout.layout_bottom_view,null); (bottomView.findViewById(R.id.promptly_buy)).setOnClickListener(this); (findViewById(R.id.guige)).setOnClickListener(this); bottomPopupWindowView=(BottomPopupWindowView)findViewById(R.id.bottom_popup); bottomPopupWindowView.setOnClickListener(this); bottomPopupWindowView.setBaseView(bottomView); contentView=LayoutInflater.from(this).inflate(R.layout.layout_content_view,null); bottomPopupWindowView.setContextView(contentView); (contentView.findViewById(R.id.ic_cancel)).setOnClickListener(this); bottomPopupWindowView.setAnimatorListener(this); } @Override public void onClick(View view) { switch(view.getId()){ case R.id.promptly_buy: case R.id.ic_cancel: bottomPopupWindowView.disMissPopupView(); break; case R.id.guige: bottomPopupWindowView.showPopouView(); break; } } @Override public void startValue(int value) { setMargins (mainView,value-10,value,value-10,value); } @Override public void endValue(int value) { setMargins (mainView,value,value,value,value); } public static void setMargins (View v, int l, int t, int r, int b) { if (v.getLayoutParams() instanceof ViewGroup.MarginLayoutParams) { ViewGroup.MarginLayoutParams p = (ViewGroup.MarginLayoutParams) v.getLayoutParams(); p.setMargins(l, t, r, b); v.requestLayout(); } } }12其中设置内容菜单的View```BottomPopupWindowView.setContextView(bottomView); 设置没有显示菜单时候显示的View(注:bottomView的高度要和BottomPopupWindowView的高度一样，具体看demo)BottomPopupWindowView.setBaseView(bottomView);而回调的 public void startValue(int value)和public void endValue(int value)设置动画监听放回的数据，以便根据数据实现动画，严选的弹出和显示商品详情动画很简单就是不断设设置View的间距就可以了。 最后附上demo和源码链接https://github.com/jack921/BottomPopupWindowDemo","categories":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/categories/Android自定义控件/"}],"tags":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/tags/Android自定义控件/"}]},{"title":"淘宝开源库VLayout实践","slug":"淘宝开源库VLayout实践","date":"2017-05-23T14:05:46.000Z","updated":"2017-05-23T14:08:40.241Z","comments":true,"path":"2017/05/23/淘宝开源库VLayout实践/","link":"","permalink":"http://jack921.win/2017/05/23/淘宝开源库VLayout实践/","excerpt":"","text":"最近淘宝出了vlayout,刚开始看淘宝的文档的时候还是有点懵，后来自己也总结规划了一下，写了一个比较好看的demo，顺便在这里总结一下。 VLayout是什么，说白了就是用一个原生RecycelerView加上VLayout来实现在一个页面上比较复杂的布局并且有一个比较好的复用，在RecyclerView里同时有GridLayout布局，瀑布流布局，浮动布局等VLayout提供的九大布局，这也是淘宝客户端首页加载不同布局的方法。 好了，简单介绍到这里，首先我们先导入VLayout: 123compile (&apos;com.alibaba.android:vlayout:版本@aar&apos;) &#123; transitive = true&#125; 具体的版本请看github里VLayout给出的版本号。现在最新是1.0.6接着我们就可以开始引用VLayout了,VLayout的通用代码如下:123VirtualLayoutManager manager = new VirtualLayoutManager(this);recyclerview.setLayoutManager(manager);DelegateAdapter adapter =new DelegateAdapter(manager, true); 其中VirtualLayoutManager它继承自LinearLayoutManager；引入了 LayoutHelper 的概念，它负责具体的布局逻辑；VirtualLayoutManager管理了一系列LayoutHelper，将具体的布局能力交给LayoutHelper来完成。 DelegateAdapter是VLayout专门为LayoutHelper定制的Adapter，我们把装载有各种布局的LayoutHelper的Adapter放进DelegateAdapter里最后在RecyclerView.setAdapter(DelegateAdapter);就可以加载出复杂的布局。 或许你们会问什么是LayoutHelper，这个问题问得好，就是VLayout提供的九种默认通用布局，解耦所有的View和布局之间的关系: Linear, Grid, 吸顶, 浮动, 固定位置等具体,名称和功能如下: LinearLayoutHelper: 线性布局 GridLayoutHelper: Grid布局， 支持横向的colspan StaggeredGridLayoutHelper: 瀑布流布局，可配置间隔高度/宽度 FixLayoutHelper: 固定布局，始终在屏幕固定位置显示 ScrollFixLayoutHelper: 固定布局，但之后当页面滑动到该图片区域才显示, 可以用来做返回顶部或其他书签等 FloatLayoutHelper: 浮动布局，可以固定显示在屏幕上，但用户可以拖拽其位置 ColumnLayoutHelper: 栏格布局，都布局在一排，可以配置不同列之间的宽度比值 SingleLayoutHelper: 通栏布局，只会显示一个组件View OnePlusNLayoutHelper: 一拖N布局，可以配置1-5个子元素 StickyLayoutHelper: stikcy布局， 可以配置吸顶或者吸底 这就是九种布局对应的类，我们可以用着九个类实现各种复杂的布局，下面我会一一介绍每个布局和效果，以便更直观的看到效果: LinearLayoutHelper: 线性布局，就是实现ListView的效果很简单，直接看代码: 1234567891011121314151617181920212223242526272829public class LinearLayoutHelperActivity extends Activity&#123; public static RecyclerView recyclerview; public static DelegateRecyclerAdapter delegateRecyclerAdapter; public DelegateAdapter adapter; @Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.layout_main); recyclerview=(RecyclerView)findViewById(R.id.recyclerview); VirtualLayoutManager manager = new VirtualLayoutManager(this); recyclerview.setLayoutManager(manager); adapter =new DelegateAdapter(manager, true); adapter.addAdapter(init(this)); recyclerview.setAdapter(adapter); &#125; public static DelegateRecyclerAdapter init(Context context)&#123; LinearLayoutHelper linearLayoutHelper=new LinearLayoutHelper(); //设置间隔高度 linearLayoutHelper.setDividerHeight(5); //设置布局底部与下个布局的间隔 linearLayoutHelper.setMarginBottom(20); //设置间距 linearLayoutHelper.setMargin(20,20,20,20); delegateRecyclerAdapter=new DelegateRecyclerAdapter(context,linearLayoutHelper,&quot;LinearLayoutHelper&quot;); return delegateRecyclerAdapter; &#125;&#125; 而DelegateRecyclerAdapter的代码如下: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class DelegateRecyclerAdapter extends DelegateAdapter.Adapter&#123; public Context context; private LayoutHelper helper; private LayoutInflater inflater; private String name; public DelegateRecyclerAdapter(Context context,LayoutHelper helper,String name)&#123; this.inflater = LayoutInflater.from(context); this.helper = helper; this.context=context; this.name=name; &#125; @Override public LayoutHelper onCreateLayoutHelper() &#123; return this.helper; &#125; @Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123; return new MyViewHolder(inflater.inflate(R.layout.layout_item,parent,false)); &#125; @Override public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) &#123; if(position%2==0)&#123; holder.itemView.setBackgroundColor(0xaa3F51B5); &#125;else&#123; holder.itemView.setBackgroundColor(0xccFF4081); &#125; MyViewHolder myViewHolder=(MyViewHolder)holder; myViewHolder.name.setText(name+position+&quot;&quot;); &#125; @Override public int getItemCount() &#123; return 9; &#125; public class MyViewHolder extends RecyclerView.ViewHolder&#123; public TextView name; public MyViewHolder(View itemView) &#123; super(itemView); name=(TextView)itemView.findViewById(R.id.item_name); &#125; &#125;&#125; 这里需要说的就是在Adapter类里我们需要继承Vlayout的DelegateAdapter.Adapter类，然后多回调onCreateLayoutHelper()方法，返回我们传进去的LayoutHelper类，其他的和普通的RecyclerView是一个样的。DelegateRecyclerAdapter在我们后面也有多次引用。其他要说的就是我们初始完LinearLayoutHelper后生产DelegateAdapter.Adapter类再赋给DelegateAdapter，然后然后RecyclerView在setAdapter()就这样。 GridLayoutHelper: Grid布局， 支持横向的colspan，也很简单，代码如下: 123456789101112131415161718public static DelegateRecyclerAdapter init(Context context)&#123; GridLayoutHelper gridLayoutHelper=new GridLayoutHelper(4); //自定义设置某些位置的Item的占格数 gridLayoutHelper.setSpanSizeLookup(new GridLayoutHelper.SpanSizeLookup() &#123; @Override public int getSpanSize(int position) &#123; if (position &gt;5) &#123; return 2; &#125;else &#123; return 1; &#125; &#125; &#125;); //是否填满可用区域 gridLayoutHelper.setAutoExpand(false); delegateRecyclerAdapter=new DelegateRecyclerAdapter(context,gridLayoutHelper,&quot;GridLayoutHelper&quot;); return delegateRecyclerAdapter; &#125; 其他代码很上面的一样。 StaggeredGridLayoutHelper: 瀑布流布局，可配置间隔高度/宽度,代码如下: 12345public static StaggeredAdapter init(Context context)&#123; StaggeredGridLayoutHelper staggeredGridLayoutHelper=new StaggeredGridLayoutHelper(3,20); staggeredAdapter=new StaggeredAdapter(context,staggeredGridLayoutHelper,&quot;StaggeredGridLayoutHelper&quot;); return staggeredAdapter;&#125; 在StaggeredAdapter里我们在onBindViewHolder里用123ViewGroup.LayoutParams layoutParams = ((MyViewholder) holder).text.getLayoutParams();layoutParams.height = 260 + position % 7 * 20;((MyViewholder) holder).text.setLayoutParams(layoutParams); 来实现高度不一致，效果如下: FixLayoutHelper: 固定布局，始终在屏幕固定位置显示,代码如下： 12345public static FixLayoutAdapter initFixLayoutHelper(Context context)&#123; FixLayoutHelper fixLayoutHelper=new FixLayoutHelper(FixLayoutHelper.BOTTOM_LEFT, 200, 200); FixLayoutAdapter fixLayoutAdapter=new FixLayoutAdapter(context,fixLayoutHelper,&quot;fixlayouthelp&quot;); return fixLayoutAdapter;&#125; 除了有FixLayoutHelper.BOTTOM_LEFT之外，还有FixLayoutHelper.TOP_LEFT，FixLayoutHelper.BOTTOM_RIGHT，FixLayoutHelper.TOP_RIGHT, 200,200分别对应偏移量x,y，效果如下:fixlayouthelp区域块就是FixLayoutHelper了。 ScrollFixLayoutHelper: 固定布局，但之后当页面滑动到该图片区域才显示, 可以用来做返回顶部或其他书签等，代码如下: 12345678public static FixLayoutAdapter initScrollFixLayout(Context context)&#123; ScrollFixLayoutHelper scrollFixLayoutHelper = new ScrollFixLayoutHelper(15,15); //show_always:总是显示 //show_on_enter:当页面滚动到这个视图的位置的时候，才显示 //show_on_leave:当页面滚出这个视图的位置的时候显示 scrollFixLayoutHelper.setShowType(ScrollFixLayoutHelper.SHOW_ON_ENTER); return new FixLayoutAdapter(context, scrollFixLayoutHelper,&quot;scrollfixlayouthelper&quot;);&#125; 代码很简单，看效果：ScrollFixLayoutHelper继承自FixLayoutHelper，不同的是showType来决定这个布局的Item是否显示，可以用来做一些返回顶部之类的按钮， SHOW_ALWAYS：与FixLayoutHelper的行为一致，固定在某个位置； SHOW_ON_ENTER：默认不显示视图，当页面滚动到这个视图的位置的时候，才显示； SHOW_ON_LEAVE：默认不显示视图，当页面滚出这个视图的位置的时候显示； 这里效果不明显，等集合所有布局之后大家就可以看很直观的效果 FloatLayoutHelper: 浮动布局，可以固定显示在屏幕上，但用户可以拖拽其位置，代码如下： 123456public static FixLayoutAdapter initFloatLayoutHelper(Context context)&#123; FloatLayoutHelper floatLayoutHelper=new FloatLayoutHelper(); floatLayoutHelper.setDefaultLocation(20,250); FixLayoutAdapter fixLayoutAdapter=new FixLayoutAdapter(context,floatLayoutHelper,&quot;floatlayouthelper&quot;); return fixLayoutAdapter;&#125; 效果如下： 其中setDefaultLocation()使用来设置他的初始位置的，setAlignType（表示吸边时的基准位置，默认左上角，有四个取值，分别是TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT） ColumnLayoutHelper: 栏格布局，都布局在一排，可以配置不同列之间的宽度比值，代码如下: 1234567 public static ColumnLayoutAdapter initColumnLayout(Context context)&#123; ColumnLayoutHelper columnLayoutHelper=new ColumnLayoutHelper(); columnLayoutHelper.setWeights(new float[]&#123;20,20,20,20,20&#125;); columnLayoutHelper.setMarginBottom(20); ColumnLayoutAdapter columnLayoutAdapter=new ColumnLayoutAdapter(context,columnLayoutHelper,&quot;ColumnLayoutHelper&quot;); return columnLayoutAdapter;&#125; ColumnLayoutHelper需要设置Weights，是一个float数组，总和为100，否则超出布局。效果图如下： SingleLayoutHelper: 通栏布局，只会显示一个组件View，这里建议设置Adapter个数为1，因为他就只会显示一栏，假如有多个可能会出现一些问题，本人实测个数多时会出点问题。代码如下： 1234567public static SingleLayoutAdapter initSingleLayout(Context context)&#123; SingleLayoutHelper singleLayoutHelper=new SingleLayoutHelper(); //设置间距 singleLayoutHelper.setMargin(20,20,20,20); SingleLayoutAdapter singleLayoutAdapter=new SingleLayoutAdapter(context,singleLayoutHelper,&quot;SingleLayoutHelper&quot;); return singleLayoutAdapter;&#125; 效果图如下: OnePlusNLayoutHelper: 一拖N布局，可以配置1-5个子元素,根据个数的不同所呈现的界面也是不一样的,不同个数效果如下： //个数为1 //个数为2 //个数为3 //个数为4 //个数为5 代码如下： 1234567 public static OnePlusNLayoutAdapter initOnePlusNLayout(Context context)&#123; OnePlusNLayoutHelper onePlusNLayoutHelper=new OnePlusNLayoutHelper(); //设置布局底部与下个布局的间隔 onePlusNLayoutHelper.setMarginBottom(20); OnePlusNLayoutAdapter onePlusNLayoutAdapter=new OnePlusNLayoutAdapter(context,onePlusNLayoutHelper,&quot;OnePlusNLayoutHelper&quot;); return onePlusNLayoutAdapter;&#125; StickyLayoutHelper: stikcy布局， 可以配置吸顶或者吸底，代码如下: 1234public static StickyLayoutAdapter initStickyLayoutHelper(Context context)&#123; StickyLayoutHelper stickyLayoutHelper=new StickyLayoutHelper(); return new StickyLayoutAdapter(context,stickyLayoutHelper);&#125; 效果图如下： 最后假如只是单单加载其中的一个布局其实意义不大，VLayout只最大的意义在于加载多个布局并且保持一个很好的复用，所以我们把上面的所有布局一起加载起来，代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940public class AllActivity extends Activity&#123; private RecyclerView recyclerview; private DelegateAdapter delegateAdapter ; final List&lt;DelegateAdapter.Adapter&gt; adapters = new LinkedList&lt;&gt;(); @Override protected void onCreate(@Nullable Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.layout_main); recyclerview=(RecyclerView)findViewById(R.id.recyclerview); initView(); &#125; public void initView()&#123; RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool(); recyclerview.setRecycledViewPool(viewPool); viewPool.setMaxRecycledViews(0,10); adapters.add(LinearLayoutHelperActivity.init(this)); adapters.add(ColumnLayoutHelperActivity.initColumnLayout(this)); adapters.add(GridLayoutHelperActivity.init(this)); adapters.add(FixLayoutHelperActivity.initFixLayoutHelper(this)); adapters.add(ScrollFixLayoutHelperActivity.initScrollFixLayout(this)); adapters.add(SingleLayoutHelperActivity.initSingleLayout(this)); adapters.add(OnePlusNLayoutHelperActivity.initOnePlusNLayout(this)); adapters.add(FloatLayoutHelperActivity.initFloatLayoutHelper(this)); adapters.add(StickyLayoutHelperActivity.initStickyLayoutHelper(this)); adapters.add(StaggeredGridLayoutHelperActivity.init(this)); VirtualLayoutManager manager = new VirtualLayoutManager(this); recyclerview.setLayoutManager(manager); delegateAdapter = new DelegateAdapter(manager); delegateAdapter.setAdapters(adapters); recyclerview.setAdapter(delegateAdapter); &#125;&#125; 要注意的是DelegateAdapter delegateAdapter = new DelegateAdapter(layoutManager, hasConsistItemType);里当hasConsistItemType=true的时候，不论是不是属于同一个子adapter，相同类型的item都能复用。表示它们共享一个类型。 当hasConsistItemType=false的时候，不同子adapter之间的类型不共享。 效果如下图： 最后源码demo,代码都在这https://github.com/jack921/ProjectVLayout","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://jack921.win/tags/android/"}]},{"title":"高仿京东金融的数值滚动尺","slug":"高仿京东金融的数值滚动尺","date":"2017-05-16T16:21:13.000Z","updated":"2017-05-16T16:22:40.135Z","comments":true,"path":"2017/05/17/高仿京东金融的数值滚动尺/","link":"","permalink":"http://jack921.win/2017/05/17/高仿京东金融的数值滚动尺/","excerpt":"","text":"以前博客讲的大部分都是静态的自定义View的编写,其实无非就是“画画”画出一个好看的效果,而这篇博客写的是写一个动态的自定义控价,这里不仅需要”画”,还要各种事件和计算,废话不说现在就讲讲自定义数值滚动尺,这个用的还是满广的，例如京东金融的通过滚动尺选择金额等,而这次就是高仿京东金融的数值滚动尺。首先看看下效果图，如下 首先先给你们各个变量的含义，以免在后面的讲解中不知变量的意思，代码如下: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889//最小值private int minValue;//最大值private int maxValue;//当前值private int currentValue;//最小单位值private int minUnitValue;//最小当前值private int minCurrentValue;//字体大小private int textSize;//字体颜色private int textColor;//线颜色private int dividerColor;//指示线颜色private int indicatrixColor;//画线的画笔private Paint linePaint;//控价的宽度private int slideRulerWidth=0;//滑动的宽度private int rollingWidth;//屏幕的宽private int wrapcontentWidth;//屏幕的高private int wrapcontentHeight;//一屏显示Itemprivate int showItemSize;//刻度和数值的间距private int marginCursorData;//长刻度的大小private int longCursor;//短刻度的大小private int shortCursor;//计算每个刻度的间距private int marginWidth=0;//数据回调接口private SlideRulerDataInterface slideRulerDataInterface;//正在滑动状态private int isScrollingState=1;//快速一滑private int fastScrollState=2;//结束滑动private int finishScrollState=3;private GestureDetector mDetector;private Display display =null;private Scroller scroller;public SlideRuler(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context,attrs,defStyleAttr); display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay(); //屏幕宽高 wrapcontentWidth=display.getWidth(); wrapcontentHeight=display.getHeight(); //初始化自定义的参数 TypedArray typedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.slideruler,defStyleAttr,0); textSize = typedArray.getDimensionPixelSize(R.styleable.slideruler_textSize,(int) TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics())); textColor=typedArray.getColor(R.styleable.slideruler_textColor,Color.DKGRAY); dividerColor=typedArray.getColor(R.styleable.slideruler_dividerColor,Color.BLACK); indicatrixColor=typedArray.getColor(R.styleable.slideruler_indicatrixColor,Color.BLACK); minValue=typedArray.getInteger(R.styleable.slideruler_min_value,0); maxValue=typedArray.getInteger(R.styleable.slideruler_max_value,199000); currentValue=typedArray.getInteger(R.styleable.slideruler_current_value,10000); minUnitValue=typedArray.getInteger(R.styleable.slideruler_min_unitValue,1000); minCurrentValue=typedArray.getInteger(R.styleable.slideruler_min_currentValue,1000); showItemSize=typedArray.getInteger(R.styleable.slideruler_show_itemSize,30); marginCursorData=typedArray.getDimensionPixelSize(R.styleable.slideruler_margin_cursor_data,(int)TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP,10,getResources().getDisplayMetrics())); longCursor=typedArray.getDimensionPixelSize(R.styleable.slideruler_longCursor,(int)TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP,25,getResources().getDisplayMetrics())); shortCursor=typedArray.getDimensionPixelSize(R.styleable.slideruler_shortCursor,(int)TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics())); scroller=new Scroller(context); mDetector=new GestureDetector(context,myGestureListener); //初始化Paint linePaint=new Paint(); linePaint.setAntiAlias(true); linePaint.setTextAlign(Paint.Align.CENTER); linePaint.setStyle(Paint.Style.STROKE); linePaint.setTextSize(textSize); //检查当前值是不是正确值 checkCurrentValue(); &#125; 其次自定义View也好自定义控价也好1protected void onMeasure(int widthMeasureSpec, int heigh) 也是蛮重要的所以照例也讲讲，用来确定控件的大小，代码如下: 123456789101112131415161718192021@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; super.onMeasure(widthMeasureSpec, heightMeasureSpec); int widthModel=MeasureSpec.getMode(widthMeasureSpec); int heightModel=MeasureSpec.getMode(heightMeasureSpec); int widthSize=MeasureSpec.getSize(widthMeasureSpec); int heightSize=MeasureSpec.getSize(heightMeasureSpec); int width; int height; if(widthModel==MeasureSpec.EXACTLY)&#123; width=widthSize; &#125;else&#123; width=wrapcontentWidth; &#125; if(heightModel==MeasureSpec.EXACTLY)&#123; height=heightSize; &#125;else&#123; height=(getPaddingBottom()+getPaddingTop()+(wrapcontentHeight/4)); &#125; setMeasuredDimension(width,height); &#125; 代码的意思也很简单，当MeasureSpec里的specMode类型是EXACTLY时，即设置了明确的值或者是MATCH_PARENT时，就直接把MeasureSpec.getSize()的值赋进去，如果不是即为WARP_CONTENT时，就直接赋给屏幕的宽高。控件的宽高都是同一样的做法。 当控件大小确定之后，我们再利用1protected void onSizeChanged(int w, int h, int oldw, int oldh) 进行一些变量的赋值，代码如下: 12345678910@Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; //计算每个刻度的间距 marginWidth=getWidth()/showItemSize; //开始时的距离 rollingWidth=(int)(marginWidth*cursorNum()); //整个控件的宽度 slideRulerWidth=(maxValue/minUnitValue)*marginWidth; super.onSizeChanged(w, h, oldw, oldh); &#125; 到此我们就可以在onDraw(Canvas canvas)方法里画出初始的界面，而以后的动态只是通过不断的改变数值再进行绘画而已，代码如下: 12345678910111213141516171819202122232425262728293031323334353637383940@Overrideprotected void onDraw(Canvas canvas)&#123; //画最基础的两条线 drawBaseView(canvas); //画初始的界面 drawBaseLine(canvas);&#125; //画最基础的两条线public void drawBaseLine(Canvas canvas)&#123; //画中间的线 linePaint.setColor(indicatrixColor); canvas.drawLine(getWidth()/2,0,getWidth()/2,getHeight(),linePaint); //画底部的直线 linePaint.setColor(dividerColor); canvas.drawLine(0,getHeight(),slideRulerWidth,getHeight(),linePaint);&#125;//画初始的界面public void drawBaseView(Canvas canvas)&#123; //整数刻度的个数 int integerWidth= (int)Math.rint((currentValue-minValue)/minUnitValue); //剩余不整一个刻度的数值 int residueWidth=(currentValue-minValue)%minUnitValue; //开始画图的X轴位置 int startCursor=(getWidth()/2)-(marginWidth*integerWidth)-(int)(marginWidth*(float)residueWidth/minUnitValue); for(int i=0;i&lt;(maxValue/minUnitValue)+1;i++)&#123; float xValue=startCursor+(marginWidth*i); if(i%10==0)&#123; //画长刻度 linePaint.setColor(textColor); canvas.drawText((minCurrentValue*i)+&quot;&quot;,xValue,getHeight()-longCursor-marginCursorData,linePaint); linePaint.setColor(dividerColor); canvas.drawLine(xValue,getHeight(),xValue,getHeight()-longCursor,linePaint); &#125;else&#123; //画短刻度 canvas.drawLine(xValue,getHeight(),xValue,getHeight()-shortCursor,linePaint); &#125; &#125; &#125; 在drawBaseView()方法里，也很简单，就是在二分之一宽度，画一条直线，然后在控价的底部画出宽度为整个控件的宽度的底线。接着在drawBaseView(Canvas canvas)方法里 首先用当前值(currentValue)-最小值(minValue)之后再除于最小单位值(minUnitValue)以获取整数刻度的个数 因为有余数的情况，我们再当前值(currentValue)-最小值(minValue)之后求余与最小单位值(minUnitValue)以获取余数 接着我们要获取我们画图的X轴开始的位置，因为最小值只能滑到中间，所以开始的位置为控件一半的宽度(getWidth()/2)减去计算每个刻度的间距(marginWidth)乘以整数刻度的个数(integerWidth)即```(int)(marginWidth*(float)residueWidth/minUnitValue)```1234. 再通过For循环刻度的个数，不同的进行刻度的绘画，当i%10==0时即为一个大的单位刻度否者为一个小的单位刻度，具体代码我上面已有注释，原理和画中间线一直就不在赘述。 到此我们就已经把自定义控价静态的部分写完了，效果如下：![img.PNG](http://upload-images.jianshu.io/upload_images/925576-4b829e7c35c2befc.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)接着我们用GestureDetector绑定手势事件，根据回调手势事件的方法来改变数据和刷新页面，在GestureDetector里，我们只会回调```public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)```(手指在触摸屏上滑动)和 public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) 12 private GestureDetector.SimpleOnGestureListener myGestureListener =new GestureDetector.SimpleOnGestureListener(){ @Override public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) { //滑动刷新UI updateView(rollingWidth+(int)distanceX,isScrollingState); return true; } @Override public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) { //快速滑动的动画 scroller.fling(rollingWidth,0,(int)(-velocityX/1.5),0,0,(maxValue/minUnitValue)*marginWidth,0,0); return true; } }; //动态更新滑动Viewpublic void updateView(int srcollWidth,int action){ if(action==isScrollingState){ //正在滑动状态(onScroll()) rollingWidth=srcollWidth; float itemNum=(float)srcollWidth/marginWidth; currentValue=(int)(minUnitValueitemNum); }else if(action==fastScrollState){ //快速一滑(onFling()) rollingWidth=srcollWidth; int itemNum=(int)Math.rint((float)rollingWidth/marginWidth); currentValue=(minUnitValueitemNum); }else if(action==finishScrollState){ //结束滑动(ACTION_UP) int itemNum=(int)Math.rint((float)rollingWidth/marginWidth); currentValue=minUnitValueitemNum; } //判断是否在最小选择值 if(currentValue&lt;=minCurrentValue){ rollingWidth=(minCurrentValue/minUnitValue)marginWidth; currentValue=minCurrentValue; } //判断是否在最大值 if(currentValue&gt;=maxValue){ rollingWidth=marginWidth*allCursorNum(); currentValue=maxValue; } //回调数值 if(slideRulerDataInterface!=null){ slideRulerDataInterface.getText(currentValue+””); } invalidate();} 1231.当我们滑动我们的控件是，就会回调GestureDetector里的onScroll()方法，然后```rollingWidth+(int)distanceX```即当前滑动的宽度(rollingWidth)加上滑动产生的宽度(distanceX)为动态产生的宽度，再除于计算每个刻度的间距(marginWidth)从而得到刻度的数量，有了刻度的数量即可得到当前值```currentValue=(int)(minUnitValue*itemNum);```有了当前值调用invalidate();刷新onDraw()即可完成连续滑动时动态绘制。2.当我们快速一划时，就会回调GestureDetector里的onFling()方法，在方法里用 scroller.fling(rollingWidth,0,(int)(-velocityX/1.5),0,0,(maxValue/minUnitValue)*marginWidth,0,0);12345678``` @Override public void computeScroll() &#123; if(scroller.computeScrollOffset())&#123; //快滑刷新UI updateView(scroller.getCurrX(),fastScrollState); &#125; &#125; 的scroller.computeScrollOffset()==true;而scroller.getCurrX()就相当于为动态产生的滑动宽度剩下的也是调用updateView()方法不断的刷新，当scroller.computeScrollOffset()==false就滑动动画结束了。 3.最后当我们滑动结束手指抬起时:1234567891011@Override public boolean onTouchEvent(MotionEvent event) &#123; switch(event.getAction())&#123; case MotionEvent.ACTION_UP: updateView(0,finishScrollState); default: mDetector.onTouchEvent(event); break; &#125; return true; &#125; 我们也要掉updateView(),以保持滑动的最后结构都指在指针上。 最后大家要深入学习的话，请看https://github.com/jack921/SlideRuler","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/tags/Android自定义/"}]},{"title":"教你实现最简单的QQ消息item侧滑菜单","slug":"教你实现最简单的QQ消息item侧滑菜单","date":"2017-04-16T15:22:00.000Z","updated":"2017-04-29T16:40:15.007Z","comments":true,"path":"2017/04/16/教你实现最简单的QQ消息item侧滑菜单/","link":"","permalink":"http://jack921.win/2017/04/16/教你实现最简单的QQ消息item侧滑菜单/","excerpt":"这次跟大家介绍怎么简单的实现类似QQ消息Item的左右滑动菜单的实现。首先见效果图先:","text":"这次跟大家介绍怎么简单的实现类似QQ消息Item的左右滑动菜单的实现。首先见效果图先: 这就实现了ListView或RecyclerView加载的item的View实现侧滑菜单。至于这么实现，很简单就是通过继承HorizontalScrollView，再判断滑动的距离以滑到对应的View或菜单。具体如下:首先，在item的界面布局方面如下:1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;com.example.jack.listviewitemscroll.widget.ScrollListViewItem xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;50dp&quot;&gt; &lt;LinearLayout android:orientation=&quot;horizontal&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;include layout=&quot;@layout/leftbutton&quot;/&gt; &lt;include layout=&quot;@layout/context_view&quot;/&gt; &lt;include layout=&quot;@layout/rightbutton&quot;/&gt; &lt;/LinearLayout&gt;&lt;/com.example.jack.listviewitemscroll.widget.ScrollListViewItem&gt; 就是ScrollListViewItem包裹着LinearLayout里面的三个View,分别是左菜单，内容和右菜单对应的View。最为重点的就是ScrollListViewItem这个类，这就是我们继承HorizontalScrollView类所自定义的控制菜单滑动的类。这个类的源码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899public class ScrollListViewItem extends HorizontalScrollView&#123; private static int ScreenWidth=0; private static int MenuWidth=0; private static int HalfMenuWidth=0; private boolean operateLeft=false; private boolean operateRight=false; private boolean once; ViewGroup left; ViewGroup centre; ViewGroup right; public ScrollListViewItem(Context context) &#123; this(context, null); &#125; public ScrollListViewItem(Context context, AttributeSet attrs) &#123; super(context, attrs,0); &#125; public ScrollListViewItem(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr,0); &#125; @Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; if(!once)&#123; LinearLayout linearLayout=(LinearLayout)getChildAt(0); left=(ViewGroup)linearLayout.getChildAt(0); centre=(ViewGroup)linearLayout.getChildAt(1); right=(ViewGroup)linearLayout.getChildAt(2); ScreenWidth= ScreenUtils.getScreenWidth(getContext()); MenuWidth=ScreenWidth/4; HalfMenuWidth=MenuWidth/2; left.getLayoutParams().width=MenuWidth; centre.getLayoutParams().width=ScreenWidth; right.getLayoutParams().width=MenuWidth; &#125; super.onMeasure(widthMeasureSpec, heightMeasureSpec); &#125; @Override protected void onLayout(boolean changed, int l, int t, int r, int b) &#123; super.onLayout(changed, l, t, r, b); if(changed)&#123; this.scrollTo(MenuWidth,0); once=true; &#125; &#125; @Override public boolean onTouchEvent(MotionEvent ev) &#123; switch(ev.getAction())&#123; case MotionEvent.ACTION_UP: //在左侧 if(operateLeft)&#123; if(getScrollX()&lt;HalfMenuWidth)&#123; //滑到左最末尾 this.scrollTo(0, 0); &#125;else if(getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth)&#123; //滑到中间 this.scrollTo(MenuWidth, 0); &#125;else&#123; this.scrollTo(MenuWidth * 2, 0); &#125; &#125; //向右侧 if(operateRight)&#123; if(getScrollX()&gt;MenuWidth+HalfMenuWidth)&#123; //滑到最右 this.scrollTo(MenuWidth + MenuWidth, 0); &#125;else if(getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth)&#123; //滑到中间 this.scrollTo(MenuWidth, 0); &#125;else&#123; //滑到最左 this.scrollTo(0, 0); &#125; &#125; return true; &#125; return super.onTouchEvent(ev); &#125; @Override protected void onScrollChanged(int l, int t, int oldl, int oldt) &#123; super.onScrollChanged(l, t, oldl, oldt); if(l&gt;MenuWidth)&#123; operateLeft=false; operateRight=true; &#125;else&#123; operateLeft=true; operateRight=false; &#125; &#125;&#125; 在onMeasure()这个自定义View的测量方法里，我们首先拿到左菜单，内容，右菜单所对用的view,即left,centre,right这三个View,然后获取屏幕的宽度，动态设定菜单的宽度为屏幕宽度的四分之一，而内容的宽度就是整个屏幕的宽度，即123left.getLayoutParams().width=MenuWidth;centre.getLayoutParams().width=ScreenWidth;right.getLayoutParams().width=MenuWidth; 然后我们在onLayout()方法里对这三个View进行定位，即让他滑到内容的那个View。 然后回调onScrollChanged(int l, int t, int oldl, int oldt)方法，当l大于菜单宽度时是右侧，当l小于菜单宽度时是右侧。(注:l是屏幕最右边到整个View最右边的距离) 其次就是最重要的onTouchEvent(MotionEvent ev)方法了。(注:是屏幕最右边到整个View最右边的距离).当operateLeft==true的时候,滑动在操作在左侧,当getScrollX()&lt;HalfMenuWidth,即在最左向右滑还不到菜单的二分之一宽度时，恢复原状，即this.scrollTo(0, 0);，当getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth,即最左向右滑大于菜单的二分之一宽度但却小于左菜单加右菜单一半的宽度，所以只能滑到内容区域，即this.scrollTo(MenuWidth, 0);，这两种情况除外都会滑到最后边的菜单，所以this.scrollTo(MenuWidth * 2, 0); 同样的道理，当operateRight==true时，getScrollX()&gt;MenuWidth+HalfMenuWidth时，即在最右菜单但滑动的距离小于菜单宽度的一半，所以只能恢复原状即this.scrollTo(MenuWidth + MenuWidth, 0);,当getScrollX()&gt;HalfMenuWidth&amp;&amp;getScrollX()&lt;MenuWidth+HalfMenuWidth时，即滑动大于菜单一半但是却小于左菜单加右菜单一半的宽度，所以是内容区域，即滑动 this.scrollTo(MenuWidth, 0);，除这两种情况都是要滑到最左边的菜单，即 this.scrollTo(0, 0);。到此整个流程就讲完了。 最后奉上源码","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"android自定义控件","slug":"android自定义控件","permalink":"http://jack921.win/tags/android自定义控件/"}]},{"title":"android蓝牙4.0的知识要点","slug":"android蓝牙4-0的知识要点","date":"2017-03-13T14:58:00.000Z","updated":"2017-04-29T16:40:28.774Z","comments":true,"path":"2017/03/13/android蓝牙4-0的知识要点/","link":"","permalink":"http://jack921.win/2017/03/13/android蓝牙4-0的知识要点/","excerpt":"","text":"这次主要讲解蓝牙4.0的基本要点,作为自己的备忘录记录下来吧。首先普及一下蓝牙4.0基于Gatt协议来实现。而蓝牙4.0以下的是传统蓝牙，基于socket方式来实现。所以4.0以上的蓝牙具有传输速度更快，覆盖范围更广，安全性更高，延迟更短，耗电极低等等优点。 一个BLE终端可以包含多个Service， 一个Service可以包含多个Characteristic，一个Characteristic包含一个value和多个Descriptor，一个Descriptor包含一个Value。Characteristic是比较重要的，是手机与BLE终端交换数据的关键，读取设置数据等操作都是操作Characteristic的相关属性。接下来就是代码部分: 1.首先是声明权限: 12&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH_ADMIN&quot;/&gt; 如果你想声明你的应用程序只能在支持BLE的设备上运行，可以将下面声明包含进你的应用程序manifest文件中：1&lt;uses-feature android:name=&quot;android.hardware.bluetooth_le&quot; android:required=&quot;true&quot;&gt;&lt;/uses-feature&gt; 2.其次获取蓝牙适配器: mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();```也可以用123``` BluetoothManager mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE); BluetoothAdapter mBluetoothAdapter = mBluetoothManager.getAdapter(); 当mBluetoothAdapter==null的时候就说明手机没有开蓝牙，此时我们可以通过调用系统的蓝牙打开窗口打开蓝牙，如下12Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);startActivityForResult(enableBtIntent, REQUEST_ENABLE_BT); 再通过 1234protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; super.onActivityResult(requestCode, resultCode, data); &#125; 回调看时候开启成功。3.接着就是查找蓝牙了。查找蓝牙很简单，首先就是定义蓝牙查找获取设备的回调接口，如下:1234567private BluetoothAdapter.LeScanCallback mLeScanCallback = new BluetoothAdapter.LeScanCallback() &#123; @Override public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) &#123; //device.getName();获取蓝牙设备名字 //device.getAddress();获取蓝牙设备mac地址 &#125; &#125;; 然后使用.startLeScan(mLeScanCallback);```开始搜索设备，每当有设备即通过回调onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord)方法来输出设备数据信息。当你不想再搜索是可以使用```mBluetoothAdapter.stopLeScan(mLeScanCallback);```来停止搜索。1234.有蓝牙设备信息了，下一步我们当然要连接蓝牙了，不然要这些信息也没用了。连接蓝牙也是很简单。建议蓝牙连接最好在后台service进行。假如你保存上面回调方法的BluetoothDevice对象，就直接可以运行```BluetoothGatt mBluetoothGatt= device.connectGatt(this, false, mGattCallback);```这代码进行连接，至于mGattCallback是什么下文会介绍。而BluetoothGatt这对象也很重要，后面发现服务读写设备等操作都是通过该对象。假如没有BluetoothDevice 对象只有蓝牙设备的mac地址也可以连接，这个可以先像上面那样首先获取BluetoothAdapter蓝牙适配对象，```BluetoothDevice device = mBluetoothAdapter.getRemoteDevice(intent.getStringExtra(&quot;mac&quot;));```再通过getRemoteDevice()方法也可以BluetoothDevice 对象然后再像上面那样连接也可以。上面连接代码中出现的mGattCallback对象，这个是什么呢？它是蓝牙连接，读取设备，往设备里写数据及设备发出通知等都会回调该接口方法，具体如下: private final BluetoothGattCallback mGattCallback=new BluetoothGattCallback() { //当连接上设备或者失去连接时会回调该函数 @Override public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) { if(newState== BluetoothProfile.STATE_CONNECTED){ Log.e(&quot;log_state&quot;,&quot;连接成功&quot;); mBluetoothGatt.discoverServices(); }else if(newState==BluetoothProfile.STATE_DISCONNECTED){ Log.e(&quot;log_state&quot;,&quot;连接失败&quot;); } super.onConnectionStateChange(gatt, status, newState); } //当设备是否找到服务时，会回调该函数 @Override public void onServicesDiscovered(BluetoothGatt gatt, int status) { super.onServicesDiscovered(gatt, status); if (status == BluetoothGatt.GATT_SUCCESS) { //找到服务了 //在这里可以对服务进行解析，寻找到你需要的服务 } } //设备发出通知时会调用到该接口 @Override public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) { super.onCharacteristicChanged(gatt, characteristic); Log.e(&quot;log_change&quot;,&quot;发送通知&quot;); } //当读取设备时会回调该函数 @Override public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) { super.onCharacteristicRead(gatt, characteristic, status); if (status == BluetoothGatt.GATT_SUCCESS) { //读取成功 Log.e(&quot;log_read&quot;,characteristic.getValue()[0]+&quot;&quot;); }else{ //读取失败 } } //当向Characteristic写数据时会回调该函数 @Override public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) { super.onCharacteristicWrite(gatt, characteristic, status); if(status == BluetoothGatt.GATT_SUCCESS){ //写入成功 }else{ //写入失败 } } @Override //当向设备Descriptor中写数据时，会回调该函数 public void onDescriptorWrite(BluetoothGatt gatt,BluetoothGattDescriptor descriptor, int status) { super.onDescriptorRead(gatt, descriptor, status); } };12这是整个蓝牙核心的回调方法，因为你所有的蓝牙操作都离不开这个方法。当我们调用connectGatt()方法进行连接，首先会回到onConnectionStateChange(BluetoothGatt gatt, int status, int newState);方法看是否已经连接成功，接入成功newState==BluetoothProfile.STATE_CONNECTED;此时我们就可以用 mBluetoothGatt.discoverServices();方法找出该设备中的服务了。当蓝牙设备服务查找完之后就会回调onServicesDiscovered(BluetoothGatt gatt, int status);方法此时你就可以遍历出蓝牙设备的所有服务，例如方法如下： private void displayGattServices(List gattServices) { if (gattServices == null) return; for (BluetoothGattService gattService : gattServices) { // 遍历出gattServices里面的所有服务 List gattCharacteristics = gattService.getCharacteristics(); for (BluetoothGattCharacteristic gattCharacteristic : gattCharacteristics) { // 遍历每条服务里的所有Characteristic if (gattCharacteristic.getUuid().toString().equalsIgnoreCase(需要通信的UUID)) { // 有哪些UUID，每个UUID有什么属性及作用，一般硬件工程师都会给相应的文档。我们程序也可以读取其属性判断其属性。 // 此处可以可根据UUID的类型对设备进行读操作，写操作，设置notification等操作 // BluetoothGattCharacteristic gattNoticCharacteristic 假设是可设置通知的Characteristic // BluetoothGattCharacteristic gattWriteCharacteristic 假设是可读的Characteristic // BluetoothGattCharacteristic gattReadCharacteristic 假设是可写的Characteristic } } } }123到这一步，你就需要硬件工程师给你提供关于这个蓝牙设备的UUID文档，每个UUID的功能和操作都需要文档提供，不然你也不知道这些UUID具体代表什么功能和怎么用。当你知道UUID的意思,你就可以通过BluetoothGattCharacteristic 这个类进行各种读写操作。5.当你从文档看到遍历出来的UUID有接送通知的功能。这时你就可以设置可以接收通知。代码如下: public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enabled) { if (mBluetoothAdapter == null || mBluetoothGatt == null) { Log.w(TAG, “BluetoothAdapter not initialized”); return; } mBluetoothGatt.setCharacteristicNotification(characteristic, enabled); BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(“00002902-0000-1000-8000-00805f9b34fb”)); if (descriptor != null) { descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE); mBluetoothGatt.writeDescriptor(descriptor); }}1234通过拿到对应通知UUID的BluetoothGattCharacteristic，调用setCharacteristicNotification().其中00002902-0000-1000-8000-00805f9b34fb是系统提供接受通知自带的UUID，通过设置BluetoothGattDescriptor相当于设置BluetoothGattCharacteristic的Descriptor属性来实现通知，这样只要蓝牙设备发送通知信号，就会回调onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) 方法，这你就可以在这方法做相应的逻辑处理。6。还是当你遍历的UUID服务中关于写数据到设备已达到控制设备的UUID是，你可以保存对应的BluetoothGattCharacteristic对象。然后向BluetoothGattCharacteristic对象写入数据，在通过BluetoothGatt调用writeCharacteristic()方法即可向硬件写入数据，例如下代码: sendCharacteristic.setValue(new byte[] {0x00});mBluetoothGatt.writeCharacteristic(sendCharacteristic);```其中一般硬件里读出写入的数据为二进制类型，所以要熟悉整型，字符串，二进制，十六进制等它们之间的转换。至于写什么数据看硬件工程师的文档。 7.有写就有读，从蓝牙设备读数据也不难。首先还是从遍历的UUID中找到关于读取蓝牙设备数据的UUID，具体哪个UUID还是要看硬件文档。然后还是保存对应的BluetoothGattCharacteristic对象。当要读取时直接用运行BluetoothGatt的readCharacteristic(BluetoothGattCharacteristic characteristic);参数里的characteristic就是你保存的BluetoothGattCharacteristic对象，如mBluetoothGatt.readCharacteristic(getCharacteristic);然后就会回调上面的onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status);方法，最后当status == BluetoothGatt.GATT_SUCCESS时，即可通过characteristic.getValue();方法获取蓝牙设备返回的数据，你拿到数据剩下就是你的逻辑处理了。 至此，蓝牙4.0的关键知识就写完了，你掌握这些就可以连接蓝牙设备做很多事了,当然前提是要有蓝牙的硬件文档，不然你也不知道那些UUID是什么意思要怎么用。如果对你有帮助就请给我给喜欢吧,谢谢。","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"android蓝牙4.0","slug":"android蓝牙4-0","permalink":"http://jack921.win/tags/android蓝牙4-0/"}]},{"title":"基于豆瓣和妹子的api用React Native写的demo for android","slug":"基于豆瓣和妹子的api用React Native写的demo for android","date":"2017-01-24T02:53:00.000Z","updated":"2017-04-29T16:43:23.838Z","comments":true,"path":"2017/01/24/基于豆瓣和妹子的api用React Native写的demo for android/","link":"","permalink":"http://jack921.win/2017/01/24/基于豆瓣和妹子的api用React Native写的demo for android/","excerpt":"","text":"最近一直在学React Naitve,可以说React Native的确有他自身强大的地方,不管是运行效率还是热更新都和一般的h5有的一比,当然因为面世的时间还不算太久,版本更新又十分的快,所以坑也多,对于一般的移动开发者来说学习成本也蛮大的, 个人觉得用React Naitve做混合开发，把一些需要经常变化的模块用react native开发还是一个不错的选择。 demo就是已React Naitve的官方文档和学习过程中踩过的这种坑写出来仅供学习demo级东西，因为没有苹果电脑,只试运行android. 数据方面是用豆瓣的Gank的妹子api 所用到的第三方控件如下: React-native-vector-icons(一个可以用的网上图标库,不用自己设计), React-native-scrollable-tab-view(通用的Tab控制器),这上面两个的开源的结合可以参考http://www.jianshu.com/p/b0cfe7f11ee7这篇博客, React-native-tab-navigator(底部的tab控制器) 剩下的用到的React Native的原生控件有: ScorllView WebView TouchableOpacity Navigator Text Image ListView BackAndroid Button DrawerLayoutAndroid ActivityIndicator ToastAndroid … 效果图如下： 最后github地址https://github.com/jack921/JackBan-ReactNative","categories":[{"name":"React Native","slug":"React-Native","permalink":"http://jack921.win/categories/React-Native/"}],"tags":[{"name":"react native","slug":"react-native","permalink":"http://jack921.win/tags/react-native/"}]},{"title":"一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能","slug":"一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能","date":"2016-12-23T09:58:00.000Z","updated":"2017-04-29T16:44:57.838Z","comments":true,"path":"2016/12/23/一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能/","link":"","permalink":"http://jack921.win/2016/12/23/一个漂亮的干货集中营客户端的生成，集合了干货api的大部分功能/","excerpt":"","text":"好像好久没有更新了,这次给大家带来的是自己完全用一个全新的方式练手开发的客户端，而后台接口用的是干货集中营的API，所以在这里要谢谢daimajia,因为他的贡献所以我们才可以有好的api进行练手。 这是一个漂亮的Gank客户端,里面的功能包含了干货集中营的api所提供的大部分功能。功能如下： 可以查看每一天提供的Android,ios,休息视频等相关的技术干货，还有一张高清的妹子图在等着你哦 除此之外你还可以查看过往任何一天推荐的干货，让你真正的不会错过每天的干货集中营的推荐，并且支持发布自己的链接给代码家和根据关键字搜索自己想要的内容 同时可以按照不同的分类查看自己感兴趣的分类的干货如android,ios等，并且可以对分类进行排序，删除，再加入丰富的动画效果，体验效果棒棒的 对于男基友来说最最重要的当然是查看妹子啦，这也少不了，高清妹子图形成的瀑布流列表，支持转场动画，滑动浏览，放大图片，让你流连忘返 对于自己喜欢的干货数据不仅可以分享，还可以收藏，让你看了还可以再看，也可以让别人知道 最后支持app换肤，海量颜色总有一种颜色是你喜欢的，打造属于自己个性的Gank客户端 功能就大概这样啦，以上功能也基本对接的干货集中营api的大部分功能，算是先对与其他客户端来说功能比较全面的。 WHY有人说现在这Gank的客户端已经很多了为什么还要做。本项目完全开源，用的是现在很多的MVP模式开发，并学习和整个Rxjava,Retrofit,EventBus,ButterKnife的各个优秀开源框架的优点而产生的东西，自己学一个完成客户端从开始的设计，调研，都后来的编码，还有一些看似简单其实还是有点麻烦的小细节的实现，整个流程一下来是可以学到很多东西的，和激发起自己的很多思考，这也是我觉得做这个最重要的地方。所以做这个东西还有蛮有意义的，特别是一些细节，所对分类的排序怎样过度好，点击图片的转场动画，沉浸式状态栏的，和android5.0的新控件的运用等等的这些细节都是看似简单其实还是要花点力气的。此外用新的东西练练手也是很重要的。 就说到这，项目的效果图如下： github源码觉得有帮助的话就给个start吧 app下载","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"Gank Android 客户端","slug":"Gank-Android-客户端","permalink":"http://jack921.win/tags/Gank-Android-客户端/"}]},{"title":"高仿QQ运动的周报界面","slug":"高仿QQ运动的周报界面","date":"2016-10-22T14:05:00.000Z","updated":"2017-05-16T16:22:37.335Z","comments":true,"path":"2016/10/22/高仿QQ运动的周报界面/","link":"","permalink":"http://jack921.win/2016/10/22/高仿QQ运动的周报界面/","excerpt":"","text":"这次高仿的是QQ运动的周报界面的网图。这个控件刚开始的时候以为代码量不大，没想到一路下来界面代码在加上动画代码还是蛮多的。好了老规矩先上图：效果还是和qq的才不多吧。 1. 首先我把各个变量都贴出来以便在后续中你们可以更好理解代码的意思：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//屏幕的宽度 private int mScreemWidth; //屏幕的高度 private int mScreemHight; //圆的线 private Paint mCirclePaint; //圆区域的颜色 private Paint mCirclePaintColor; //虚线 private Paint mLineCircle; //圆点 private Paint mCircleHoldPaint; //画字体 private Paint mCenterCircle; //最外的圆的透明度 private int mCircleAlpha1=0; //中间的圆的透明度 private int mCircleAlpha2=0; //最内的圆的透明度 private int mCircleAlpha3=0; //好友排名 private int mFriendDranking=0; //达标天数 private int mStandardDay=0; //平均步数 private int mAverageCount=0; //好友排名的X轴坐标 private float mFriendDrankingX=0; //好友排名的Y轴坐标 private float mFriendDrankingY=0; //平均步数的X轴坐标private float mStandardDayX=0; //平均步数的Y轴坐标 private float mStandardDayY=0; //达标天数的X轴坐标 private float mAverageCountX=0; //达标天数的Y轴坐标 private float mAverageCountY=0; //临时的View的半径 private int tempCircleRadius=0; //View的半径 private int circleRadius=0; //每个圆圈的间隔 private float marginCircleSize=0; //圆的颜色 private int circleColor=0; //朋友区域的颜色 private int friendColor; //平均步数区域的颜色 private int averageColor; //达标天数区域的颜色 private int standardColor; //总步数 private String allStep; //好友排名private String firendDrank; //达标天数 private String standarDay; //平均步数 private String averageCount; //波浪动画的数值 private int waveData=-30; //中间文字翻转动画的数值 private float centerData=0; //画波浪的看门狗 private boolean waveWatchDag=false; //画虚线的看门狗 private boolean lineWatchDag=false; //各点解释的看门狗 private boolean expainWatchDag=false; //中心圆的内容的看门狗 private boolean centerWatchDag=false; //解释的字符串 private String averageCountTxt=&quot;平均步数&quot;; private String friendDrankTxt=&quot;好友排名&quot;; private String standarDayTxt=&quot;达标天数&quot;; private String theyCount=&quot;本周总步数&quot;; private String tip=&quot;步&quot;; 2.有点多了，其次就是测量View的大小的onMeasure():123456789101112131415161718192021@Override protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123; int widthModel=MeasureSpec.getMode(widthMeasureSpec); int heightModel=MeasureSpec.getMode(heightMeasureSpec); int measureWidth=MeasureSpec.getSize(widthMeasureSpec); int measureHeight=MeasureSpec.getSize(heightMeasureSpec); int width; int height; if(widthModel==MeasureSpec.EXACTLY)&#123; width=measureWidth; &#125;else&#123; width=getPaddingLeft()+getPaddingRight()+measureWidth; &#125; if(heightModel==MeasureSpec.EXACTLY)&#123; height=measureHeight; &#125;else&#123; height=(getPaddingLeft()+getPaddingRight()+measureHeight)/2; &#125; setMeasuredDimension(width,height); loadAnimator(); &#125; 3.这里当设置大小为wrap_content的时候，View的宽度的话是用屏幕的的宽，而View的高的话是屏幕的高度的一半。当View的大小生成之后会调用onSizeChange()方法，具体操作如下：1234567891011121314151617@Override protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123; super.onSizeChanged(w, h, oldw, oldh); mScreemWidth=w; mScreemHight=h; //得出最大的圆的半径 if(mScreemWidth&gt;mScreemHight)&#123; circleRadius=Float.valueOf((w/3.4)+&quot;&quot;).intValue(); &#125;else&#123; circleRadius=Float.valueOf((h/3.4)+&quot;&quot;).intValue(); &#125; if(tempCircleRadius!=0&amp;&amp;tempCircleRadius&lt;=circleRadius)&#123; circleRadius=tempCircleRadius; &#125; //得出每个圆的间隔 marginCircleSize=circleRadius/6; &#125; 当View的宽度大于View的高度时，最外边的圆的半径就是w/3.4，反之当View的高度大于View的宽度时，最外边的圆的半径就是h/3.4,而每个圆的间隔就是圆半径的六分之一。4.接着就是最重要的onDraw()方法了，代码如下:12345678910111213141516@Override protected void onDraw(Canvas canvas) &#123; canvas.translate(getWidth()/2,getHeight()/2-(circleRadius/6)); canvas.save(); //画出三条圆圈 drawCircle(canvas); //画出波浪图形 drawWaves(canvas); //画虚线 drawDottedLine(canvas); //画点 drawCircleHold(canvas); //画解释的内容 drawExpain(canvas); //画中心圆的内容 centerCircleContent(canvas); &#125; 首先把canvas的原点移到X轴为宽度的一半，Y轴为高度的一半再减去六分之一的半径，保存canvas的状态。接着就一个个说这里面的每一个方法：123456789101112131415161718//画出三条圆圈 public void drawCircle(Canvas canvas)&#123; //画出最大的圆 mCirclePaint.setAlpha(mCircleAlpha1); canvas.drawCircle(0,0,circleRadius,mCirclePaint); //画出第二大的圆 mCirclePaint.setAlpha(mCircleAlpha2); canvas.drawCircle(0,0,circleRadius-marginCircleSize,mCirclePaint); mCirclePaintColor.setColor(Color.parseColor(&quot;#F1FCFE&quot;)); mCirclePaintColor.setAlpha(mCircleAlpha2); canvas.drawCircle(0,0,circleRadius-marginCircleSize-2,mCirclePaintColor); //画出第三大的圆 mCirclePaint.setAlpha(mCircleAlpha3); canvas.drawCircle(0,0,circleRadius-marginCircleSize*2,mCirclePaint); mCirclePaintColor.setColor(Color.parseColor(&quot;#E7F9FE&quot;)); mCirclePaintColor.setAlpha(mCircleAlpha3); canvas.drawCircle(0,0,circleRadius-marginCircleSize*2-2,mCirclePaintColor); &#125; 这个方法是比较简单的，就是画出三个圆圈，每个圆圈的间隔就是前面所初始化的marginCircleSize，圆圈的圆心就是canvas的原点，之前我们移动过原点了。第二和第三个圆圈里面还配有圆的背景，效果如下图：接着就是画出波浪图形的方法 drawWaves(canvas)代码如下:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273 //画出波浪图形 public void drawWaves(Canvas canvas)&#123; if(!waveWatchDag)&#123; return ; &#125; canvas.rotate(waveData);float inCircleRadius=circleRadius-marginCircleSize*3; //算出最上面的点 float topPointX=0; float topPointY=-inCircleRadius; //算出左下角的点 float leftBottpmPointX=-(float)Math.sqrt(Math.pow(inCircleRadius,2)-Math.pow(inCircleRadius/2,2));float leftBottomPointY=inCircleRadius/2; //算出右小角的点 float rightBottomPointX=-leftBottpmPointX;float rightBottomPointY=inCircleRadius/2;//得到好友排名半径float mFriendDrankingData=circleValue(mFriendDranking); //得到达标天数半径 float mStandarDayData=circleValue(mStandardDay); //得到平均步数半径float mAverageCountData=circleValue(mAverageCount); /*画好友排名*/ //得出左上角的圆的坐标float[] mFriendDrankingPoint=calculatePoint(mFriendDrankingData); //好友排名的X轴坐标 mFriendDrankingX=-mFriendDrankingPoint[0]; //好友排名的Y轴坐标 mFriendDrankingY=-mFriendDrankingPoint[1]; //画出还有排名的波浪线 Path mFriendDrankingPath=new Path(); mFriendDrankingPath.moveTo(leftBottpmPointX,leftBottomPointY); mFriendDrankingPath.lineTo(mFriendDrankingX-6,mFriendDrankingY-6); mFriendDrankingPath.lineTo(topPointX,topPointY); mFriendDrankingPath.lineTo(topPointX+10,topPointY+10); mCirclePaintColor.setPathEffect(new CornerPathEffect(20)); mCirclePaintColor.setColor(friendColor); canvas.drawPath(mFriendDrankingPath,mCirclePaintColor); /*画达标天数*/ //得出右上角的圆的坐标 float[] mStandarDayPoint=calculatePoint(mStandarDayData); //达标天数的X轴坐标 mStandardDayX=mStandarDayPoint[0]; //达标天数的Y轴坐标 mStandardDayY=-mStandarDayPoint[1]; //画出还有达标天数的波浪线 Path mStandarDayPath=new Path(); mStandarDayPath.moveTo(topPointX,topPointY); mStandarDayPath.lineTo(mStandardDayX+6,mStandardDayY-6); mStandarDayPath.lineTo(rightBottomPointX,rightBottomPointY); mStandarDayPath.lineTo(rightBottomPointX-10,rightBottomPointY+10); mCirclePaintColor.setColor(standardColor); canvas.drawPath(mStandarDayPath,mCirclePaintColor); /*平均步数*///平均步数的X轴坐标 mAverageCountX=0; //平均步数的Y轴坐标 mAverageCountY=mAverageCountData;//画出还有平均步数的波浪线 Path mAverageCountPath=new Path();mAverageCountPath.moveTo(rightBottomPointX,rightBottomPointY); mAverageCountPath.lineTo(topPointX,mAverageCountData+8); mAverageCountPath.lineTo(leftBottpmPointX,leftBottomPointY); mAverageCountPath.lineTo(leftBottpmPointX+10,leftBottomPointY+10); mCirclePaintColor.setColor(averageColor); canvas.drawPath(mAverageCountPath,mCirclePaintColor); //最里面的圆 mCirclePaintColor.setColor(Color.WHITE); canvas.drawCircle(0,0,circleRadius-marginCircleSize*3,mCirclePaintColor); &#125; 这方法里最核心的就是数学计算了，整个View有3个波浪区域，各占一个圆的三分之一，所以第一步就是计算出这个圆的左下角,右小角和正上角的三个点，如图的蓝色点所示。具体代码见注释。在通过circleValue算出波浪线的半径：1234567891011 //算出弧线区域的半径 public float circleValue(int mDataDranking)&#123; if(mDataDranking==1)&#123; return circleRadius-marginCircleSize*2; &#125;else if(mDataDranking==2)&#123; return circleRadius-marginCircleSize; &#125;else if(mDataDranking==3)&#123; return circleRadius; &#125;else&#123; return circleRadius-marginCircleSize*2; &#125; &#125; 然后通过calculatePoint()方法来各个波浪区域对应的顶点，代码如下：123456789//算出右上角或左上角的坐标 public float[] calculatePoint(float radius)&#123; float[] result=new float[2]; float pointY=radius/2; float pointX=(float)Math.sqrt(Math.pow(radius,2)-Math.pow(pointY,2)); result[0]=pointX; result[1]=pointY; return result; &#125; 最后转化为形象的图就是:接着用Path把各个区域的点连起来就是形成区域，不过现在还是尖角，要把它变成原角就要用mCirclePaintColor.setPathEffect(new CornerPathEffect(20));方法，这样各个边的连接处都可以转换成圆角，可是因为是圆角所以到不到圆圈的边，这时候你要对你的顶点进行微调，所以我再顶点都进行了减6或者加6的操作。至于我这个6是怎么得出来的,我用的等比例的数学方法来求出来的，到时有优化我可以把我的方法用代码表示出来。至此，重要的就说完了，剩下的只是用canvas和path和paint画出来就是了。效果如下：接着就是画虚线的方法了drawDottedLine(canvas)代码如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869 //画圆点和虚线 public void drawDottedLine(Canvas canvas)&#123; if(!lineWatchDag)&#123; return; &#125; for(int i=0;i&lt;3;i++)&#123; canvas.rotate(120); if(i==0)&#123; //画好友排名的虚线 mLineCircle.setTextSize(18); mLineCircle.setColor(friendColor); drawDottedLine(canvas,judgeDotte(mFriendDranking)); &#125;else if(i==1)&#123; //画达标天数的虚线 mLineCircle.setColor(standardColor); drawDottedLine(canvas,judgeDotte(mStandardDay)); &#125;else if(i==2)&#123; //画平均步数的虚线 mLineCircle.setColor(averageColor); drawDottedLine(canvas,judgeDotte(mAverageCount)); &#125; &#125; canvas.restore(); &#125; //判断虚线 public List&lt;Float&gt; judgeDotte(int value)&#123; List&lt;Float&gt; temp=new ArrayList&lt;&gt;(); if(value==1)&#123; //当为1时,波浪顶点到第三个圆 temp.add(circleRadius-marginCircleSize*2); temp.add((float)circleRadius); temp.add(circleRadius-marginCircleSize*3); &#125;else if(value==2)&#123; //当为2时,波浪顶点到第二个圆 temp.add(circleRadius-marginCircleSize); temp.add((float)circleRadius); temp.add(circleRadius-marginCircleSize*3); &#125;else if(value==3)&#123; //当为3时,波浪顶点到第一个圆 temp.add(circleRadius-marginCircleSize*3); temp.add((float)circleRadius); &#125; return temp; &#125; //画虚线 public void drawDottedLine(Canvas canvas,List&lt;Float&gt; data)&#123; if(data.size()==2)&#123; /*当数值是最大的是时候也就是3*/ mLineCircle.setColor(Color.WHITE); Path path=new Path(); path.moveTo(0,data.get(0)); path.lineTo(0,data.get(1)); canvas.drawPath(path,mLineCircle); return ; &#125;else&#123; /*当数值在1和2的时候*/ //画出数值外的虚线 Path pathOut=new Path(); pathOut.moveTo(0,data.get(0)); pathOut.lineTo(0,data.get(1)); mLineCircle.setPathEffect(new DashPathEffect(new float[]&#123;7,5,7,5&#125;,5)); canvas.drawPath(pathOut,mLineCircle); //画出数值内的虚线 Path pathIn=new Path(); pathIn.moveTo(0,data.get(1)); pathIn.lineTo(0,data.get(2)); mLineCircle.setColor(Color.WHITE); canvas.drawPath(pathIn,mLineCircle); &#125; &#125; 首先canvas通过每次旋转120度来画出每一条波浪线，通过judgeDotte()方法得出波浪线三个点对应的Y轴的坐标，假如judgeDotte返回的个数是两个的话那就是证明顶点在最外面的圆，假如是3个的话就画出顶点之外和顶点之内的线就可以了，代码注释已经很详细了，效果图如下：接着是画虚线上的圆点，drawCircleHold(Canvas canvas)代码如下:1234567891011121314151617181920212223242526272829303132//画虚线上的圆点 public void drawCircleHold(Canvas canvas)&#123; if(!lineWatchDag)&#123; return; &#125; float[] yuan1=calculatePoint(circleRadius-marginCircleSize*2); float[] yuan2=calculatePoint(circleRadius-marginCircleSize); float[] yuan3=calculatePoint(circleRadius); //画好友排名的圆点 drawCircleHoldImpl(-yuan1[0],-yuan1[1],-yuan2[0],-yuan2[1], -yuan3[0],-yuan3[1],mFriendDranking,canvas,friendColor); //画达标天数的圆点 drawCircleHoldImpl(yuan1[0],-yuan1[1],yuan2[0],-yuan2[1], yuan3[0],-yuan3[1],mStandardDay,canvas,standardColor); //画平均步数的圆点 drawCircleHoldImpl(0,circleRadius-marginCircleSize*2,0,circleRadius-marginCircleSize, 0,circleRadius,mAverageCount,canvas,averageColor); expainWatchDag=true; &#125; //画圆的具体的方法 public void drawCircleHoldImpl(float mCirlce1X,float mCircle1Y,float mCirlce2X,float mCircle2Y, float mCirlce3X,float mCircle3Y,int action,Canvas canvas,int color)&#123; mCircleHoldPaint.setColor(color); if(action==1)&#123; //当数值为3时画所有圆圈 canvas.drawCircle(mCirlce1X,mCircle1Y,8,mCircleHoldPaint); canvas.drawCircle(mCirlce2X,mCircle2Y,8,mCircleHoldPaint); &#125;else if(action==2)&#123; //当数值为2时画中间的圆圈 canvas.drawCircle(mCirlce2X,mCircle2Y,8,mCircleHoldPaint); &#125; //画一定要画的圆圈和圆点 canvas.drawCircle(mCirlce3X,mCircle3Y,8,mCircleHoldPaint); mCircleHoldPaint.setColor(Color.WHITE); canvas.drawCircle(mCirlce1X,mCircle1Y,6,mCircleHoldPaint); canvas.drawCircle(mCirlce2X,mCircle2Y,6,mCircleHoldPaint); canvas.drawCircle(mCirlce3X,mCircle3Y,6,mCircleHoldPaint); &#125; 这里同样注释也是很详细的，整个思路就是通过calculatePoint()算出三个圆点的坐标，在通过传进去的数值来要画多少个圆圈，而原点是不管数值多少都要画的。效果图如下：接着就是画解释的内容drawExpain(Canvas canvas)代码如下: 123456789101112131415161718192021222324252627282930313233 //画解释的内容 public void drawExpain(Canvas canvas)&#123; if(!expainWatchDag)&#123; return ; &#125; //间隔 int margin=circleRadius/5; //画平均步数和对应的数值 Rect txtRect=new Rect(); mCenterCircle.setColor(Color.BLACK); mCenterCircle.setTextSize(circleRadius/6); mCenterCircle.setTypeface(Typeface.SANS_SERIF); canvas.drawText(averageCount,0,circleRadius+margin,mCenterCircle); mCenterCircle.setColor(friendColor); mCenterCircle.setTextSize(circleRadius/10); mCenterCircle.getTextBounds(averageCountTxt,0,averageCountTxt.length(),txtRect); canvas.drawText(averageCountTxt,0,circleRadius+margin+(txtRect.bottom- txtRect.top),mCenterCircle); //画好友排名和对应的数值 mCenterCircle.setColor(Color.BLACK); mCenterCircle.setTextSize(circleRadius/6); canvas.drawText(firendDrank,-circleRadius,-(circleRadius- marginCircleSize),mCenterCircle); mCenterCircle.setColor(friendColor); mCenterCircle.setTextSize(circleRadius/10); mCenterCircle.getTextBounds(friendDrankTxt,0,friendDrankTxt.length(),txtRect); canvas.drawText(friendDrankTxt,-circleRadius,-(circleRadius-marginCircleSize)+(txtRect.bottom-txtRect.top),mCenterCircle); //画达标天数和对应的数值 mCenterCircle.setColor(Color.BLACK); mCenterCircle.setTextSize(circleRadius/6); canvas.drawText(standarDay,circleRadius,-(circleRadius- marginCircleSize),mCenterCircle); mCenterCircle.setColor(friendColor); mCenterCircle.setTextSize(circleRadius/10); mCenterCircle.getTextBounds(friendDrankTxt,0,friendDrankTxt.length(),txtRect); canvas.drawText(standarDayTxt,circleRadius,-(circleRadius-marginCircleSize)+(txtRect.bottom-txtRect.top),mCenterCircle); centerWatchDag=true; &#125; 看起来代码有点多，其实是最简单的，就是确定好友排名的坐标(-circleRadius,-(circleRadius-marginCircleSize)),int margin=circleRadius/5,平均步数的坐标(0,circleRadius+margin),达标天数的坐标(circleRadius,-(circleRadius-marginCircleSize))来进行drawText的操作而已，没什么可以说的，Rect是得出字体大小的，具体看上面代码。效果如下图：最后就是画中心圆的内容的centerCircleContent(canvas)了，代码如下：123456789101112131415161718192021222324252627282930313233//画中心圆的内容 public void centerCircleContent(Canvas canvas)&#123; if(!centerWatchDag)&#123; return ; &#125; //画出颜色渐变的圆圈 canvas.rotate(140); float centerSize=circleRadius-marginCircleSize*3-(circleRadius/20); mCenterCircle.setShader(new SweepGradient(0,0,new int[]&#123; friendColor,friendColor,standardColor,averageColor&#125;,null)); canvas.drawCircle(0,0,centerSize,mCenterCircle); canvas.rotate(-140); //画出运动的总步数 mCenterCircle.setShader(null); mCenterCircle.setColor(friendColor); mCenterCircle.setTextSize(circleRadius/4); mCenterCircle.setTextAlign(Paint.Align.CENTER); Rect numRect=new Rect(); mCenterCircle.getTextBounds(allStep,0,allStep.length(),numRect); Camera camera=new Camera(); camera.rotateY(centerData); camera.applyToCanvas(canvas); canvas.drawText(allStep,0,(numRect.bottom-numRect.top)/2,mCenterCircle); //画出总运动步数右边的字 Rect tipRect=new Rect(); mCenterCircle.setTextSize(circleRadius/12); mCenterCircle.getTextBounds(tip,0,tip.length(),tipRect); canvas.drawText(tip,(numRect.right-numRect.left)/2+(tipRect.right-tipRect.left)/2+5 ,(numRect.bottom-numRect.top)/2-3,mCenterCircle); //画出总运动步数下面的提示 Rect theyRect=new Rect(); mCenterCircle.getTextBounds(theyCount,0,theyCount.length(),theyRect); float marginBottom=circleRadius/12; mCenterCircle.setTextSize(circleRadius/11); canvas.drawText(theyCount,0,marginBottom+(numRect.bottom-numRect.top)/2 +(theyRect.bottom-theyRect.top)/2,mCenterCircle); &#125; 中心圆的内容里实现的大概思路画解释的内容的思路都差不多，我觉得值得讲的就是这个Camera类了，这里的Camera类可不是相机里的Camera类，他可以实现Camera的旋转缩放的功能，是一个十分强大的类，而camera.rotateY(centerData)就是设置Y轴旋转的效果的关键代码。其次就是用mCenterCircle.setShader(new SweepGradient(0,0,new int[]{ friendColor,friendColor,standardColor,averageColor},null));来实现圆圈颜色的渐变功能的关键代码，里面还可以实现更多效果，这就需要小伙伴们用外的时间学了。最后效果如下:至此整个绘画就结束了，接着就是动画效果，代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 //启动动画的方法 public void loadAnimator()&#123; final ValueAnimator alphaAmimator3=ValueAnimator.ofInt(0,225); final ValueAnimator alphaAmimator2=ValueAnimator.ofInt(0,225); final ValueAnimator wavesAminator=ValueAnimator.ofInt(-30,0); final ValueAnimator centerAnimator=ValueAnimator.ofFloat(0,360); ValueAnimator alphaAmimator1=ValueAnimator.ofInt(0,225); centerAnimator.setDuration(1000); centerAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; centerData=(float)animation.getAnimatedValue(); postInvalidate(); &#125; &#125;); wavesAminator.setDuration(1000); wavesAminator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; waveData=(int)animation.getAnimatedValue(); waveWatchDag=true; if(waveData==0&amp;&amp;lineWatchDag==false)&#123; lineWatchDag=true; centerAnimator.start(); &#125; postInvalidate(); &#125; &#125;); alphaAmimator3.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mCircleAlpha3=(int)animation.getAnimatedValue(); postInvalidate(); if(mCircleAlpha3==225)&#123; wavesAminator.start(); &#125; &#125; &#125;); alphaAmimator3.setDuration(250); alphaAmimator2.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mCircleAlpha2=(int)animation.getAnimatedValue(); postInvalidate(); if(mCircleAlpha2==225)&#123; alphaAmimator3.start(); &#125; &#125; &#125;); alphaAmimator2.setDuration(250); alphaAmimator1.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mCircleAlpha1=(int)animation.getAnimatedValue(); postInvalidate(); if(mCircleAlpha1==225)&#123; alphaAmimator2.start(); &#125; &#125;&#125;); alphaAmimator1.setDuration(250); alphaAmimator1.start();&#125; 其实就是通过ValueAnimator不断的生成状态量然后调用postInvalidate()不断的刷新View即可实现。最后要想更详细的了解整个流程请看源码吧。奉上源码。如果对你有帮助就请给我给星星或喜欢吧","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/tags/Android自定义/"}]},{"title":"模仿企鹅FM播放主页面滑动动态改变各视图的大小","slug":"模仿企鹅FM播放主页面滑动动态改变各视图的大小","date":"2016-10-05T06:12:00.000Z","updated":"2017-04-29T16:44:35.276Z","comments":true,"path":"2016/10/05/模仿企鹅FM播放主页面滑动动态改变各视图的大小/","link":"","permalink":"http://jack921.win/2016/10/05/模仿企鹅FM播放主页面滑动动态改变各视图的大小/","excerpt":"","text":"国庆的一个任务就是把自己之前写的代码搬到博客。这次给各位带来的是通过滑动来动态改变各个View的大小进而达到企鹅FM播放页面的滑动效果(仅仅是滑动效果)，老规矩看图先:首先看看主界面的xml布局： 12345678910111213141516171819202122232425&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;@color/black&quot;&gt; &lt;com.qqfm.jack.qqfmcontentview.util.ObservableScrollView android:id=&quot;@+id/MenuMainScrollView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt; &lt;LinearLayout android:id=&quot;@+id/contentshow&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:orientation=&quot;horizontal&quot;/&gt; &lt;/com.qqfm.jack.qqfmcontentview.util.ObservableScrollView&gt; &lt;include android:id=&quot;@+id/contentcontrolview&quot; layout=&quot;@layout/contentcontrol&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_alignParentBottom=&quot;true&quot; /&gt; &lt;/RelativeLayout&gt; 在这布局里好包含着一个布局就是contentcontrol.xml文件，由于此文件有点多并且也简单所以就不列出来，详细到时可看源码，contentcontrol.xml的界面效果是这样主体的布局搭建完了。接着我们有一个自定义的类ObservableScrollView.java,而这个类也是很简单的，只是起到了一个接口监听滑动变量的作用，代码如下： 123456789101112131415161718192021222324252627282930public class ObservableScrollView extends HorizontalScrollView &#123; private ScrollViewListener scrollViewListener = null; public ObservableScrollView(Context context) &#123; super(context); &#125; public ObservableScrollView(Context context, AttributeSet attrs, int defStyle) &#123; super(context, attrs, defStyle); &#125; public ObservableScrollView(Context context, AttributeSet attrs) &#123; super(context, attrs); &#125; public void setScrollViewListener(ScrollViewListener scrollViewListener) &#123; this.scrollViewListener = scrollViewListener; &#125; @Override protected void onScrollChanged(int x, int y, int oldx, int oldy) &#123; super.onScrollChanged(x, y, oldx, oldy); if (scrollViewListener != null) &#123; scrollViewListener.onScrollChanged(this, x, y, oldx, oldy); &#125; &#125;&#125; 如代码所示ObservableScrollView只是继承HorizontalScrollView ，定义接口监听onScrollChanged()方法的各个变量。接下来就是最终要的MainActivity.java里面的代码，这是整个逻辑的核心代码都在这里，代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162public class MainActivity extends AppCompatActivity implements View.OnTouchListener,ScrollViewListener &#123; private ObservableScrollView mHorizontalScrollView; private LinearLayout Contentshow; private RelativeLayout contentcontrolshow=null; private LinearLayout contentcontrolmenu=null; private RelativeLayout contentcontrolbu=null; //屏幕的宽 private int width=0; //屏幕的高 private int height=0; //信息view private View info; //菜单view private View menu; //控制按钮view private View control; //半个页面的距离 private int HalfMenuWidth=0; private int ScrollX; //显示信息百分比 private float InfoPercent=0; //菜单百分比 private float MenuPercent=0; //底部视图各部分的高度 private int ShowHeight; private int MenuHeight; private int ControlHeight; //第一次滑动状态 private boolean FirstScoll=true; private boolean InitFirstData=true; private Float infoheight=0.0f; private Float menuheight=0.0f; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); initView(); &#125; //真正的View显示时onWindowFocusChanged()函数被执行 @Override public void onWindowFocusChanged(boolean hasFocus) &#123; super.onWindowFocusChanged(hasFocus); if(InitFirstData)&#123; width= ScreenUtils.getScreenWidth(this); height=ScreenUtils.getViewHeight(this); initScrollViewPlace(); initViewSize(); InitFirstData=false; &#125; &#125; //初始时移动到详细页面 public void initScrollViewPlace()&#123; mHorizontalScrollView.post(new Runnable() &#123; @Override public void run() &#123; //滑到显示信息的View mHorizontalScrollView.smoothScrollTo(width,0);// UpdateViewHeight(height/2); &#125; &#125;); &#125; //初始化视图 public void initView()&#123; try&#123; //初始化HorizontalScrollView mHorizontalScrollView=(ObservableScrollView)findViewById(R.id.MenuMainScrollView); //设置监听 mHorizontalScrollView.setOnTouchListener(this); mHorizontalScrollView.setScrollViewListener(this); //初始化底部视图 Contentshow=(LinearLayout)findViewById(R.id.contentshow); //初始化contentcontrol的各个部分 contentcontrolshow=(RelativeLayout)findViewById(R.id.contentcontrol_show); contentcontrolmenu=(LinearLayout)findViewById(R.id.contentcontrol_menu); contentcontrolbu=(RelativeLayout)findViewById(R.id.controlbutton); //初始化滑动的三个视图 info= LayoutInflater.from(this).inflate(R.layout.contentinfo,null); menu= LayoutInflater.from(this).inflate(R.layout.contentmenu, null); control=findViewById(R.id.contentcontrolview); &#125;catch(Exception e)&#123;&#125; &#125; public void initViewSize()&#123; //半个页面的距离 HalfMenuWidth=width/2; //为info,menu和control赋值 LinearLayout.LayoutParams InfoLayoutParams=new LinearLayout.LayoutParams(width,height/2); LinearLayout.LayoutParams MenuLayoutParams=new LinearLayout.LayoutParams(width,height); //显示信息的View是屏幕高度的二分之一 info.setLayoutParams(InfoLayoutParams); //显示菜单的View是屏幕的高度 menu.setLayoutParams(MenuLayoutParams); //控制按钮的View是屏幕高度的二分之一 control.getLayoutParams().height=height/2; //添加View Contentshow.addView(menu); Contentshow.addView(info); &#125; @Override public boolean onTouch(View v, MotionEvent event) &#123; switch(event.getAction())&#123; case MotionEvent.ACTION_UP: Log.e(&quot;onScrollChanged&quot;,ScrollX+&quot;&quot;); Log.e(&quot;onScrollChanged2&quot;,width+&quot;&quot;); if(ScrollX&gt;HalfMenuWidth)&#123; mHorizontalScrollView.smoothScrollTo(width,0); &#125;else&#123; mHorizontalScrollView.smoothScrollTo(0,0); &#125; return true; &#125; return super.onTouchEvent(event); &#125; public void ChangeHeight(View view,int height)&#123; ViewGroup.LayoutParams layoutParams=view.getLayoutParams(); layoutParams.height=height; view.setLayoutParams(layoutParams); &#125; public void UpdateViewHeight(int height)&#123; ViewGroup.LayoutParams layoutParams=control.getLayoutParams(); layoutParams.height=height; control.setLayoutParams(layoutParams); &#125; @Override public void onScrollChanged(ObservableScrollView scrollView, int scrollX, int scrollY,int oldScrollX,int oldScrollY) &#123; this.ScrollX=scrollX; if(FirstScoll)&#123; DecimalFormat df=new DecimalFormat(&quot;0.00&quot;); ShowHeight=contentcontrolshow.getHeight(); MenuHeight=contentcontrolmenu.getHeight(); ControlHeight=contentcontrolbu.getHeight(); // info缩小对应的百分比 InfoPercent=Float.valueOf(df.format((float)width/ShowHeight)); // menu缩小对应的百分比 MenuPercent=Float.valueOf(df.format((float)width/MenuHeight)); FirstScoll=false; //按钮保持原来的大小 ChangeHeight(contentcontrolbu,ControlHeight); //保持原样 ChangeHeight(info,height/2); ChangeHeight(menu,height-ControlHeight); &#125; infoheight=Float.valueOf(scrollX/InfoPercent); menuheight=Float.valueOf(scrollX/MenuPercent); //更新view的高度 UpdateViewHeight(infoheight.intValue()+menuheight.intValue()+ControlHeight); //info缩小对应的百分比 ChangeHeight(contentcontrolshow,infoheight.intValue()); //menu缩小对应的百分比 ChangeHeight(contentcontrolmenu,menuheight.intValue()); &#125;&#125; 代码量还是有点多，不过一步一步来其实也就是几步而已。从OnCreate()开始在setContentView()加载完后，调用initView()方法对变量和子View进行初始化。对mHorizontalScrollView控件进行监听setOnTouchListener和setScrollViewListener，其中是自定义的接口，在监听自定义类ObservableScrollView。contentcontrolshow，contentcontrolmenu，contentcontrolbu分别对应着南海归墟，左中右，和底下五个按钮的View,如上图。info对应着写着contentinfo的View，menu对应着写着contentmenu的View. 接着当Activity显示为可见的时候会回调onWindowFocusChanged()方法。而onWindowFocusChanged()方法里主要的操作是初始化各个子View的大小。有人会问为什么不在onCreate()方法里就初始化子View的大小？因为在onCreate()时此时整个Activity的界面还没有显示，所以等不到屏幕的整个View的大小的参数，所以在onWindowFocusChanged()里，首先把ObservableScrollView包含的info和menu这两个View移到info这个View里。然后动态设置各个子View的大小，核心代码如下：123456//显示信息的View是屏幕高度的二分之一info.setLayoutParams(InfoLayoutParams);//显示菜单的View是屏幕的高度menu.setLayoutParams(MenuLayoutParams);//控制按钮的View是屏幕高度的二分之一control.getLayoutParams().height=height/2; 当我们左右滑动界面是，会回调onScrollChanged()方法。因为Activity初始化完在没滑动的时候会回调onScrollChanged()方法，所以当第一次调用该方法时要计算出写着contentinfo的View和写着contentmenu的View缩小或放大对应的百分比，再设置control里面三个View大小。这样一开始的界面的初始化才能达到效果。最后当滑动的时候我们只需要计算出滑动距离所要改变的大小，infoheight=Float.valueOf(scrollX/InfoPercent); menuheight=Float.valueOf(scrollX/MenuPercent); 再动态的设置各个View的高度1234567//更新control的高度 UpdateViewHeight(infoheight.intValue()+menuheight.intValue()+ControlHeight); //contentcontrolshow缩小对应的百分比 ChangeHeight(contentcontrolshow,infoheight.intValue()); //contentcontrolmenu缩小对应的百分比 ChangeHeight(contentcontrolmenu,menuheight.intValue());&#125; 既可以实现滑动改变的效果。 具体的细节请看源码吧，如果对你有帮助就请给我给星星或喜欢吧","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/tags/Android/"}]},{"title":"自定义天气显示温度变化的LinearChart控件","slug":"自定义天气显示温度变化的LinearChart控件","date":"2016-10-04T14:15:00.000Z","updated":"2017-04-29T16:45:20.419Z","comments":true,"path":"2016/10/04/自定义天气显示温度变化的LinearChart控件/","link":"","permalink":"http://jack921.win/2016/10/04/自定义天气显示温度变化的LinearChart控件/","excerpt":"","text":"这次发表的是前几个月搞定的一个自定义控件，那时自己在写一个小的查看天气的软件，在这过程中就涉及了显示天气变化的折线图，一开始想用一些画图框架来解决问题，不过考虑到就只用到LineChart折线图这一个控件就要导一个库有点太浪费了，所以就自己自定义简易版LineChart算了。好了不说闲话老规矩，先发张效果图先： 这就是这个自定义控件的最终效果，当然颜色你可以自己设置。首先初始化自定义控件的各个变量，以便看得更清楚： 1234567891011121314151617181920212223242526272829303132333435363738//圆点旁边字体的大小private int CircleTextSize;//字体颜色private int CircleTextColor;//高的温度的线的颜色private int MinLineColor;//低的温度的线的颜色private int MaxLineColor;//圆点的颜色 private int CircleColor;//画线的画笔private Paint LinePaint;//画圆点的画笔private Paint CirclePaint;//画字的画笔private Paint TextPaint;//存储Max轴的数据private List&lt;Float&gt; YValueMax=new ArrayList&lt;&gt;();//存储Min轴的数据private List&lt;Float&gt; YValueMin=new ArrayList&lt;&gt;();//控件的高度private int ChartHeight=0;//控件的长度private int ChartWidth=0;//缓存X轴的数据private List&lt;Float&gt; XValueWidth=new ArrayList&lt;&gt;();//画出Y轴最大值的数据private List&lt;Float&gt; mYAxisMax=new ArrayList&lt;&gt;();//画出Y轴最小值的数据private List&lt;Float&gt; mYAxisMin=new ArrayList&lt;&gt;();//设置透明度private int ChartAlpha=0;//圆点的半径private float mRadius=0;//折线的粗细private float StrokeWidth=0;//文字和上下的边的间隔private float marginHeigh=0; 接着就是初始化各个自定义的变量： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263public WeatherLineChart(Context context, AttributeSet attrs, int defStyleAttr) &#123; super(context, attrs, defStyleAttr); //初始化各参数 TypedArray typedArray=context.getTheme().obtainStyledAttributes( attrs,R.styleable.WeatherLineChart,defStyleAttr,0); int numCount=typedArray.getIndexCount(); for(int i=0;i&lt;numCount;i++)&#123; int attr= typedArray.getIndex(i); switch(attr)&#123; case R.styleable.WeatherLineChart_MaxLineColor: MaxLineColor=typedArray.getColor(attr, Color.RED); break; case R.styleable.WeatherLineChart_MinLineColor: MinLineColor=typedArray.getColor(attr,Color.BLUE); break; case R.styleable.WeatherLineChart_CircleTextColor: CircleTextColor=typedArray.getColor(attr,Color.GRAY); break; case R.styleable.WeatherLineChart_CircleTextSize: CircleTextSize=typedArray.getDimensionPixelSize(attr,(int)TypedValue.applyDimension( TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics())); break; case R.styleable.WeatherLineChart_CircleColor: CircleColor=typedArray.getColor(attr,Color.BLACK); break; case R.styleable.WeatherLineChart_ChartAlpha: ChartAlpha=typedArray.getInt(attr,220); break; &#125; &#125; typedArray.recycle(); float density=getResources().getDisplayMetrics().density; mRadius = 3 * density; StrokeWidth=density*3; marginHeigh=density*10; display=((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay(); WrapcontentWidth=display.getWidth(); WrapcontentHight=display.getHeight(); //初始化画线的画笔 LinePaint=new Paint(); LinePaint.setAntiAlias(true); LinePaint.setStyle(Paint.Style.STROKE); LinePaint.setStrokeWidth(StrokeWidth); LinePaint.setAlpha(ChartAlpha); //初始化画圆点的画笔 CirclePaint=new Paint(); CirclePaint.setAntiAlias(true); CirclePaint.setColor(CircleColor); CirclePaint.setAlpha(ChartAlpha); //初始化画字的画笔 TextPaint=new Paint(); TextPaint.setAntiAlias(true); TextPaint.setTextSize(CircleTextSize); TextPaint.setColor(CircleTextColor); TextPaint.setTextAlign(Paint.Align.CENTER); TextPaint.setAlpha(ChartAlpha); &#125; 这的代码虽然有点多，不过都只是一些初始化的操作而已，所以看起来也不会很复杂。而最重要的代码段当然是绘制View的onDraw()方法。代码如下： 123456789101112131415161718protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); ChartHeight=getHeight(); ChartWidth=getWidth(); if(XValueWidth!=null&amp;&amp;mYAxisMax!=null&amp;&amp;mYAxisMin!=null)&#123; XValueWidth.clear(); mYAxisMax.clear(); mYAxisMin.clear(); &#125; //初始化X轴的值 initXValueData(); //初始化Y轴的值 initYValueData(); //画出最大值的线 DrawLine(canvas,XValueWidth,mYAxisMax,YValueMax,true); //画出最小值得线 DrawLine(canvas,XValueWidth,mYAxisMin,YValueMin,false); &#125; 这个onDraw()方法最重要的就是底下的四个方法。其中initXValueData()是算出各个点在这个控件的X轴的位置数据，initYValueData()是画出两条线的Y轴的位置数据。剩下的DrawLine()方法就是具体的画出每条折线。接下来，看看initXValueData()方法：1234567891011121314//初始化X轴的值public void initXValueData()&#123; //得到数据的个数 int XNum=YValueMax.size(); //得到距离最左边的距离 float BaseWidth=ChartWidth/(XNum*2); //得到各点之间的间隔 float tempWdith=BaseWidth*2; for(int i=0;i&lt;XNum;i++)&#123; //得到各点的具体X轴坐标 XValueWidth.add(BaseWidth); BaseWidth+=tempWdith; &#125;&#125; 这个方法我注释已经很清楚了，就是得到第一个点到最左边的距离(BaseWidth)。而各个点之间的距离是BaseWidth的两倍，进而就可以得到每个点的X轴的坐标数据。然后就是initYValueData(),代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//初始化Y轴的值public void initYValueData()&#123; //获取最大值 float tempMax=YValueMax.get(0); //获取最小值 float tempMin=YValueMax.get(0); //算出最高温度的最大值的最小值 for(int i=1;i&lt;YValueMax.size();i++)&#123; if(tempMax&lt;YValueMax.get(i))&#123; tempMax=YValueMax.get(i); &#125; if(tempMin&gt;YValueMax.get(i))&#123; tempMin=YValueMax.get(i); &#125; &#125; //和最高温度的最大值和最小值比较进而得到所有数据的最大值和最小值 for(int i=1;i&lt;YValueMin.size();i++)&#123; if(tempMax&lt;YValueMin.get(i))&#123; tempMax=YValueMin.get(i); &#125; if(tempMin&gt;YValueMin.get(i))&#123; tempMin=YValueMin.get(i); &#125; &#125; //温差 float parts=tempMax-tempMin; //y轴一端到控件一端的距离 float length = CircleTextSize+mRadius+marginHeigh; //y轴高度 float yAxisHeight = ChartHeight-length*2; if(parts==0)&#123; //都为零没有温差 for(int i=0;i&lt;YValueMax.size();i++)&#123; mYAxisMax.add((float) (ChartHeight/2)); mYAxisMin.add((float) (ChartHeight/2)); &#125; &#125;else&#123; //有温差 float partVlaue=yAxisHeight/parts; //最小高度值 for(int i=0;i&lt;YValueMax.size();i++)&#123; //具体的Y轴坐标数据 mYAxisMax.add(ChartHeight-partVlaue*(YValueMax.get(i)-tempMin)-length); mYAxisMin.add(ChartHeight-partVlaue*(YValueMin.get(i)-tempMin)-length); &#125; &#125;&#125; 初始化Y轴的坐标数据时略显复杂。总的思路就是首先的得到上下两个折线总的数据的最大值和最小值。即tempMax和tampMin分别是总数据的最大值和最小值。最大值和最小值的相减即可得到温差。因为两条折线的上下是有文字显示每个点的，所以实际的Y轴的高度是整个View的高度减去文字大小和原点半径和设置的间隔。即//y轴一端到控件一端的距离 float length = CircleTextSize+mRadius+marginHeigh; //y轴高度 float yAxisHeight = ChartHeight-length*2;这段代码的意思。当温差(parts)等于0时，即各点温度都是一样的时候，两条折线是显示在整个View的中间的。否则是有温差情况，高度除于温差得到最小的高度值float partVlaue=yAxisHeight/parts;，然后整个View的高度减去每个实际的温度数据减去最小值再乘以最小的高度值的值在减去底下的文字高度等(length),就是这一点具体的Y轴的高度。上下两条的折线的原理都是一样的，为此就可以得到具体的Y轴的位置数值。 其实大部分代码都是在初始化数据，等数据初始化完之后就是画图的阶段了，代码如下： 123456789101112131415161718192021//画图 public void DrawLine(Canvas canvas,List&lt;Float&gt; XValue,List&lt;Float&gt; mYAxis,List&lt;Float&gt; YValue,boolean top)&#123; for(int i=0;i&lt;XValue.size();i++)&#123; if(top)&#123; //画具体温度数据 LinePaint.setColor(MaxLineColor); canvas.drawText(YValue.get(i)+&quot;&quot;,XValue.get(i),mYAxis.get(i)-mRadius,TextPaint); &#125;else&#123; LinePaint.setColor(MinLineColor); //画具体温度数据 canvas.drawText(YValue.get(i)+&quot;&quot;,XValue.get(i),mYAxis.get(i)+CircleTextSize+mRadius,TextPaint); &#125; if(i!=XValue.size()-1)&#123; //画每两点之间的连线 canvas.drawLine(XValue.get(i),mYAxis.get(i),XValue.get(i+1),mYAxis.get(i+1),LinePaint); &#125; //画每一点的原点 canvas.drawCircle(XValue.get(i),mYAxis.get(i),mRadius,CirclePaint); &#125; &#125; 其中top参数假如是true的话代表的是上面一条折线，false的画代表的是下面的一条折线图。其实只要得到上面的各个点的X,Y轴坐标的数据之后剩下的只是用Canvas进行画线，画点和画文字，具体的看代码注释，注释已经写得很清楚了。 最后奉上源码。","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/tags/Android自定义控件/"}]},{"title":"模仿QQ运动item的界面","slug":"模仿QQ运动item的界面","date":"2016-09-25T14:42:00.000Z","updated":"2017-04-29T16:44:07.348Z","comments":true,"path":"2016/09/25/模仿QQ运动item的界面/","link":"","permalink":"http://jack921.win/2016/09/25/模仿QQ运动item的界面/","excerpt":"首先按照老规矩，无图无真相嘛，先看看先：","text":"首先按照老规矩，无图无真相嘛，先看看先： 是不是很像呢，那具体是实现是怎样的呢，即使概括的来说就是1.计算各个变量的值(记得是会随整个View的大小变化而变化)。2其次利用好canvas.translate()这个方法，计算好大小移动canvas的原点。3最后就是调用api提供的各种方法画图就是了。这么说是不是太过于简略了呢，好，现在就来 看看那具体的吧。首先看看xml有什么参数吧123456789101112131415&lt;com.example.jack.besselcurve.BesselCurveView android:id=&quot;@+id/besselCurveView&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:background=&quot;#ffffff&quot; android:layout_centerHorizontal=&quot;true&quot; app:besselColor=&quot;@color/besselColor&quot; app:besselColorText=&quot;@color/besselColorText&quot; app:friendAverageStep=&quot;6752&quot; app:averageStep=&quot;2603&quot; app:champion=&quot;Jack&quot; app:allStep=&quot;8765&quot; app:time=&quot;17:26&quot; app:ranking=&quot;15&quot;&gt;&lt;/com.example.jack.besselcurve.BesselCurveView&gt; 各参数对应的解释如下：1234567891011121314//时间 private String time; //所有步数 private int allStop; //还有平均步数 private int friendAverageStep; //平均步数 private int averageStep; //排名 private String ranking; //头像 private Bitmap champion_icon; //冠军名字 private String champion; 接着代码段初始化所有参数: 123456789101112131415161718192021222324252627282930TypedArray mTypedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.BesselCurveView,defStyleAttr,0); int numCount=mTypedArray.getIndexCount(); for(int i=0;i&lt;numCount;i++)&#123; int attr=mTypedArray.getIndex(i); switch(attr)&#123; case R.styleable.BesselCurveView_allStep: allStop=mTypedArray.getInt(attr,0); break; case R.styleable.BesselCurveView_averageStep: averageStep=mTypedArray.getInt(attr,0); break; case R.styleable.BesselCurveView_friendAverageStep: friendAverageStep = mTypedArray.getInt(attr,0); break; case R.styleable.BesselCurveView_time: time=mTypedArray.getString(attr); break; case R.styleable.BesselCurveView_ranking: ranking=mTypedArray.getString(attr); break;case R.styleable.BesselCurveView_champion: champion=mTypedArray.getString(attr); break; case R.styleable.BesselCurveView_besselColor: mBesselCurveColor=mTypedArray.getColor(attr,Color.BLUE); break; case R.styleable.BesselCurveView_besselColorText: besselColorText=mTypedArray.getColor(attr,Color.GRAY); break; &#125;&#125; 这些都是每个自定义都有的相当于模板，来初始化参数，都看的明白吧。接下来也很简单，就是初始化画笔等变量，以便于后面看画图更简单： 123456789101112131415161718192021222324252627282930313233public void initValue()&#123; animSet=new AnimatorSet(); //外圆的画笔 mCirclePaint=new Paint(Paint.ANTI_ALIAS_FLAG);mCirclePaint.setStyle(Paint.Style.STROKE); mCirclePaint.setStrokeWidth(radius/10); mCirclePaint.setStrokeJoin(Paint.Join.ROUND);mCirclePaint.setStrokeCap(Paint.Cap.ROUND); mCirclePaint.setAntiAlias(true); //中间的文字的画笔 mCenterTextPaint=new Paint(); mCenterTextPaint.setColor(mBesselCurveColor); mCenterTextPaint.setTextSize(radius/5); mCenterTextPaint.setAntiAlias(true); //除中间之外的文字的画笔 mTextPaint=new Paint(); mTextPaint.setAntiAlias(true); //最低下的矩形 mBottomRectPaint=new Paint(Paint.ANTI_ALIAS_FLAG);mBottomRectPaint.setColor(mBesselCurveColor); mBottomRectPaint.setAntiAlias(true); //虚线的画笔 mDottedLinePaint = new Paint(); mDottedLinePaint.setAntiAlias(true); mDottedLinePaint.setStyle(Paint.Style.STROKE); mDottedLinePaint.setStrokeWidth(2); mDottedLinePaint.setColor(mBesselCurveColor); mDottedLinePaint.setPathEffect(new DashPathEffect(new float[]&#123;5,5&#125;,1)); //画波浪线画笔 WavylinesPaint=new Paint(); WavylinesPaint = new Paint(Paint.ANTI_ALIAS_FLAG); WavylinesPaint.setColor(wavyColor); WavylinesPaint.setStyle(Paint.Style.FILL_AND_STROKE); //虚线的画线 mDottedLinePath=new Path(); //画波浪线画线 WavyLinePath=new Path(); //底下更多的画线 morePath=new Path(); mWaveCount = (int) Math.round(widthView / mWaveLength + 1.5);marginBottomText=radius/4; &#125; 好了，最重要的初始化都差不多了，现在就来画图(画画)吧先贴出所有画的代码然后再逐一讲解吧：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127protected void onDraw(Canvas canvas) &#123; super.onDraw(canvas); canvas.save(); canvas.translate(widthView/2,(heightView*((float)2/3))/2); //画内圆圈 mCirclePaint.setColor(besselColorText); RectF mCircleRectF=new RectF(-radius,-radius,radius,radius); canvas.drawArc(mCircleRectF,120,300,false,mCirclePaint); //画外圆圈 mCirclePaint.setColor(mBesselCurveColor); canvas.drawArc(mCircleRectF,120,mCircleNum,false,mCirclePaint); //画中间的文字 Rect mCenterRect=new Rect(); String tempAllStop=mCenterNum+&quot;&quot;; mCenterTextPaint.getTextBounds(tempAllStop,0,tempAllStop.length(),mCenterRect); int halfWidthText=(mCenterRect.right-mCenterRect.left)/2; int halfHeightText=(mCenterRect.bottom-mCenterRect.top)/2; canvas.drawText(tempAllStop,-halfWidthText,halfHeightText,mCenterTextPaint); //画上边的文字 mTextPaint.setColor(besselColorText); mTextPaint.setTextSize(radius/6); String tempFriendAverageStep=stringTemplate(R.string.besselTime,time); Rect mTopRect=new Rect(); mTextPaint.getTextBounds(tempFriendAverageStep,0,tempFriendAverageStep.length(),mTopRect); int halfTopWidthText=(mTopRect.right-mTopRect.left)/2; canvas.drawText(tempFriendAverageStep,-halfTopWidthText,-(halfHeightText+marginText),mTextPaint); //画下边的文字 String tempAverageStep=stringTemplate(R.string.friendAverageStep,friendAverageStep+&quot;&quot;); Rect mBottomRect=new Rect(); mTextPaint.getTextBounds(tempAverageStep,0,tempAverageStep.length(),mBottomRect); int halfBottomWidthText=(mBottomRect.right-mBottomRect.left)/2; int mBottomHeightText=(mBottomRect.bottom-mBottomRect.top); canvas.drawText(tempAverageStep,- halfBottomWidthText,mBottomHeightText+halfHeightText+marginText,mTextPaint); //画排名 Rect mNumRect=new Rect(); mCenterTextPaint.getTextBounds(ranking,0,ranking.length(),mNumRect); int halfNum=(mNumRect.right-mNumRect.left)/2; mCenterTextPaint.setTextSize(40); canvas.drawText(ranking,- halfNum,radius,mCenterTextPaint); String rankingLeft=getContext().getResources().getString(R.string.ranking_left); mTextPaint.getTextBounds(rankingLeft,0,rankingLeft.length(),mNumRect); canvas.drawText(rankingLeft,-halfNum-(mNumRect.right- mNumRect.left)/2-20,radius,mTextPaint); canvas.drawText(getContext().getResources().getString(R.string.ranking_right),halfNum+10,radius,mTextPaint); canvas.restore(); //画最近七天和平均运动 mTextPaint.setTextSize(radius/9); canvas.save(); canvas.translate(0,heightView*((float)2/3)); canvas.drawText(getContext().getResources().getString(R.string.nextSevenDay),marginLi neChart,0,mTextPaint); Rect mPercentRect=new Rect(); String mPercentText=stringTemplate(R.string.averageStep,averageStep+&quot;&quot;); mTextPaint.getTextBounds(mPercentText,0,mPercentText.length(),mPercentRect); canvas.drawText(mPercentText,widthView-marginLineChart-(mPercentRect.right- mPercentRect.left),0,mTextPaint); //画虚线 mDottedLinePath.moveTo(marginLineChart,marginBottomText); mDottedLinePath.lineTo(widthView-marginLineChart,marginBottomText); canvas.drawPath(mDottedLinePath,mDottedLinePaint); //画7天数据柱状图 mTextPaint.setTextSize(radius/9); int lineWidth=(widthView-marginLineChart*2)/8; mCalendar.setTime(new Date()); RectF mRecf=null; if(mListStep.size()&gt;0)&#123; for(int i=mListStep.size();i&gt;=1;i--)&#123; if(mListStep.get(i-1)!=0)&#123; int startX=marginLineChart+lineWidth*i-radius/23; int endX=marginLineChart+lineWidth*i+radius/23; if(mListStep.get(i-1)&gt;mStandardStop)&#123; //达标 mTextPaint.setColor(mBesselCurveColor); int exceed=mListStep.get(i-1)-mStandardStop; float standard=(float) (mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop))); mRecf=new RectF(startX,marginBottomText-(standard&gt;mCircleRectHeight?mCircleRectHeight:standard) ,endX,marginBottomText+mCircleRectHeight); canvas.drawRoundRect(mRecf,50,50,mTextPaint); &#125;else&#123; //不达标 mTextPaint.setColor(besselColorText); float noStandard=(float)(mCircleRectHeight*Double.valueOf(mListStep.get(i-1)/Double.valueOf(mStandardStop))); mRecf=new RectF(startX,marginBottomText,endX,marginBottomText+( noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard)); canvas.drawRoundRect(mRecf,50,50,mTextPaint); &#125; &#125; //画底下的日期 mTextPaint.setColor(besselColorText); mCalendar.set(Calendar.DAY_OF_MONTH,mCalendar.get(Calendar.DAY_OF_MONTH)-1); Rect rect =new Rect(); String number=stringTemplate(R.string.day,mCalendar.get(Calendar.DAY_OF_MONTH)+&quot;&quot;); mTextPaint.getTextBounds(number,0,number.length(),rect); canvas.drawText(number,(marginLineChart+lineWidth*i)-(rect.right-rect.left)/2,marginBottomText+70,mTextPaint); &#125; &#125; canvas.restore(); //画波浪图形 canvas.save(); float mWavyHeight=heightView*((float)4/5)+50; canvas.translate(0,mWavyHeight); WavyLinePath.reset(); WavyLinePath.moveTo(-mWaveLength+ mOffset,0); int wHeight=radius/5; for(int i=0;i&lt;mWaveCount;i++)&#123; WavyLinePath.quadTo((-mWaveLength*3/4)+(i*mWaveLength)+mOffset,wHeight,(-mWaveLength/2)+(i*mWaveLength)+mOffset,0); WavyLinePath.quadTo((-mWaveLength/4)+(i * mWaveLength)+mOffset,- wHeight,i*mWaveLength+mOffset,0); &#125; WavyLinePath.lineTo(widthView,heightView-mWavyHeight); WavyLinePath.lineTo(0,heightView-mWavyHeight); WavyLinePath.close(); canvas.drawPath(WavyLinePath,WavylinesPaint); canvas.restore(); //画最低的信息 float removeHeight=mWavyHeight+(radius/5); canvas.translate(0,removeHeight); float rectHeight=heightView-removeHeight; //画底下的矩形 RectF rect = new RectF(0,0,widthView,rectHeight); canvas.drawRect(rect,mBottomRectPaint); //画头像 int bitmap_icon_x=radius/5; float centerHeight=rectHeight/2; Bitmap bitmap_icon=getRoundCornerImage(champion_icon,50,radius/5,radius/5); canvas.drawBitmap(bitmap_icon,bitmap_icon_x,centerHeight- bitmap_icon.getHeight()/2,null); mTextPaint.setColor(Color.WHITE); mTextPaint.setTextSize(radius/8); //画冠军文字 int champion_x=radius/2; Rect mNameRect=new Rect(); String championMame=stringTemplate(R.string.champion,champion); mTextPaint.getTextBounds(championMame,0,championMame.length(),mNameRect); canvas.drawText(championMame,champion_x,(rectHeight+(mNameRect.bottom-mNameRect.top))/2,mTextPaint); //画查看 String look=getContext().getResources().getString(R.string.check); mTextPaint.getTextBounds(look,0,look.length(),mNameRect); canvas.drawText(look,widthView-(radius*(float)2/3),(rectHeight+(mNameRect.bottom-mNameRect.top))/2,mTextPaint); //画更多图像 float morePoint=(radius*(float)2/3)/2; canvas.drawLine(widthView-morePoint,centerHeight-(mNameRect.bottom- mNameRect.top)/2, widthView-morePoint+15,centerHeight,mTextPaint); canvas.drawLine(widthView-morePoint+15,centerHeight,widthView-morePoint, centerHeight+(mNameRect.bottom-mNameRect.top)/2,mTextPaint); &#125; 代码是不是有点多呢，没办法画的东西本身就有点多了。好了刚开始我说要移动canvas的原点是不是,你看刚开始就移动了吧： 123super.onDraw(canvas);canvas.save();canvas.translate(widthView/2,(heightView*((float)2/3))/2); 1、移动原点到整个圆弧的中心，其中widthView是整个view的宽，heightView是整个view的高,如下图: 就在上图的蓝色点就是现在的原点。然后在这原点里画圆弧呗，代码如下1234567 //画内圆圈 mCirclePaint.setColor(besselColorText); RectF mCircleRectF=new RectF(-radius,-radius,radius,radius); canvas.drawArc(mCircleRectF,120,300,false,mCirclePaint); //画外圆圈 mCirclePaint.setColor(mBesselCurveColor); canvas.drawArc(mCircleRectF,120,mCircleNum,false,mCirclePaint); mCircleNum是为了实现动画效果的，这后面会讲，这样圆弧就画完了。效果也是如上图。2.在中心点再画今天的走的总路程，代码如下：1234567 //画中间的文字 Rect mCenterRect=new Rect(); String tempAllStop=mCenterNum+&quot;&quot;; mCenterTextPaint.getTextBounds(tempAllStop,0,tempAllStop.length(),mCenterRect);int halfWidthText=(mCenterRect.right-mCenterRect.left)/2; int halfHeightText=(mCenterRect.bottom-mCenterRect.top)/2; canvas.drawText(tempAllStop,-halfWidthText,halfHeightText,mCenterTextPaint); 基本的实现思路是用Rect在这个类计算出你要画文字的大小，然后在原点画，不过，记得这里的x,y点是在原点的左下，具体详解看这里写链接内容接这就是画时间和好友平均步数，其实实现原理也是一样的，只不过在上面的高度是1canvas.drawText(tempFriendAverageStep,-halfTopWidthText,-(halfHeightText+marginText),mTextPaint); 是中心总步数高度的一半再加间隔，而下面的是：1canvas.drawText(tempAverageStep,-halfBottomWidthText,mBottomHeightText+halfHeightText+marginText,mTextPaint); 是下面文字总的高度再加上中心总步数高度的一半再加间隔。现在效果如下图： 接着就是画排名，首先还是套路：12345Rect mNumRect=new Rect(); mCenterTextPaint.getTextBounds(ranking,0,ranking.length(),mNumRect); int halfNum=(mNumRect.right-mNumRect.left)/2; mCenterTextPaint.setTextSize(40); canvas.drawText(ranking,-halfNum,radius,mCenterTextPaint); 计算出排名文字的大小，然后在中心原点x轴为排名文字的一半，y轴问为半径画出排名，效果图如下： 接着就在排名的两端画文字就行了，带代码如下：1234String rankingLeft=getContext().getResources().getString(R.string.ranking_left); mTextPaint.getTextBounds(rankingLeft,0,rankingLeft.length(),mNumRect); canvas.drawText(rankingLeft,-halfNum-(mNumRect.right-mNumRect.left)/2-20,radius,mTextPaint); canvas.drawText(getContext().getResources().getString(R.string.ranking_right),halfNum+10,radius,mTextPaint); 思路还是一样，就不说了。此时效果 画底下柱状图是，首先用canvas.restore();恢复原点到(0,0)的状态，再用canvas.translate(0,heightView*((float)2/3));把原点移动到圆弧的下面，接着又可以继续画,实现思路和前面一样： 123456789101112//画最近七天和平均运动 mTextPaint.setTextSize(radius/9); canvas.save(); canvas.translate(0,heightView*((float)2/3)); canvas.drawText(getContext().getResources().getString(R.string.nextSevenDay),marginLineChart,0,mTextPaint); Rect mPercentRect=new Rect(); String mPercentText=stringTemplate(R.string.averageStep,averageStep+&quot;&quot;); mTextPaint.getTextBounds(mPercentText,0,mPercentText.length(),mPercentRect); canvas.drawText(mPercentText,widthView-marginLineChart-(mPercentRect.right-mPercentRect.left),0,mTextPaint); //画虚线 mDottedLinePath.moveTo(marginLineChart,marginBottomText); mDottedLinePath.lineTo(widthView-marginLineChart,marginBottomText); canvas.drawPath(mDottedLinePath,mDottedLinePaint); 此时效果如下： 接下来画柱状图，首先int lineWidth=(widthView-marginLineChart*2)/8;计算出每个点之间的间隔 12345678910111213141516171819202122232425262728293031if(mListStep.size()&gt;0)&#123; for(int i=mListStep.size();i&gt;=1;i--)&#123; if(mListStep.get(i-1)!=0)&#123; //计算出起始点X和终点X的值 int startX=marginLineChart+lineWidth*i-radius/23; int endX=marginLineChart+lineWidth*i+radius/23; if(mListStep.get(i-1)&gt;mStandardStop)&#123; //达标 mTextPaint.setColor(mBesselCurveColor); //超出的部分 int exceed=mListStep.get(i-1)-mStandardStop; //算出柱体大小 float standard=(float) (mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop))); mRecf=new RectF(startX,marginBottomText-(standard&gt;mCircleRectHeight?mCircleRectHeight:standard) ,endX,marginBottomText+mCircleRectHeight); canvas.drawRoundRect(mRecf,50,50,mTextPaint); &#125;else&#123; //不达标 mTextPaint.setColor(besselColorText); //算出不达标柱体的大小 float noStandard=(float)(mCircleRectHeight*Double.valueOf(mListStep.get(i-1)/Double.valueOf(mStandardStop))); mRecf=new RectF(startX,marginBottomText,endX,marginBottomText+( noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard)); canvas.drawRoundRect(mRecf,50,50,mTextPaint); &#125;&#125; //画底下的日期 mTextPaint.setColor(besselColorText); mCalendar.set(Calendar.DAY_OF_MONTH,mCalendar.get(Calendar.DAY_OF_MONTH)-1); Rect rect =new Rect(); String number=stringTemplate(R.string.day,mCalendar.get(Calendar.DAY_OF_MONTH)+&quot;&quot;); mTextPaint.getTextBounds(number,0,number.length(),rect); canvas.drawText(number,(marginLineChart+lineWidth*i)-(rect.right-rect.left)/2,marginBottomText+70,mTextPaint); &#125; &#125; mStandardStop是达标的数据，当数据小于mStandardStop就是不达标，所以柱状图就要画在虚线的下面，mCircleRectHeight是柱状图一半的高float standard=(float)(mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop)));这句代码是计算出下面圆柱体的具体大小，noStandard&gt;mCircleRectHeight?mCircleRectHeight:noStandard当，但柱状图大于mCircleRectHeight时就用mCircleRectHeight不然就根据计算的数值来。当数据大于mStandardStop时，int exceed=mListStep.get(i-1)-mStandardStop;float standard=(float)(mCircleRectHeight*Double.valueOf(exceed/Double.valueOf(mStandardStop)));exceed是计算出超出的部分，再拿超出的部分算出具体的大小，剩下的和小于的一样，当standard大于最大的mCircleRectHeight是就用mCircleRectHeight否则就用standard。底下日期是用Calendar得到前7天的日期再循环的画上去，思路和上面一样不再赘述。此时效果如下: 接下来是画波浪，画波浪是用了贝塞尔曲线的方法画的，如果不懂贝塞尔曲线请参考这里写链接内容，这也是我学贝塞尔曲线参考的内容。首先我们又把canvas恢复到原点canvas.restore();再用float mWavyHeight=heightView*((float)4/5)+50; canvas.translate(0,mWavyHeight);移动这个位置，是为了适配。 12345678910WavyLinePath.reset(); WavyLinePath.moveTo(-mWaveLength+ mOffset,0); int wHeight=radius/5; for(int i=0;i&lt;mWaveCount;i++)&#123; WavyLinePath.quadTo((-mWaveLength*3/4)+(i*mWaveLength)+mOffset,wHeight,(-mWaveLength/2)+(i*mWaveLength)+mOffset,0); WavyLinePath.quadTo((-mWaveLength/4)+(i * mWaveLength)+mOffset,-wHeight,i*mWaveLength+mOffset,0); &#125; WavyLinePath.lineTo(widthView,heightView-mWavyHeight); WavyLinePath.lineTo(0,heightView-mWavyHeight); WavyLinePath.close(); canvas.drawPath(WavyLinePath,WavylinesPaint); WavyLinePath.quadTo就是贝塞尔曲线调的方法，for循环几次使之形成波浪图形，记得一样要WavyLinePath.lineTo().不让会出现底下有些地方会画不到。原理是向上定一个控制点有向下定一个控制点使之形成一个sin函数图形。具体请学贝塞尔曲线。此时效果图: 最后就是画底下的矩形和头像和文字了。最值得讲的是头像我一开始的设想的传Url的，不过这样子又要做网络方面的代码工作，这样子会破怀类的功能单一性原则，所以最后我实在外部传一个位图，在位图进行处理使其圆角。剩下的只是画文字而已，上面已经讲够多了，就不在讲了。对了，最后还有一个刚开始的动画效果。 12345678910111213141516171819202122public void startAnimator()&#123; ValueAnimator mCircleAminator=ValueAnimator.ofFloat(0f,300f); mCircleAminator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mCircleNum=(float)animation.getAnimatedValue(); postInvalidate(); &#125; &#125;); ValueAnimator mCenterText=ValueAnimator.ofInt(0,allStop); mCenterText.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mCenterNum=(int)animation.getAnimatedValue(); postInvalidate(); &#125; &#125;); ValueAnimator mWavyAnimator = ValueAnimator.ofInt(0, mWaveLength); mWavyAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123; @Override public void onAnimationUpdate(ValueAnimator animation) &#123; mOffset = (int) animation.getAnimatedValue(); postInvalidate(); &#125; &#125;); animSet.setDuration(2000); animSet.playTogether(mCircleAminator,mCenterText,mWavyAnimator); animSet.start(); &#125; //字符串拼接 public String stringTemplate(int template,String content)&#123; return String.format(getContext().getResources().getString(template),content); &#125; 其实也简单通过设置ValueAnimator让它在规定的时间内产生数值的变化，再调用postInvalidate().对View的界面进行刷新即可实现动画效果。 最后给源码好好研究吧源码只有好好看源码才能学到更多东西。","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/tags/Android自定义/"}]},{"title":"高仿支付宝9.9.2版本生活模块界面来讲解CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout","slug":"高仿支付宝9-9-2版本生活模块界面来讲解CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout","date":"2016-09-16T15:52:00.000Z","updated":"2017-04-29T16:43:07.300Z","comments":true,"path":"2016/09/16/高仿支付宝9-9-2版本生活模块界面来讲解CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout/","link":"","permalink":"http://jack921.win/2016/09/16/高仿支付宝9-9-2版本生活模块界面来讲解CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout/","excerpt":"","text":"首先先看看仿制的效果先，如下图：是不是很像支付宝的效果呢，我们今天就要通过讲解android5.0新出的控件CoordinatorLayout，AppBarLayout，CollapsingToolbarLayout来实现这个效果。 在讲解之前先看看界面布局文件，在一个一个讲讲怎么实现吧：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; xmlns:tools=&quot;http://schemas.android.com/tools&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot; tools:context=&quot;com.example.jack.coordinatorlayouttest.ScrollingActivity&quot;&gt; &lt;android.support.design.widget.AppBarLayout android:id=&quot;@+id/app_bar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:fitsSystemWindows=&quot;true&quot; android:theme=&quot;@style/AppTheme.AppBarOverlay&quot;&gt; &lt;android.support.design.widget.CollapsingToolbarLayout android:id=&quot;@+id/toolbar_layout&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:fitsSystemWindows=&quot;true&quot; app:contentScrim=&quot;@color/color1984D1&quot; app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed|snap&quot; app:title=&quot; &quot;&gt; &lt;include layout=&quot;@layout/shenghuo_head1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; android:layout_marginTop=&quot;100dp&quot; android:layout_marginBottom=&quot;25dp&quot; app:layout_collapseMode=&quot;parallax&quot; app:layout_collapseParallaxMultiplier=&quot;0.8&quot;/&gt; &lt;android.support.v7.widget.Toolbar android:id=&quot;@+id/toolbar&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;?attr/actionBarSize&quot; app:contentInsetLeft=&quot;0dp&quot; app:contentInsetStart=&quot;0dp&quot; app:layout_collapseMode=&quot;pin&quot;&gt; &lt;include android:id=&quot;@+id/toolbar1&quot; layout=&quot;@layout/toolbar_head1&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; /&gt; &lt;include android:id=&quot;@+id/toolbar2&quot; layout=&quot;@layout/toolbar_head2&quot; android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot; android:visibility=&quot;gone&quot;/&gt; &lt;/android.support.v7.widget.Toolbar&gt; &lt;/android.support.design.widget.CollapsingToolbarLayout&gt; &lt;/android.support.design.widget.AppBarLayout&gt; &lt;include layout=&quot;@layout/content_scrolling&quot; /&gt;&lt;/android.support.design.widget.CoordinatorLayout&gt;``` 1.CoordinatorLayout-------------------这就是整个高仿支付宝界面的核心布局界面的，看看代码量也不多吧，只要就是用了CoordinatorLayout，AppBarLayout，CollapsingToolbarLayou，Toolbar这四个控件吧。在各个布局文件里，最外围的是CoordinatorLayout这个控件，这个有什么作用呢，就我的大白话来说就是协调子View之间动作的一个父View,通过Behavior来给子view实现交互的。这样好像还是有点说不通，没关系同学们通过看上面的布局文件，可以发现![img1.PNG](http://upload-images.jianshu.io/upload_images/925576-c0d4b0b05a2d78c4.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这一个内容界面是的布局是`&lt;include layout=&quot;@layout/content_scrolling&quot; /&gt;`这一句的内容是： &lt;?xml version=”1.0” encoding=”utf-8”?&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111没错就是一个linearLayout包裹着RecyclerView组成他的内容界面，在这代码里有这一句`app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;`就是这句和CoordinatorLayout控件互动实现滑动，总结就是CoordinatorLayout控件和app:layout_behavior来进行互动，进而CoordinatorLayout的子控件和app:layout_behavior互动。当然`@string/appbar_scrolling_view_behavior`是系统自带的，本质是一个类，我们也可以自定义这个类实现其他效果，不过这不是我们这一章所讲的了，我们点到即止。2.AppBarLayout--------------其次就是AppBarLayout，去除官方解释，简单来说就是它可以让你定制当某个可滚动View的滚动手势发生变化时，其内部的子View实现何种动作。内部的子View通过在布局中加`app:layout_scrollFlags`设置执行的动作。而layout_srcollFlags的动作主要如下： 1. scroll:值设为scroll的View会跟随滚动事件一起发生移动。 2. enterAlways:值设为enterAlways的View,当ScrollView往下滚动时，该View会直接往下滚动。而不用考虑ScrollView是否在滚动。 3. exitUntilCollapsed：值设为exitUntilCollapsed的View，当这个View要往上逐渐“消逝”时，会一直往上滑动，直到剩下的的高度达到它的最小高度后，再响应ScrollView的内部滑动事件。 4. enterAlwaysCollapsed：是enterAlways的附加选项，一般跟enterAlways一起使用，它是指，View在往下“出现”的时候，首先是enterAlways效果，当View的高度达到最小高度时，View就暂时不去往下滚动，直到ScrollView滑动到顶部不再滑动时，View再继续往下滑动，直到滑到View的顶部结束。这是layout_srcollFlags里可以设置的各个属性的解释，考虑文章的重点是模仿支付宝所以没有篇幅和每个属性都给个效果图，所以各属性你们有空还要自己试一试，这样子才能掌握更好。我们这里AppBarLayout关联的是CollapsingToolbarLayout，设置的属性是`app:layout_scrollFlags=&quot;scroll|exitUntilCollapsed|snap&quot;`里面的scroll让![img2.PNG](http://upload-images.jianshu.io/upload_images/925576-6e3b6f5ce24552c7.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这可以滑动，而exitUntilCollapsed实现的效果是![img4.PNG](http://upload-images.jianshu.io/upload_images/925576-0a588d76add2a59f.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)这一块当滑动到最顶的时候不会跟这个继续滑到最顶，而保留这一块。最后snap这是属性是子View不会存在局部显示的情况，滚动Child View的部分高度，当我们松开手指时，Child View要么向上全部滚出屏幕，要么向下全部滚进屏幕。3.CollapsingToolbarLayout-------------------------是用来对Toolbar进行再次包装的ViewGroup，主要是用于实现折叠的App Bar效果。CollapsingToolbarLayout只要有这方面：1.title展开时是最大的，然后随着收缩会越来越少，直到屏幕的顶部，通过app:title设置title,不然就默认。2.通过setContentScrim(Drawable)来设置达到某一个状态之后的出现的效果3.通过setStatusBarScrim(Drawable)来设置达到某一个状态之后的状态栏出现的效果4.当`app:layout_collapseMode设为parallax`子View可以选择在当前的布局当时是否以“视差”的方式来跟随滚动5.当`app:layout_collapseMode设为pin`Toolbar固定位置而不受移动的影响在我们实现这里，我们把`layout=&quot;@layout/shenghuo_head1&quot;`即![img4.PNG](http://upload-images.jianshu.io/upload_images/925576-9138e387abbc552c.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)设为`app:layout_collapseMode=&quot;parallax&quot;`让它以“视差”的方式来跟随滚动，而toolbar设为`app:layout_collapseMode=&quot;pin&quot;`以让他固定不动。4.Toolbar动态变化-------------在此整体布局就已经完成，不过还有一个效果就是向上移动是toolbar的的View是动态变化的，一开始我以为这些控件会有这个功能吧，没想到找了很久都没找到，没办法只能自己实现了。二话不说上代码：``` private AppBarLayout mAppBarLayout=null; private View mToolbar1=null; private View mToolbar2=null; private ImageView mZhangdan=null;private TextView mZhangdan_txt=null; private ImageView mTongxunlu=null; private ImageView mJiahao=null; private ImageView mZhangdan2=null; private ImageView mShaoyishao=null; private ImageView mSearch=null; private ImageView mZhaoxiang=null; private RecyclerView myRecyclerView; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_scrolling);myRecyclerView=(RecyclerView)findViewById(R.id.myRecyclerView);myRecyclerView.setLayoutManager(new LinearLayoutManager(this)); myRecyclerView.setAdapter(new ToolbarAdapter(this)); mAppBarLayout=(AppBarLayout)findViewById(R.id.app_bar); mToolbar1=(View)findViewById(R.id.toolbar1); mToolbar2=(View)findViewById(R.id.toolbar2);mZhangdan=(ImageView)findViewById(R.id.img_zhangdan); mZhangdan_txt=(TextView)findViewById(R.id.img_zhangdan_txt); mTongxunlu=(ImageView)findViewById(R.id.tongxunlu);mJiahao=(ImageView)findViewById(R.id.jiahao); mZhangdan2=(ImageView)findViewById(R.id.img_shaomiao); mShaoyishao=(ImageView)findViewById(R.id.img_fukuang); mSearch=(ImageView)findViewById(R.id.img_search); mZhaoxiang=(ImageView)findViewById(R.id.img_zhaoxiang); mAppBarLayout.addOnOffsetChangedListener(new AppBarLayout.OnOffsetChangedListener() &#123; @Override public void onOffsetChanged(AppBarLayout appBarLayout, int verticalOffset) &#123; if (verticalOffset == 0)&#123; //张开mToolbar1.setVisibility(View.VISIBLE);mToolbar2.setVisibility(View.GONE); setToolbar1Alpha(255); &#125; else if (Math.abs(verticalOffset)&gt;=appBarLayout.getTotalScrollRange()) &#123; //收缩 mToolbar1.setVisibility(View.GONE); mToolbar2.setVisibility(View.VISIBLE); setToolbar2Alpha(255); &#125; else &#123; int alpha=255-Math.abs(verticalOffset)-150; if(alpha&lt;=0)&#123; //收缩toolbar mToolbar1.setVisibility(View.GONE); mToolbar2.setVisibility(View.VISIBLE); setToolbar2Alpha(Math.abs(verticalOffset)); &#125;else&#123; //张开toolbar mToolbar1.setVisibility(View.VISIBLE); mToolbar2.setVisibility(View.GONE); setToolbar1Alpha(alpha); &#125; &#125; &#125; &#125;); &#125; //设置展开时各控件的透明度 public void setToolbar1Alpha(int alpha)&#123; mZhangdan.getDrawable().setAlpha(alpha); mZhangdan_txt.setTextColor(Color.argb(alpha,255,255,255)); mTongxunlu.getDrawable().setAlpha(alpha); mJiahao.getDrawable().setAlpha(alpha); &#125; //设置闭合时各控件的透明度 public void setToolbar2Alpha(int alpha)&#123; mZhangdan2.getDrawable().setAlpha(alpha); mShaoyishao.getDrawable().setAlpha(alpha); mSearch.getDrawable().setAlpha(alpha); mZhaoxiang.getDrawable().setAlpha(alpha); &#125; 代码还是有点多了不过最核心就设置AppBarLayout 的监听器addOnOffsetChangedListener来进行效果的处理。当verticalOffset=0的时候即使整个展开的是时候要做的就是显示要显示的，隐藏要隐藏的设置，在设置透明度，同理当verticalOffset等于appBarLayout.getTotalScrollRange()即等于最大值的时候，就是关闭的时候，处理的展开相反。当他在中间值的时候，通过`int alpha=255-Math.abs(verticalOffset)-150;得到要设置的透明度，减去150是为了让效果更明显。当alpha小于0的时候是执行展开的toolbar的透明度效果，反之大于0的时候是闭合时toolbar的透明图效果。 剩下的看源码吧","categories":[{"name":"Android","slug":"Android","permalink":"http://jack921.win/categories/Android/"}],"tags":[{"name":"Android界面","slug":"Android界面","permalink":"http://jack921.win/tags/Android界面/"}]},{"title":"Android自定义钟表","slug":"Android自定义钟表","date":"2016-09-11T15:56:00.000Z","updated":"2017-04-29T16:41:25.904Z","comments":true,"path":"2016/09/11/Android自定义钟表/","link":"","permalink":"http://jack921.win/2016/09/11/Android自定义钟表/","excerpt":"android自定义钟表首先看看效果图先","text":"android自定义钟表首先看看效果图先 然后看看自定义的属性12345678910111213141516&lt;resources&gt; &lt;!--钟表整体颜色--&gt; &lt;attr name=&quot;color&quot; format=&quot;color&quot;/&gt; &lt;!--数字大小--&gt; &lt;attr name=&quot;numSize&quot; format=&quot;dimension&quot;/&gt; &lt;!--中心外圆半径--&gt; &lt;attr name=&quot;inCircle&quot; format=&quot;integer&quot;/&gt; &lt;!--中心内圆半径--&gt; &lt;attr name=&quot;outCircle&quot; format=&quot;integer&quot;/&gt; &lt;declare-styleable name=&quot;ClockView&quot;&gt; &lt;attr name=&quot;numSize&quot;/&gt; &lt;attr name=&quot;color&quot;/&gt; &lt;attr name=&quot;inCircle&quot;/&gt; &lt;attr name=&quot;outCircle&quot;/&gt; &lt;/declare-styleable&gt;&lt;/resources&gt; 12345678910在xml界面的编写&lt;resources&gt;&lt;com.example.jack.clock.widget.ClockView android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;wrap_content&quot; app:color=&quot;@color/colorPrimary&quot; app:inCircle=&quot;15&quot; app:outCircle=&quot;25&quot; app:numSize=&quot;18dp&quot;/&gt;&lt;/resources&gt; 自定义各参数的初始化1234567891011121314151617181920212223242526272829303132333435 public ClockView(Context context) &#123; this(context,null);&#125;public ClockView(Context context, AttributeSet attrs) &#123; this(context, attrs,0);&#125;public ClockView(Context context, AttributeSet attrs, int defStyleAttr)&#123; super(context, attrs, defStyleAttr); display((WindowManager)getContext().getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay(); screemWidth=display.getWidth(); screemHeight=display.getHeight(); float density=getResources().getDisplayMetrics().density; marginLongPoint=(int)density*8; maginShortPoint=(int)density*16; maginRadius=(int)density*10; maginText=(int)density*10; hourMargin=(int)density*75; minuteMargin=(int)density*40; TypedArray typedArray=context.getTheme().obtainStyledAttributes(attrs,R.styleable.ClockView,defStyleAttr,0); int numCount=typedArray.getIndexCount(); for(int i=0;i&lt;numCount;i++)&#123; int attr=typedArray.getIndex(i); switch(attr)&#123; case R.styleable.ClockView_numSize: numSize=typedArray.getDimensionPixelSize(attr,(int)TypedValue .applyDimension(TypedValue.COMPLEX_UNIT_SP,15,getResources().getDisplayMetrics())); break; case R.styleable.ClockView_color: color=typedArray.getColor(attr,Color.BLACK); break; case R.styleable.ClockView_inCircle: inCircle=typedArray.getInt(attr,15); break; case R.styleable.ClockView_outCircle: outCircle=typedArray.getInt(attr,25); break; &#125; &#125; typedArray.recycle(); initCanvas();&#125; 接下来就是设定这个自定义View的大小，在没有大小自适应的时候，view的高度我这位整个手机屏幕高度的三分之一，宽度为整个屏幕的宽度12345678 if(widthModel==MeasureSpec.EXACTLY)&#123; width=widthSize; &#125;else&#123; width=screemWidth; &#125; if(heightModel==MeasureSpec.EXACTLY)&#123; height=heightSize; &#125;else&#123; height=screemHeight/3; &#125; 在onDraw()方法里我们就可以开始画图了1234567891011121314151617181920212223242526@Override protected void onDraw(Canvas canvas) &#123; //得到圆的半径 if(getWidth()&gt;getHeight())&#123; radius=getHeight()/2-maginRadius; &#125;else&#123; radius=getWidth()/2-maginRadius; &#125; //获得View一半的宽度和高度 halfWidth=getWidth()/2; halfHeight=getHeight()/2; //保存状态 canvas.save(); //画大圆 canvas.drawCircle(halfWidth,halfHeight,radius,paint); //画中间大圆 canvas.drawCircle(halfWidth,halfHeight,outCircle,inCirclePaint); //画中间小圆 canvas.drawCircle(halfWidth,halfHeight,inCircle,outCirclePaint); //画60个刻度和时钟数字 drawClockScale(canvas); //绘制时间指针 refreshTime(canvas); //返回状态 canvas.restore(); //每隔一秒刷新 postInvalidateDelayed(1000); &#125; 首先我们画的是外部的圆圈和正中间的半透明的大圆和小圆 ，即得到整个view的中心点也就是一半的宽(halfWidth)和高(halfHeight)画半径为radius的圆 ###代码如下://画大圆canvas.drawCircle(halfWidth,halfHeight,radius,paint);//画中间大圆canvas.drawCircle(halfWidth,halfHeight,outCircle,inCirclePaint); //画中间小圆canvas.drawCircle(halfWidth,halfHeight,inCircle,outCirclePaint); 接着就是要画60个刻度和时钟数字这是整个自定义的难点和重点，不说废话先贴代码： ###画60个刻度和时钟数字123456789101112131415161718192021222324 //画60个刻度 public void drawClockScale(Canvas canvas)&#123; canvas.translate(halfWidth,halfHeight); canvas.save(); //长指针的长 LongCalibration=radius/marginLongPoint; //短指针的长 ShortCalibration=radius/maginShortPoint; for(int i=0;i&lt;pointNum;i++)&#123; if(i%5==0)&#123; //绘画文字 canvas.save(); Rect rect=new Rect(); int number=i==0?12:(i/5); textPaint.getTextBounds((number+&quot;&quot;),0,(number+&quot;&quot;).length(),rect); canvas.translate(0,-radius+LongCalibration+((rect.bottom-rect.top)/2)+maginText); canvas.rotate(-6*i); canvas.drawText(number+&quot;&quot;,0,(rect.bottom-rect.top)/2,textPaint); canvas.restore(); //画线 canvas.drawLine(0,-radius+LongCalibration,0,-radius,paint); &#125;else&#123; canvas.drawLine(0,-radius+ShortCalibration,0,-radius,paint); &#125; canvas.rotate(6); &#125; canvas.restore(); &#125; pointNum=60即60个指针刻度，我们先把canvas的坐标原点移动到整个View的中心即canvas.translate(halfWidth,halfHeight);接着这个圆是360度我们有60个刻度即每个刻度的旋转角度为6度，所以我们每一次循环都要把canvas旋转6度即canvas.rotate(6)。理解这个之后我们每次循环通过canvas.drawline画出刻度，其中LongCalibration是长刻度的长，而ShortCalibration就是短刻度的长， 1canvas.drawLine(0,-radius+LongCalibration,0,-radius,paint); 即旋转画出X轴Y轴为(0,-radius+LongCalibration)和(0,-radius)这两点的直线。接着就是画文字了，首先Rect计算出显示的数字的大小，再把canvas的原点移动半径减去刻度的长度和数字一半大小，自定义的间隙之后的距离，此时原点的位置就是需要画出的数字的位置，canvas在旋转-6*i的距离才能使字体竖直，效果如下： ###绘制时间指针123456789101112131415161718192021222324//获取时间指针对应的角度 public void refreshTime(Canvas canvas)&#123; //获取获取当前的时间 Calendar mCalendar=Calendar.getInstance(); int tempHour=mCalendar.get(Calendar.HOUR); int tempMinute=mCalendar.get(Calendar.MINUTE); int tempSecond=mCalendar.get(Calendar.SECOND); int hourRotate=new Float(360*((float)tempHour/12)).intValue(); //计算出份指针的旋转的角度 int minuteRotate=new Float(360*((float)tempMinute/60)).intValue(); //计算出时指针旋转的角度，注(时的角度是当前小时的角度再加分钟所引起小时偏转的角度) hourRotate+=new Float(30*((float)minuteRotate/360)).intValue(); //计算出秒指针旋转的角度 int secondRotate=new Float(360*((float)tempSecond/60)).intValue(); drawCircleLine(canvas,hourRotate,minuteRotate,secondRotate); &#125; //时间指针 public void drawCircleLine(Canvas canvas,int hour,int minute,int second)&#123; marginLong=radius-LongCalibration-minuteMargin; marginShort=radius-LongCalibration-hourMargin; canvas.rotate(180); //画小时指针 RectF hourRectF=new RectF(-pointRadio,-pointRadio,pointRadio,marginShort); canvas.save(); canvas.rotate(hour); canvas.drawRoundRect(hourRectF,circular,circular,outCirclePaint); canvas.restore(); //画分钟指针 RectF minuteRectF=new RectF(-pointRadio,-pointRadio,pointRadio,marginLong); canvas.save(); canvas.rotate(minute); canvas.drawRoundRect(minuteRectF,circular,circular,outCirclePaint); canvas.restore(); //画秒指针 canvas.save(); canvas.rotate(second); canvas.drawLine(0,0,0,radius-10,secondPaint); canvas.restore(); &#125; 这里需要说的是 1RectF hourRectF=new RectF(-pointRadio,-pointRadio,pointRadio,marginShort); 用来确定指针的位置，pointRadio代表的是这个矩形的半径，而 canvas.rotate(180);旋转180保证按我们正常的思路一样指针向上，设RectF的左上角为(-pointRadio,-pointRadio)是为了保持在中心点(注：此时canvas的原点是view的中心），剩下就是画指针了。效果图如下： 不用这是静态图，最后调用postInvalidateDelayed(1000);保证每个一秒就调用onDraw()方法来重绘View来实现view的每个一秒的动态变化，这样就完成效果图的功能。","categories":[{"name":"Android自定义","slug":"Android自定义","permalink":"http://jack921.win/categories/Android自定义/"}],"tags":[{"name":"Android自定义控件","slug":"Android自定义控件","permalink":"http://jack921.win/tags/Android自定义控件/"}]}]}